package parser

// Code generated by peg grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleSciName
	ruleTail
	ruleName
	ruleHybridFormula
	ruleHybridFormulaFull
	ruleHybridFormulaPart
	ruleNamedHybrid
	ruleNamedSpeciesHybrid
	ruleNamedGenusHybrid
	ruleGraftChimeraFormula
	ruleGraftChimeraFormulaFull
	ruleGraftChimeraFormulaPart
	ruleNamedGenusGraftChimera
	ruleCandidatusName
	ruleCandidatus
	ruleSingleName
	ruleNameUninomial
	ruleNameApprox
	ruleNameComp
	ruleNameSpecies
	ruleGenusWord
	ruleInfraspGroup
	ruleInfraspEpithet
	ruleCultivarWordGroup
	ruleCultivar
	ruleRankCultivar
	ruleNotHybridChar
	ruleCultivarRecursive
	ruleCultivarApostrophe
	ruleSpeciesEpithet
	ruleComparison
	ruleRank
	ruleRankNotho
	ruleRankOtherUncommon
	ruleRankOther
	ruleRankVar
	ruleRankForma
	ruleRankSsp
	ruleRankAgamo
	ruleSubgenusOrSuperspecies
	ruleSubgenus
	ruleSubgenus2
	ruleSubgenus1
	ruleUninomialCombo
	ruleUninomialCombo1
	ruleUninomialCombo2
	ruleRankUninomial
	ruleRankUninomialPlain
	ruleRankUninomialNotho
	ruleUninomial
	ruleUninomialWord
	ruleAbbrSubgenus
	ruleAbbrGenus
	ruleCapWord
	ruleCapWord1
	ruleCapWordWithDash
	ruleTwoLetterGenusDashedSegment
	ruleUpperAfterDash
	ruleLowerAfterDash
	ruleTwoLetterGenus
	ruleWord
	ruleWord1
	ruleWordStartsWithDigit
	ruleWord2
	ruleWordApostr
	ruleWord4
	ruleDotPrefix
	ruleMultiDashedWord
	ruleHybridChar
	ruleGraftChimeraChar
	ruleApproxNameIgnored
	ruleApproximation
	ruleAuthorship
	ruleAuthorshipCombo
	ruleOriginalAuthorship
	ruleOriginalAuthorshipComb
	ruleCombinationAuthorship
	ruleBasionymAuthorshipMissingParens
	ruleMissingParensStart
	ruleMissingParensEnd
	ruleBasionymAuthorshipYearMisformed
	ruleBasionymAuthorship
	ruleBasionymAuthorship1
	ruleBasionymAuthorship2Parens
	ruleAuthorsGroup
	ruleAuthorsTeam
	ruleAuthorSep
	ruleAuthorSep1
	ruleAuthorSep2
	ruleAuthorSepSpanish
	ruleAuthorEx
	ruleAuthorEmend
	ruleAuthor
	ruleAuthor0
	ruleAuthor1
	ruleAuthor2
	ruleUnknownAuthor
	ruleAuthorWord
	ruleAuthorEtAl
	ruleAuthorWord1
	ruleAuthorWord2
	ruleAuthorWord3
	ruleAuthorDashInitials
	ruleAuthorInitial
	ruleAuthorWordSoft
	ruleCapAuthorWord
	ruleAllCapsAuthorWord
	ruleFilius
	ruleFiliusF
	ruleFiliusFNoSpace
	ruleAuthorSuffix
	ruleAuthorPrefixGlued
	ruleAuthorPrefix
	ruleAuthorPrefix2
	ruleAuthorPrefix1
	ruleAuthorUpperChar
	ruleAuthorLowerChar
	ruleYear
	ruleYearRange
	ruleYearWithDot
	ruleYearApprox
	ruleYearWithPage
	ruleYearWithParens
	ruleYearWithChar
	ruleYearNum
	ruleNameUpperChar
	ruleUpperCharExtended
	ruleUpperChar
	ruleNameLowerChar
	ruleMiscodedChar
	ruleLowerCharExtended
	ruleLowerChar
	ruleSpaceCharEOI
	ruleNums
	ruleLowerGreek
	ruleLowerASCII
	ruleUpperASCII
	ruleApostrophe
	ruleApostrASCII
	ruleApostrOther
	ruleDash
	ruleSlash
	rule_
	ruleMultipleSpace
	ruleSingleSpace
	ruleOtherSpace
	ruleEND
)

var rul3s = [...]string{
	"Unknown",
	"SciName",
	"Tail",
	"Name",
	"HybridFormula",
	"HybridFormulaFull",
	"HybridFormulaPart",
	"NamedHybrid",
	"NamedSpeciesHybrid",
	"NamedGenusHybrid",
	"GraftChimeraFormula",
	"GraftChimeraFormulaFull",
	"GraftChimeraFormulaPart",
	"NamedGenusGraftChimera",
	"CandidatusName",
	"Candidatus",
	"SingleName",
	"NameUninomial",
	"NameApprox",
	"NameComp",
	"NameSpecies",
	"GenusWord",
	"InfraspGroup",
	"InfraspEpithet",
	"CultivarWordGroup",
	"Cultivar",
	"RankCultivar",
	"NotHybridChar",
	"CultivarRecursive",
	"CultivarApostrophe",
	"SpeciesEpithet",
	"Comparison",
	"Rank",
	"RankNotho",
	"RankOtherUncommon",
	"RankOther",
	"RankVar",
	"RankForma",
	"RankSsp",
	"RankAgamo",
	"SubgenusOrSuperspecies",
	"Subgenus",
	"Subgenus2",
	"Subgenus1",
	"UninomialCombo",
	"UninomialCombo1",
	"UninomialCombo2",
	"RankUninomial",
	"RankUninomialPlain",
	"RankUninomialNotho",
	"Uninomial",
	"UninomialWord",
	"AbbrSubgenus",
	"AbbrGenus",
	"CapWord",
	"CapWord1",
	"CapWordWithDash",
	"TwoLetterGenusDashedSegment",
	"UpperAfterDash",
	"LowerAfterDash",
	"TwoLetterGenus",
	"Word",
	"Word1",
	"WordStartsWithDigit",
	"Word2",
	"WordApostr",
	"Word4",
	"DotPrefix",
	"MultiDashedWord",
	"HybridChar",
	"GraftChimeraChar",
	"ApproxNameIgnored",
	"Approximation",
	"Authorship",
	"AuthorshipCombo",
	"OriginalAuthorship",
	"OriginalAuthorshipComb",
	"CombinationAuthorship",
	"BasionymAuthorshipMissingParens",
	"MissingParensStart",
	"MissingParensEnd",
	"BasionymAuthorshipYearMisformed",
	"BasionymAuthorship",
	"BasionymAuthorship1",
	"BasionymAuthorship2Parens",
	"AuthorsGroup",
	"AuthorsTeam",
	"AuthorSep",
	"AuthorSep1",
	"AuthorSep2",
	"AuthorSepSpanish",
	"AuthorEx",
	"AuthorEmend",
	"Author",
	"Author0",
	"Author1",
	"Author2",
	"UnknownAuthor",
	"AuthorWord",
	"AuthorEtAl",
	"AuthorWord1",
	"AuthorWord2",
	"AuthorWord3",
	"AuthorDashInitials",
	"AuthorInitial",
	"AuthorWordSoft",
	"CapAuthorWord",
	"AllCapsAuthorWord",
	"Filius",
	"FiliusF",
	"FiliusFNoSpace",
	"AuthorSuffix",
	"AuthorPrefixGlued",
	"AuthorPrefix",
	"AuthorPrefix2",
	"AuthorPrefix1",
	"AuthorUpperChar",
	"AuthorLowerChar",
	"Year",
	"YearRange",
	"YearWithDot",
	"YearApprox",
	"YearWithPage",
	"YearWithParens",
	"YearWithChar",
	"YearNum",
	"NameUpperChar",
	"UpperCharExtended",
	"UpperChar",
	"NameLowerChar",
	"MiscodedChar",
	"LowerCharExtended",
	"LowerChar",
	"SpaceCharEOI",
	"Nums",
	"LowerGreek",
	"LowerASCII",
	"UpperASCII",
	"Apostrophe",
	"ApostrASCII",
	"ApostrOther",
	"Dash",
	"Slash",
	"_",
	"MultipleSpace",
	"SingleSpace",
	"OtherSpace",
	"END",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Engine struct {
	baseEngine

	Buffer string
	buffer []rune
	rules  [148]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Engine) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Engine) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Engine
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Engine) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Engine) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Engine) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Engine) error {
	return func(p *Engine) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Engine) error {
	return func(p *Engine) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Engine) Init(options ...func(*Engine) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 SciName <- <(_? Name Tail END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[rule_]() {
						goto l2
					}
					goto l3
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
			l3:
				if !_rules[ruleName]() {
					goto l0
				}
				if !_rules[ruleTail]() {
					goto l0
				}
				if !_rules[ruleEND]() {
					goto l0
				}
				add(ruleSciName, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Tail <- <((_ / ';' / ',') .*)?> */
		func() bool {
			{
				position5 := position
				{
					position6, tokenIndex6 := position, tokenIndex
					{
						position8, tokenIndex8 := position, tokenIndex
						if !_rules[rule_]() {
							goto l9
						}
						goto l8
					l9:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(';') {
							goto l10
						}
						position++
						goto l8
					l10:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(',') {
							goto l6
						}
						position++
					}
				l8:
				l11:
					{
						position12, tokenIndex12 := position, tokenIndex
						if !matchDot() {
							goto l12
						}
						goto l11
					l12:
						position, tokenIndex = position12, tokenIndex12
					}
					goto l7
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
			l7:
				add(ruleTail, position5)
			}
			return true
		},
		/* 2 Name <- <(NamedGenusGraftChimera / GraftChimeraFormula / NamedHybrid / HybridFormula / CandidatusName / SingleName)> */
		func() bool {
			position13, tokenIndex13 := position, tokenIndex
			{
				position14 := position
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleNamedGenusGraftChimera]() {
						goto l16
					}
					goto l15
				l16:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleGraftChimeraFormula]() {
						goto l17
					}
					goto l15
				l17:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleNamedHybrid]() {
						goto l18
					}
					goto l15
				l18:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleHybridFormula]() {
						goto l19
					}
					goto l15
				l19:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleCandidatusName]() {
						goto l20
					}
					goto l15
				l20:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleSingleName]() {
						goto l13
					}
				}
			l15:
				add(ruleName, position14)
			}
			return true
		l13:
			position, tokenIndex = position13, tokenIndex13
			return false
		},
		/* 3 HybridFormula <- <(SingleName (_ (HybridFormulaPart / HybridFormulaFull))+)> */
		func() bool {
			position21, tokenIndex21 := position, tokenIndex
			{
				position22 := position
				if !_rules[ruleSingleName]() {
					goto l21
				}
				if !_rules[rule_]() {
					goto l21
				}
				{
					position25, tokenIndex25 := position, tokenIndex
					if !_rules[ruleHybridFormulaPart]() {
						goto l26
					}
					goto l25
				l26:
					position, tokenIndex = position25, tokenIndex25
					if !_rules[ruleHybridFormulaFull]() {
						goto l21
					}
				}
			l25:
			l23:
				{
					position24, tokenIndex24 := position, tokenIndex
					if !_rules[rule_]() {
						goto l24
					}
					{
						position27, tokenIndex27 := position, tokenIndex
						if !_rules[ruleHybridFormulaPart]() {
							goto l28
						}
						goto l27
					l28:
						position, tokenIndex = position27, tokenIndex27
						if !_rules[ruleHybridFormulaFull]() {
							goto l24
						}
					}
				l27:
					goto l23
				l24:
					position, tokenIndex = position24, tokenIndex24
				}
				add(ruleHybridFormula, position22)
			}
			return true
		l21:
			position, tokenIndex = position21, tokenIndex21
			return false
		},
		/* 4 HybridFormulaFull <- <(HybridChar (_ SingleName)?)> */
		func() bool {
			position29, tokenIndex29 := position, tokenIndex
			{
				position30 := position
				if !_rules[ruleHybridChar]() {
					goto l29
				}
				{
					position31, tokenIndex31 := position, tokenIndex
					if !_rules[rule_]() {
						goto l31
					}
					if !_rules[ruleSingleName]() {
						goto l31
					}
					goto l32
				l31:
					position, tokenIndex = position31, tokenIndex31
				}
			l32:
				add(ruleHybridFormulaFull, position30)
			}
			return true
		l29:
			position, tokenIndex = position29, tokenIndex29
			return false
		},
		/* 5 HybridFormulaPart <- <(HybridChar _ SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position33, tokenIndex33 := position, tokenIndex
			{
				position34 := position
				if !_rules[ruleHybridChar]() {
					goto l33
				}
				if !_rules[rule_]() {
					goto l33
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l33
				}
				{
					position35, tokenIndex35 := position, tokenIndex
					if !_rules[rule_]() {
						goto l35
					}
					if !_rules[ruleInfraspGroup]() {
						goto l35
					}
					goto l36
				l35:
					position, tokenIndex = position35, tokenIndex35
				}
			l36:
				add(ruleHybridFormulaPart, position34)
			}
			return true
		l33:
			position, tokenIndex = position33, tokenIndex33
			return false
		},
		/* 6 NamedHybrid <- <(NamedGenusHybrid / NamedSpeciesHybrid)> */
		func() bool {
			position37, tokenIndex37 := position, tokenIndex
			{
				position38 := position
				{
					position39, tokenIndex39 := position, tokenIndex
					if !_rules[ruleNamedGenusHybrid]() {
						goto l40
					}
					goto l39
				l40:
					position, tokenIndex = position39, tokenIndex39
					if !_rules[ruleNamedSpeciesHybrid]() {
						goto l37
					}
				}
			l39:
				add(ruleNamedHybrid, position38)
			}
			return true
		l37:
			position, tokenIndex = position37, tokenIndex37
			return false
		},
		/* 7 NamedSpeciesHybrid <- <(GenusWord (_ Subgenus)? (_ Comparison)? _ HybridChar _? SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position41, tokenIndex41 := position, tokenIndex
			{
				position42 := position
				if !_rules[ruleGenusWord]() {
					goto l41
				}
				{
					position43, tokenIndex43 := position, tokenIndex
					if !_rules[rule_]() {
						goto l43
					}
					if !_rules[ruleSubgenus]() {
						goto l43
					}
					goto l44
				l43:
					position, tokenIndex = position43, tokenIndex43
				}
			l44:
				{
					position45, tokenIndex45 := position, tokenIndex
					if !_rules[rule_]() {
						goto l45
					}
					if !_rules[ruleComparison]() {
						goto l45
					}
					goto l46
				l45:
					position, tokenIndex = position45, tokenIndex45
				}
			l46:
				if !_rules[rule_]() {
					goto l41
				}
				if !_rules[ruleHybridChar]() {
					goto l41
				}
				{
					position47, tokenIndex47 := position, tokenIndex
					if !_rules[rule_]() {
						goto l47
					}
					goto l48
				l47:
					position, tokenIndex = position47, tokenIndex47
				}
			l48:
				if !_rules[ruleSpeciesEpithet]() {
					goto l41
				}
				{
					position49, tokenIndex49 := position, tokenIndex
					if !_rules[rule_]() {
						goto l49
					}
					if !_rules[ruleInfraspGroup]() {
						goto l49
					}
					goto l50
				l49:
					position, tokenIndex = position49, tokenIndex49
				}
			l50:
				add(ruleNamedSpeciesHybrid, position42)
			}
			return true
		l41:
			position, tokenIndex = position41, tokenIndex41
			return false
		},
		/* 8 NamedGenusHybrid <- <(HybridChar _? SingleName)> */
		func() bool {
			position51, tokenIndex51 := position, tokenIndex
			{
				position52 := position
				if !_rules[ruleHybridChar]() {
					goto l51
				}
				{
					position53, tokenIndex53 := position, tokenIndex
					if !_rules[rule_]() {
						goto l53
					}
					goto l54
				l53:
					position, tokenIndex = position53, tokenIndex53
				}
			l54:
				if !_rules[ruleSingleName]() {
					goto l51
				}
				add(ruleNamedGenusHybrid, position52)
			}
			return true
		l51:
			position, tokenIndex = position51, tokenIndex51
			return false
		},
		/* 9 GraftChimeraFormula <- <(SingleName (_ (GraftChimeraFormulaPart / GraftChimeraFormulaFull))+)> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				if !_rules[ruleSingleName]() {
					goto l55
				}
				if !_rules[rule_]() {
					goto l55
				}
				{
					position59, tokenIndex59 := position, tokenIndex
					if !_rules[ruleGraftChimeraFormulaPart]() {
						goto l60
					}
					goto l59
				l60:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleGraftChimeraFormulaFull]() {
						goto l55
					}
				}
			l59:
			l57:
				{
					position58, tokenIndex58 := position, tokenIndex
					if !_rules[rule_]() {
						goto l58
					}
					{
						position61, tokenIndex61 := position, tokenIndex
						if !_rules[ruleGraftChimeraFormulaPart]() {
							goto l62
						}
						goto l61
					l62:
						position, tokenIndex = position61, tokenIndex61
						if !_rules[ruleGraftChimeraFormulaFull]() {
							goto l58
						}
					}
				l61:
					goto l57
				l58:
					position, tokenIndex = position58, tokenIndex58
				}
				add(ruleGraftChimeraFormula, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
		/* 10 GraftChimeraFormulaFull <- <(GraftChimeraChar (_ SingleName)?)> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l63
				}
				{
					position65, tokenIndex65 := position, tokenIndex
					if !_rules[rule_]() {
						goto l65
					}
					if !_rules[ruleSingleName]() {
						goto l65
					}
					goto l66
				l65:
					position, tokenIndex = position65, tokenIndex65
				}
			l66:
				add(ruleGraftChimeraFormulaFull, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 11 GraftChimeraFormulaPart <- <(GraftChimeraChar _ SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position67, tokenIndex67 := position, tokenIndex
			{
				position68 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l67
				}
				if !_rules[rule_]() {
					goto l67
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l67
				}
				{
					position69, tokenIndex69 := position, tokenIndex
					if !_rules[rule_]() {
						goto l69
					}
					if !_rules[ruleInfraspGroup]() {
						goto l69
					}
					goto l70
				l69:
					position, tokenIndex = position69, tokenIndex69
				}
			l70:
				add(ruleGraftChimeraFormulaPart, position68)
			}
			return true
		l67:
			position, tokenIndex = position67, tokenIndex67
			return false
		},
		/* 12 NamedGenusGraftChimera <- <(GraftChimeraChar _? SingleName)> */
		func() bool {
			position71, tokenIndex71 := position, tokenIndex
			{
				position72 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l71
				}
				{
					position73, tokenIndex73 := position, tokenIndex
					if !_rules[rule_]() {
						goto l73
					}
					goto l74
				l73:
					position, tokenIndex = position73, tokenIndex73
				}
			l74:
				if !_rules[ruleSingleName]() {
					goto l71
				}
				add(ruleNamedGenusGraftChimera, position72)
			}
			return true
		l71:
			position, tokenIndex = position71, tokenIndex71
			return false
		},
		/* 13 CandidatusName <- <(Candidatus _ SingleName)> */
		func() bool {
			position75, tokenIndex75 := position, tokenIndex
			{
				position76 := position
				if !_rules[ruleCandidatus]() {
					goto l75
				}
				if !_rules[rule_]() {
					goto l75
				}
				if !_rules[ruleSingleName]() {
					goto l75
				}
				add(ruleCandidatusName, position76)
			}
			return true
		l75:
			position, tokenIndex = position75, tokenIndex75
			return false
		},
		/* 14 Candidatus <- <('C' 'a' 'n' 'd' 'i' 'd' 'a' 't' 'u' 's')> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				if buffer[position] != rune('C') {
					goto l77
				}
				position++
				if buffer[position] != rune('a') {
					goto l77
				}
				position++
				if buffer[position] != rune('n') {
					goto l77
				}
				position++
				if buffer[position] != rune('d') {
					goto l77
				}
				position++
				if buffer[position] != rune('i') {
					goto l77
				}
				position++
				if buffer[position] != rune('d') {
					goto l77
				}
				position++
				if buffer[position] != rune('a') {
					goto l77
				}
				position++
				if buffer[position] != rune('t') {
					goto l77
				}
				position++
				if buffer[position] != rune('u') {
					goto l77
				}
				position++
				if buffer[position] != rune('s') {
					goto l77
				}
				position++
				add(ruleCandidatus, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 15 SingleName <- <(NameComp / NameApprox / NameSpecies / NameUninomial)> */
		func() bool {
			position79, tokenIndex79 := position, tokenIndex
			{
				position80 := position
				{
					position81, tokenIndex81 := position, tokenIndex
					if !_rules[ruleNameComp]() {
						goto l82
					}
					goto l81
				l82:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameApprox]() {
						goto l83
					}
					goto l81
				l83:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameSpecies]() {
						goto l84
					}
					goto l81
				l84:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameUninomial]() {
						goto l79
					}
				}
			l81:
				add(ruleSingleName, position80)
			}
			return true
		l79:
			position, tokenIndex = position79, tokenIndex79
			return false
		},
		/* 16 NameUninomial <- <((UninomialCombo / Uninomial) (_ CultivarWordGroup)?)> */
		func() bool {
			position85, tokenIndex85 := position, tokenIndex
			{
				position86 := position
				{
					position87, tokenIndex87 := position, tokenIndex
					if !_rules[ruleUninomialCombo]() {
						goto l88
					}
					goto l87
				l88:
					position, tokenIndex = position87, tokenIndex87
					if !_rules[ruleUninomial]() {
						goto l85
					}
				}
			l87:
				{
					position89, tokenIndex89 := position, tokenIndex
					if !_rules[rule_]() {
						goto l89
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l89
					}
					goto l90
				l89:
					position, tokenIndex = position89, tokenIndex89
				}
			l90:
				add(ruleNameUninomial, position86)
			}
			return true
		l85:
			position, tokenIndex = position85, tokenIndex85
			return false
		},
		/* 17 NameApprox <- <(GenusWord (_ SpeciesEpithet)? _ Approximation ApproxNameIgnored)> */
		func() bool {
			position91, tokenIndex91 := position, tokenIndex
			{
				position92 := position
				if !_rules[ruleGenusWord]() {
					goto l91
				}
				{
					position93, tokenIndex93 := position, tokenIndex
					if !_rules[rule_]() {
						goto l93
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l93
					}
					goto l94
				l93:
					position, tokenIndex = position93, tokenIndex93
				}
			l94:
				if !_rules[rule_]() {
					goto l91
				}
				if !_rules[ruleApproximation]() {
					goto l91
				}
				if !_rules[ruleApproxNameIgnored]() {
					goto l91
				}
				add(ruleNameApprox, position92)
			}
			return true
		l91:
			position, tokenIndex = position91, tokenIndex91
			return false
		},
		/* 18 NameComp <- <(GenusWord _ Comparison (_ SpeciesEpithet)?)> */
		func() bool {
			position95, tokenIndex95 := position, tokenIndex
			{
				position96 := position
				if !_rules[ruleGenusWord]() {
					goto l95
				}
				if !_rules[rule_]() {
					goto l95
				}
				if !_rules[ruleComparison]() {
					goto l95
				}
				{
					position97, tokenIndex97 := position, tokenIndex
					if !_rules[rule_]() {
						goto l97
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l97
					}
					goto l98
				l97:
					position, tokenIndex = position97, tokenIndex97
				}
			l98:
				add(ruleNameComp, position96)
			}
			return true
		l95:
			position, tokenIndex = position95, tokenIndex95
			return false
		},
		/* 19 NameSpecies <- <(GenusWord (_? (Subgenus / SubgenusOrSuperspecies))? _ SpeciesEpithet (_ InfraspGroup)? (_ CultivarWordGroup)?)> */
		func() bool {
			position99, tokenIndex99 := position, tokenIndex
			{
				position100 := position
				if !_rules[ruleGenusWord]() {
					goto l99
				}
				{
					position101, tokenIndex101 := position, tokenIndex
					{
						position103, tokenIndex103 := position, tokenIndex
						if !_rules[rule_]() {
							goto l103
						}
						goto l104
					l103:
						position, tokenIndex = position103, tokenIndex103
					}
				l104:
					{
						position105, tokenIndex105 := position, tokenIndex
						if !_rules[ruleSubgenus]() {
							goto l106
						}
						goto l105
					l106:
						position, tokenIndex = position105, tokenIndex105
						if !_rules[ruleSubgenusOrSuperspecies]() {
							goto l101
						}
					}
				l105:
					goto l102
				l101:
					position, tokenIndex = position101, tokenIndex101
				}
			l102:
				if !_rules[rule_]() {
					goto l99
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l99
				}
				{
					position107, tokenIndex107 := position, tokenIndex
					if !_rules[rule_]() {
						goto l107
					}
					if !_rules[ruleInfraspGroup]() {
						goto l107
					}
					goto l108
				l107:
					position, tokenIndex = position107, tokenIndex107
				}
			l108:
				{
					position109, tokenIndex109 := position, tokenIndex
					if !_rules[rule_]() {
						goto l109
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l109
					}
					goto l110
				l109:
					position, tokenIndex = position109, tokenIndex109
				}
			l110:
				add(ruleNameSpecies, position100)
			}
			return true
		l99:
			position, tokenIndex = position99, tokenIndex99
			return false
		},
		/* 20 GenusWord <- <((AbbrGenus / UninomialWord) !(_ AuthorWord))> */
		func() bool {
			position111, tokenIndex111 := position, tokenIndex
			{
				position112 := position
				{
					position113, tokenIndex113 := position, tokenIndex
					if !_rules[ruleAbbrGenus]() {
						goto l114
					}
					goto l113
				l114:
					position, tokenIndex = position113, tokenIndex113
					if !_rules[ruleUninomialWord]() {
						goto l111
					}
				}
			l113:
				{
					position115, tokenIndex115 := position, tokenIndex
					if !_rules[rule_]() {
						goto l115
					}
					if !_rules[ruleAuthorWord]() {
						goto l115
					}
					goto l111
				l115:
					position, tokenIndex = position115, tokenIndex115
				}
				add(ruleGenusWord, position112)
			}
			return true
		l111:
			position, tokenIndex = position111, tokenIndex111
			return false
		},
		/* 21 InfraspGroup <- <(InfraspEpithet (_ InfraspEpithet)? (_ InfraspEpithet)?)> */
		func() bool {
			position116, tokenIndex116 := position, tokenIndex
			{
				position117 := position
				if !_rules[ruleInfraspEpithet]() {
					goto l116
				}
				{
					position118, tokenIndex118 := position, tokenIndex
					if !_rules[rule_]() {
						goto l118
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l118
					}
					goto l119
				l118:
					position, tokenIndex = position118, tokenIndex118
				}
			l119:
				{
					position120, tokenIndex120 := position, tokenIndex
					if !_rules[rule_]() {
						goto l120
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l120
					}
					goto l121
				l120:
					position, tokenIndex = position120, tokenIndex120
				}
			l121:
				add(ruleInfraspGroup, position117)
			}
			return true
		l116:
			position, tokenIndex = position116, tokenIndex116
			return false
		},
		/* 22 InfraspEpithet <- <((Rank _?)? !AuthorEx Word (_? Authorship)?)> */
		func() bool {
			position122, tokenIndex122 := position, tokenIndex
			{
				position123 := position
				{
					position124, tokenIndex124 := position, tokenIndex
					if !_rules[ruleRank]() {
						goto l124
					}
					{
						position126, tokenIndex126 := position, tokenIndex
						if !_rules[rule_]() {
							goto l126
						}
						goto l127
					l126:
						position, tokenIndex = position126, tokenIndex126
					}
				l127:
					goto l125
				l124:
					position, tokenIndex = position124, tokenIndex124
				}
			l125:
				{
					position128, tokenIndex128 := position, tokenIndex
					if !_rules[ruleAuthorEx]() {
						goto l128
					}
					goto l122
				l128:
					position, tokenIndex = position128, tokenIndex128
				}
				if !_rules[ruleWord]() {
					goto l122
				}
				{
					position129, tokenIndex129 := position, tokenIndex
					{
						position131, tokenIndex131 := position, tokenIndex
						if !_rules[rule_]() {
							goto l131
						}
						goto l132
					l131:
						position, tokenIndex = position131, tokenIndex131
					}
				l132:
					if !_rules[ruleAuthorship]() {
						goto l129
					}
					goto l130
				l129:
					position, tokenIndex = position129, tokenIndex129
				}
			l130:
				add(ruleInfraspEpithet, position123)
			}
			return true
		l122:
			position, tokenIndex = position122, tokenIndex122
			return false
		},
		/* 23 CultivarWordGroup <- <(((RankCultivar _)? CultivarApostrophe CultivarRecursive CultivarApostrophe) / (RankCultivar _ Cultivar))> */
		func() bool {
			position133, tokenIndex133 := position, tokenIndex
			{
				position134 := position
				{
					position135, tokenIndex135 := position, tokenIndex
					{
						position137, tokenIndex137 := position, tokenIndex
						if !_rules[ruleRankCultivar]() {
							goto l137
						}
						if !_rules[rule_]() {
							goto l137
						}
						goto l138
					l137:
						position, tokenIndex = position137, tokenIndex137
					}
				l138:
					if !_rules[ruleCultivarApostrophe]() {
						goto l136
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l136
					}
					if !_rules[ruleCultivarApostrophe]() {
						goto l136
					}
					goto l135
				l136:
					position, tokenIndex = position135, tokenIndex135
					if !_rules[ruleRankCultivar]() {
						goto l133
					}
					if !_rules[rule_]() {
						goto l133
					}
					if !_rules[ruleCultivar]() {
						goto l133
					}
				}
			l135:
				add(ruleCultivarWordGroup, position134)
			}
			return true
		l133:
			position, tokenIndex = position133, tokenIndex133
			return false
		},
		/* 24 Cultivar <- <NotHybridChar+> */
		func() bool {
			position139, tokenIndex139 := position, tokenIndex
			{
				position140 := position
				if !_rules[ruleNotHybridChar]() {
					goto l139
				}
			l141:
				{
					position142, tokenIndex142 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l142
					}
					goto l141
				l142:
					position, tokenIndex = position142, tokenIndex142
				}
				add(ruleCultivar, position140)
			}
			return true
		l139:
			position, tokenIndex = position139, tokenIndex139
			return false
		},
		/* 25 RankCultivar <- <('c' 'v' '.'?)> */
		func() bool {
			position143, tokenIndex143 := position, tokenIndex
			{
				position144 := position
				if buffer[position] != rune('c') {
					goto l143
				}
				position++
				if buffer[position] != rune('v') {
					goto l143
				}
				position++
				{
					position145, tokenIndex145 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l145
					}
					position++
					goto l146
				l145:
					position, tokenIndex = position145, tokenIndex145
				}
			l146:
				add(ruleRankCultivar, position144)
			}
			return true
		l143:
			position, tokenIndex = position143, tokenIndex143
			return false
		},
		/* 26 NotHybridChar <- <(!(_ HybridChar) .)> */
		func() bool {
			position147, tokenIndex147 := position, tokenIndex
			{
				position148 := position
				{
					position149, tokenIndex149 := position, tokenIndex
					if !_rules[rule_]() {
						goto l149
					}
					if !_rules[ruleHybridChar]() {
						goto l149
					}
					goto l147
				l149:
					position, tokenIndex = position149, tokenIndex149
				}
				if !matchDot() {
					goto l147
				}
				add(ruleNotHybridChar, position148)
			}
			return true
		l147:
			position, tokenIndex = position147, tokenIndex147
			return false
		},
		/* 27 CultivarRecursive <- <((NotHybridChar CultivarRecursive) / &CultivarApostrophe)> */
		func() bool {
			position150, tokenIndex150 := position, tokenIndex
			{
				position151 := position
				{
					position152, tokenIndex152 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l153
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l153
					}
					goto l152
				l153:
					position, tokenIndex = position152, tokenIndex152
					{
						position154, tokenIndex154 := position, tokenIndex
						if !_rules[ruleCultivarApostrophe]() {
							goto l150
						}
						position, tokenIndex = position154, tokenIndex154
					}
				}
			l152:
				add(ruleCultivarRecursive, position151)
			}
			return true
		l150:
			position, tokenIndex = position150, tokenIndex150
			return false
		},
		/* 28 CultivarApostrophe <- <('\'' / '‘' / '’' / '"' / '“' / '”')> */
		func() bool {
			position155, tokenIndex155 := position, tokenIndex
			{
				position156 := position
				{
					position157, tokenIndex157 := position, tokenIndex
					if buffer[position] != rune('\'') {
						goto l158
					}
					position++
					goto l157
				l158:
					position, tokenIndex = position157, tokenIndex157
					if buffer[position] != rune('‘') {
						goto l159
					}
					position++
					goto l157
				l159:
					position, tokenIndex = position157, tokenIndex157
					if buffer[position] != rune('’') {
						goto l160
					}
					position++
					goto l157
				l160:
					position, tokenIndex = position157, tokenIndex157
					if buffer[position] != rune('"') {
						goto l161
					}
					position++
					goto l157
				l161:
					position, tokenIndex = position157, tokenIndex157
					if buffer[position] != rune('“') {
						goto l162
					}
					position++
					goto l157
				l162:
					position, tokenIndex = position157, tokenIndex157
					if buffer[position] != rune('”') {
						goto l155
					}
					position++
				}
			l157:
				add(ruleCultivarApostrophe, position156)
			}
			return true
		l155:
			position, tokenIndex = position155, tokenIndex155
			return false
		},
		/* 29 SpeciesEpithet <- <(!AuthorEx Word (_? Authorship)?)> */
		func() bool {
			position163, tokenIndex163 := position, tokenIndex
			{
				position164 := position
				{
					position165, tokenIndex165 := position, tokenIndex
					if !_rules[ruleAuthorEx]() {
						goto l165
					}
					goto l163
				l165:
					position, tokenIndex = position165, tokenIndex165
				}
				if !_rules[ruleWord]() {
					goto l163
				}
				{
					position166, tokenIndex166 := position, tokenIndex
					{
						position168, tokenIndex168 := position, tokenIndex
						if !_rules[rule_]() {
							goto l168
						}
						goto l169
					l168:
						position, tokenIndex = position168, tokenIndex168
					}
				l169:
					if !_rules[ruleAuthorship]() {
						goto l166
					}
					goto l167
				l166:
					position, tokenIndex = position166, tokenIndex166
				}
			l167:
				add(ruleSpeciesEpithet, position164)
			}
			return true
		l163:
			position, tokenIndex = position163, tokenIndex163
			return false
		},
		/* 30 Comparison <- <('c' 'f' '.'? &SpaceCharEOI)> */
		func() bool {
			position170, tokenIndex170 := position, tokenIndex
			{
				position171 := position
				if buffer[position] != rune('c') {
					goto l170
				}
				position++
				if buffer[position] != rune('f') {
					goto l170
				}
				position++
				{
					position172, tokenIndex172 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l172
					}
					position++
					goto l173
				l172:
					position, tokenIndex = position172, tokenIndex172
				}
			l173:
				{
					position174, tokenIndex174 := position, tokenIndex
					if !_rules[ruleSpaceCharEOI]() {
						goto l170
					}
					position, tokenIndex = position174, tokenIndex174
				}
				add(ruleComparison, position171)
			}
			return true
		l170:
			position, tokenIndex = position170, tokenIndex170
			return false
		},
		/* 31 Rank <- <((RankForma / RankVar / RankSsp / RankOther / RankOtherUncommon / RankAgamo / RankNotho) (_? LowerGreek ('.' / &SpaceCharEOI))?)> */
		func() bool {
			position175, tokenIndex175 := position, tokenIndex
			{
				position176 := position
				{
					position177, tokenIndex177 := position, tokenIndex
					if !_rules[ruleRankForma]() {
						goto l178
					}
					goto l177
				l178:
					position, tokenIndex = position177, tokenIndex177
					if !_rules[ruleRankVar]() {
						goto l179
					}
					goto l177
				l179:
					position, tokenIndex = position177, tokenIndex177
					if !_rules[ruleRankSsp]() {
						goto l180
					}
					goto l177
				l180:
					position, tokenIndex = position177, tokenIndex177
					if !_rules[ruleRankOther]() {
						goto l181
					}
					goto l177
				l181:
					position, tokenIndex = position177, tokenIndex177
					if !_rules[ruleRankOtherUncommon]() {
						goto l182
					}
					goto l177
				l182:
					position, tokenIndex = position177, tokenIndex177
					if !_rules[ruleRankAgamo]() {
						goto l183
					}
					goto l177
				l183:
					position, tokenIndex = position177, tokenIndex177
					if !_rules[ruleRankNotho]() {
						goto l175
					}
				}
			l177:
				{
					position184, tokenIndex184 := position, tokenIndex
					{
						position186, tokenIndex186 := position, tokenIndex
						if !_rules[rule_]() {
							goto l186
						}
						goto l187
					l186:
						position, tokenIndex = position186, tokenIndex186
					}
				l187:
					if !_rules[ruleLowerGreek]() {
						goto l184
					}
					{
						position188, tokenIndex188 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l189
						}
						position++
						goto l188
					l189:
						position, tokenIndex = position188, tokenIndex188
						{
							position190, tokenIndex190 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l184
							}
							position, tokenIndex = position190, tokenIndex190
						}
					}
				l188:
					goto l185
				l184:
					position, tokenIndex = position184, tokenIndex184
				}
			l185:
				add(ruleRank, position176)
			}
			return true
		l175:
			position, tokenIndex = position175, tokenIndex175
			return false
		},
		/* 32 RankNotho <- <((('n' 'o' 't' 'h' 'o' (('v' 'a' 'r') / ('f' 'o') / 'f' / ('s' 'u' 'b' 's' 'p') / ('s' 's' 'p') / ('s' 'p') / ('m' 'o' 'r' 't' 'h') / ('s' 'u' 'p' 's' 'p') / ('s' 'u'))) / ('n' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position191, tokenIndex191 := position, tokenIndex
			{
				position192 := position
				{
					position193, tokenIndex193 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l194
					}
					position++
					if buffer[position] != rune('o') {
						goto l194
					}
					position++
					if buffer[position] != rune('t') {
						goto l194
					}
					position++
					if buffer[position] != rune('h') {
						goto l194
					}
					position++
					if buffer[position] != rune('o') {
						goto l194
					}
					position++
					{
						position195, tokenIndex195 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l196
						}
						position++
						if buffer[position] != rune('a') {
							goto l196
						}
						position++
						if buffer[position] != rune('r') {
							goto l196
						}
						position++
						goto l195
					l196:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('f') {
							goto l197
						}
						position++
						if buffer[position] != rune('o') {
							goto l197
						}
						position++
						goto l195
					l197:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('f') {
							goto l198
						}
						position++
						goto l195
					l198:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('s') {
							goto l199
						}
						position++
						if buffer[position] != rune('u') {
							goto l199
						}
						position++
						if buffer[position] != rune('b') {
							goto l199
						}
						position++
						if buffer[position] != rune('s') {
							goto l199
						}
						position++
						if buffer[position] != rune('p') {
							goto l199
						}
						position++
						goto l195
					l199:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('s') {
							goto l200
						}
						position++
						if buffer[position] != rune('s') {
							goto l200
						}
						position++
						if buffer[position] != rune('p') {
							goto l200
						}
						position++
						goto l195
					l200:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('s') {
							goto l201
						}
						position++
						if buffer[position] != rune('p') {
							goto l201
						}
						position++
						goto l195
					l201:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('m') {
							goto l202
						}
						position++
						if buffer[position] != rune('o') {
							goto l202
						}
						position++
						if buffer[position] != rune('r') {
							goto l202
						}
						position++
						if buffer[position] != rune('t') {
							goto l202
						}
						position++
						if buffer[position] != rune('h') {
							goto l202
						}
						position++
						goto l195
					l202:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('s') {
							goto l203
						}
						position++
						if buffer[position] != rune('u') {
							goto l203
						}
						position++
						if buffer[position] != rune('p') {
							goto l203
						}
						position++
						if buffer[position] != rune('s') {
							goto l203
						}
						position++
						if buffer[position] != rune('p') {
							goto l203
						}
						position++
						goto l195
					l203:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('s') {
							goto l194
						}
						position++
						if buffer[position] != rune('u') {
							goto l194
						}
						position++
					}
				l195:
					goto l193
				l194:
					position, tokenIndex = position193, tokenIndex193
					if buffer[position] != rune('n') {
						goto l191
					}
					position++
					if buffer[position] != rune('v') {
						goto l191
					}
					position++
					if buffer[position] != rune('a') {
						goto l191
					}
					position++
					if buffer[position] != rune('r') {
						goto l191
					}
					position++
				}
			l193:
				{
					position204, tokenIndex204 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l205
					}
					position++
					goto l204
				l205:
					position, tokenIndex = position204, tokenIndex204
					{
						position206, tokenIndex206 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l191
						}
						position, tokenIndex = position206, tokenIndex206
					}
				}
			l204:
				add(ruleRankNotho, position192)
			}
			return true
		l191:
			position, tokenIndex = position191, tokenIndex191
			return false
		},
		/* 33 RankOtherUncommon <- <(('*' / ('n' 'a' 't' 'i' 'o') / ('n' 'a' 't' '.') / ('n' 'a' 't') / ('f' '.' 's' 'p') / 'α' / ('β' 'β') / 'β' / 'γ' / 'δ' / 'ε' / 'φ' / 'θ' / 'μ' / ('a' '.') / ('b' '.') / ('c' '.') / ('d' '.') / ('e' '.') / ('g' '.') / ('k' '.') / ('m' 'u' 't' '.')) &SpaceCharEOI)> */
		func() bool {
			position207, tokenIndex207 := position, tokenIndex
			{
				position208 := position
				{
					position209, tokenIndex209 := position, tokenIndex
					if buffer[position] != rune('*') {
						goto l210
					}
					position++
					goto l209
				l210:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('n') {
						goto l211
					}
					position++
					if buffer[position] != rune('a') {
						goto l211
					}
					position++
					if buffer[position] != rune('t') {
						goto l211
					}
					position++
					if buffer[position] != rune('i') {
						goto l211
					}
					position++
					if buffer[position] != rune('o') {
						goto l211
					}
					position++
					goto l209
				l211:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('n') {
						goto l212
					}
					position++
					if buffer[position] != rune('a') {
						goto l212
					}
					position++
					if buffer[position] != rune('t') {
						goto l212
					}
					position++
					if buffer[position] != rune('.') {
						goto l212
					}
					position++
					goto l209
				l212:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('n') {
						goto l213
					}
					position++
					if buffer[position] != rune('a') {
						goto l213
					}
					position++
					if buffer[position] != rune('t') {
						goto l213
					}
					position++
					goto l209
				l213:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('f') {
						goto l214
					}
					position++
					if buffer[position] != rune('.') {
						goto l214
					}
					position++
					if buffer[position] != rune('s') {
						goto l214
					}
					position++
					if buffer[position] != rune('p') {
						goto l214
					}
					position++
					goto l209
				l214:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('α') {
						goto l215
					}
					position++
					goto l209
				l215:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('β') {
						goto l216
					}
					position++
					if buffer[position] != rune('β') {
						goto l216
					}
					position++
					goto l209
				l216:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('β') {
						goto l217
					}
					position++
					goto l209
				l217:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('γ') {
						goto l218
					}
					position++
					goto l209
				l218:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('δ') {
						goto l219
					}
					position++
					goto l209
				l219:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('ε') {
						goto l220
					}
					position++
					goto l209
				l220:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('φ') {
						goto l221
					}
					position++
					goto l209
				l221:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('θ') {
						goto l222
					}
					position++
					goto l209
				l222:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('μ') {
						goto l223
					}
					position++
					goto l209
				l223:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('a') {
						goto l224
					}
					position++
					if buffer[position] != rune('.') {
						goto l224
					}
					position++
					goto l209
				l224:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('b') {
						goto l225
					}
					position++
					if buffer[position] != rune('.') {
						goto l225
					}
					position++
					goto l209
				l225:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('c') {
						goto l226
					}
					position++
					if buffer[position] != rune('.') {
						goto l226
					}
					position++
					goto l209
				l226:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('d') {
						goto l227
					}
					position++
					if buffer[position] != rune('.') {
						goto l227
					}
					position++
					goto l209
				l227:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('e') {
						goto l228
					}
					position++
					if buffer[position] != rune('.') {
						goto l228
					}
					position++
					goto l209
				l228:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('g') {
						goto l229
					}
					position++
					if buffer[position] != rune('.') {
						goto l229
					}
					position++
					goto l209
				l229:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('k') {
						goto l230
					}
					position++
					if buffer[position] != rune('.') {
						goto l230
					}
					position++
					goto l209
				l230:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('m') {
						goto l207
					}
					position++
					if buffer[position] != rune('u') {
						goto l207
					}
					position++
					if buffer[position] != rune('t') {
						goto l207
					}
					position++
					if buffer[position] != rune('.') {
						goto l207
					}
					position++
				}
			l209:
				{
					position231, tokenIndex231 := position, tokenIndex
					if !_rules[ruleSpaceCharEOI]() {
						goto l207
					}
					position, tokenIndex = position231, tokenIndex231
				}
				add(ruleRankOtherUncommon, position208)
			}
			return true
		l207:
			position, tokenIndex = position207, tokenIndex207
			return false
		},
		/* 34 RankOther <- <((('m' 'o' 'r' 'p' 'h') / ('c' 'o' 'n' 'v' 'a' 'r') / ('p' 's' 'e' 'u' 'd' 'o' 'v' 'a' 'r') / ('s' 'e' 'c' 't') / ('s' 'e' 'r') / ('s' 'u' 'b' 'v' 'a' 'r') / ('s' 'u' 'b' 'f') / ('r' 'a' 'c' 'e') / ('p' 'v') / ('p' 'a' 't' 'h' 'o' 'v' 'a' 'r') / ('a' 'b' '.' (_? ('n' '.'))?) / ('s' 't')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position232, tokenIndex232 := position, tokenIndex
			{
				position233 := position
				{
					position234, tokenIndex234 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l235
					}
					position++
					if buffer[position] != rune('o') {
						goto l235
					}
					position++
					if buffer[position] != rune('r') {
						goto l235
					}
					position++
					if buffer[position] != rune('p') {
						goto l235
					}
					position++
					if buffer[position] != rune('h') {
						goto l235
					}
					position++
					goto l234
				l235:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('c') {
						goto l236
					}
					position++
					if buffer[position] != rune('o') {
						goto l236
					}
					position++
					if buffer[position] != rune('n') {
						goto l236
					}
					position++
					if buffer[position] != rune('v') {
						goto l236
					}
					position++
					if buffer[position] != rune('a') {
						goto l236
					}
					position++
					if buffer[position] != rune('r') {
						goto l236
					}
					position++
					goto l234
				l236:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('p') {
						goto l237
					}
					position++
					if buffer[position] != rune('s') {
						goto l237
					}
					position++
					if buffer[position] != rune('e') {
						goto l237
					}
					position++
					if buffer[position] != rune('u') {
						goto l237
					}
					position++
					if buffer[position] != rune('d') {
						goto l237
					}
					position++
					if buffer[position] != rune('o') {
						goto l237
					}
					position++
					if buffer[position] != rune('v') {
						goto l237
					}
					position++
					if buffer[position] != rune('a') {
						goto l237
					}
					position++
					if buffer[position] != rune('r') {
						goto l237
					}
					position++
					goto l234
				l237:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('s') {
						goto l238
					}
					position++
					if buffer[position] != rune('e') {
						goto l238
					}
					position++
					if buffer[position] != rune('c') {
						goto l238
					}
					position++
					if buffer[position] != rune('t') {
						goto l238
					}
					position++
					goto l234
				l238:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('s') {
						goto l239
					}
					position++
					if buffer[position] != rune('e') {
						goto l239
					}
					position++
					if buffer[position] != rune('r') {
						goto l239
					}
					position++
					goto l234
				l239:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('s') {
						goto l240
					}
					position++
					if buffer[position] != rune('u') {
						goto l240
					}
					position++
					if buffer[position] != rune('b') {
						goto l240
					}
					position++
					if buffer[position] != rune('v') {
						goto l240
					}
					position++
					if buffer[position] != rune('a') {
						goto l240
					}
					position++
					if buffer[position] != rune('r') {
						goto l240
					}
					position++
					goto l234
				l240:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('s') {
						goto l241
					}
					position++
					if buffer[position] != rune('u') {
						goto l241
					}
					position++
					if buffer[position] != rune('b') {
						goto l241
					}
					position++
					if buffer[position] != rune('f') {
						goto l241
					}
					position++
					goto l234
				l241:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('r') {
						goto l242
					}
					position++
					if buffer[position] != rune('a') {
						goto l242
					}
					position++
					if buffer[position] != rune('c') {
						goto l242
					}
					position++
					if buffer[position] != rune('e') {
						goto l242
					}
					position++
					goto l234
				l242:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('p') {
						goto l243
					}
					position++
					if buffer[position] != rune('v') {
						goto l243
					}
					position++
					goto l234
				l243:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('p') {
						goto l244
					}
					position++
					if buffer[position] != rune('a') {
						goto l244
					}
					position++
					if buffer[position] != rune('t') {
						goto l244
					}
					position++
					if buffer[position] != rune('h') {
						goto l244
					}
					position++
					if buffer[position] != rune('o') {
						goto l244
					}
					position++
					if buffer[position] != rune('v') {
						goto l244
					}
					position++
					if buffer[position] != rune('a') {
						goto l244
					}
					position++
					if buffer[position] != rune('r') {
						goto l244
					}
					position++
					goto l234
				l244:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('a') {
						goto l245
					}
					position++
					if buffer[position] != rune('b') {
						goto l245
					}
					position++
					if buffer[position] != rune('.') {
						goto l245
					}
					position++
					{
						position246, tokenIndex246 := position, tokenIndex
						{
							position248, tokenIndex248 := position, tokenIndex
							if !_rules[rule_]() {
								goto l248
							}
							goto l249
						l248:
							position, tokenIndex = position248, tokenIndex248
						}
					l249:
						if buffer[position] != rune('n') {
							goto l246
						}
						position++
						if buffer[position] != rune('.') {
							goto l246
						}
						position++
						goto l247
					l246:
						position, tokenIndex = position246, tokenIndex246
					}
				l247:
					goto l234
				l245:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('s') {
						goto l232
					}
					position++
					if buffer[position] != rune('t') {
						goto l232
					}
					position++
				}
			l234:
				{
					position250, tokenIndex250 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l251
					}
					position++
					goto l250
				l251:
					position, tokenIndex = position250, tokenIndex250
					{
						position252, tokenIndex252 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l232
						}
						position, tokenIndex = position252, tokenIndex252
					}
				}
			l250:
				add(ruleRankOther, position233)
			}
			return true
		l232:
			position, tokenIndex = position232, tokenIndex232
			return false
		},
		/* 35 RankVar <- <((('v' 'a' 'r' 'i' 'e' 't' 'y') / ('[' 'v' 'a' 'r' '.' ']') / ('v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position253, tokenIndex253 := position, tokenIndex
			{
				position254 := position
				{
					position255, tokenIndex255 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l256
					}
					position++
					if buffer[position] != rune('a') {
						goto l256
					}
					position++
					if buffer[position] != rune('r') {
						goto l256
					}
					position++
					if buffer[position] != rune('i') {
						goto l256
					}
					position++
					if buffer[position] != rune('e') {
						goto l256
					}
					position++
					if buffer[position] != rune('t') {
						goto l256
					}
					position++
					if buffer[position] != rune('y') {
						goto l256
					}
					position++
					goto l255
				l256:
					position, tokenIndex = position255, tokenIndex255
					if buffer[position] != rune('[') {
						goto l257
					}
					position++
					if buffer[position] != rune('v') {
						goto l257
					}
					position++
					if buffer[position] != rune('a') {
						goto l257
					}
					position++
					if buffer[position] != rune('r') {
						goto l257
					}
					position++
					if buffer[position] != rune('.') {
						goto l257
					}
					position++
					if buffer[position] != rune(']') {
						goto l257
					}
					position++
					goto l255
				l257:
					position, tokenIndex = position255, tokenIndex255
					if buffer[position] != rune('v') {
						goto l253
					}
					position++
					if buffer[position] != rune('a') {
						goto l253
					}
					position++
					if buffer[position] != rune('r') {
						goto l253
					}
					position++
				}
			l255:
				{
					position258, tokenIndex258 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l259
					}
					position++
					goto l258
				l259:
					position, tokenIndex = position258, tokenIndex258
					{
						position260, tokenIndex260 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l253
						}
						position, tokenIndex = position260, tokenIndex260
					}
				}
			l258:
				add(ruleRankVar, position254)
			}
			return true
		l253:
			position, tokenIndex = position253, tokenIndex253
			return false
		},
		/* 36 RankForma <- <((('f' 'o' 'r' 'm' 'a') / ('f' 'm' 'a') / ('f' 'm') / ('f' 'o' 'r' 'm') / ('f' 'o') / 'f') ('.' / &SpaceCharEOI))> */
		func() bool {
			position261, tokenIndex261 := position, tokenIndex
			{
				position262 := position
				{
					position263, tokenIndex263 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l264
					}
					position++
					if buffer[position] != rune('o') {
						goto l264
					}
					position++
					if buffer[position] != rune('r') {
						goto l264
					}
					position++
					if buffer[position] != rune('m') {
						goto l264
					}
					position++
					if buffer[position] != rune('a') {
						goto l264
					}
					position++
					goto l263
				l264:
					position, tokenIndex = position263, tokenIndex263
					if buffer[position] != rune('f') {
						goto l265
					}
					position++
					if buffer[position] != rune('m') {
						goto l265
					}
					position++
					if buffer[position] != rune('a') {
						goto l265
					}
					position++
					goto l263
				l265:
					position, tokenIndex = position263, tokenIndex263
					if buffer[position] != rune('f') {
						goto l266
					}
					position++
					if buffer[position] != rune('m') {
						goto l266
					}
					position++
					goto l263
				l266:
					position, tokenIndex = position263, tokenIndex263
					if buffer[position] != rune('f') {
						goto l267
					}
					position++
					if buffer[position] != rune('o') {
						goto l267
					}
					position++
					if buffer[position] != rune('r') {
						goto l267
					}
					position++
					if buffer[position] != rune('m') {
						goto l267
					}
					position++
					goto l263
				l267:
					position, tokenIndex = position263, tokenIndex263
					if buffer[position] != rune('f') {
						goto l268
					}
					position++
					if buffer[position] != rune('o') {
						goto l268
					}
					position++
					goto l263
				l268:
					position, tokenIndex = position263, tokenIndex263
					if buffer[position] != rune('f') {
						goto l261
					}
					position++
				}
			l263:
				{
					position269, tokenIndex269 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l270
					}
					position++
					goto l269
				l270:
					position, tokenIndex = position269, tokenIndex269
					{
						position271, tokenIndex271 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l261
						}
						position, tokenIndex = position271, tokenIndex271
					}
				}
			l269:
				add(ruleRankForma, position262)
			}
			return true
		l261:
			position, tokenIndex = position261, tokenIndex261
			return false
		},
		/* 37 RankSsp <- <((('s' 's' 'p') / ('s' 'u' 'b' 's' 'p' 'e' 'c') / ('s' 'u' 'b' 's' 'p')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position272, tokenIndex272 := position, tokenIndex
			{
				position273 := position
				{
					position274, tokenIndex274 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l275
					}
					position++
					if buffer[position] != rune('s') {
						goto l275
					}
					position++
					if buffer[position] != rune('p') {
						goto l275
					}
					position++
					goto l274
				l275:
					position, tokenIndex = position274, tokenIndex274
					if buffer[position] != rune('s') {
						goto l276
					}
					position++
					if buffer[position] != rune('u') {
						goto l276
					}
					position++
					if buffer[position] != rune('b') {
						goto l276
					}
					position++
					if buffer[position] != rune('s') {
						goto l276
					}
					position++
					if buffer[position] != rune('p') {
						goto l276
					}
					position++
					if buffer[position] != rune('e') {
						goto l276
					}
					position++
					if buffer[position] != rune('c') {
						goto l276
					}
					position++
					goto l274
				l276:
					position, tokenIndex = position274, tokenIndex274
					if buffer[position] != rune('s') {
						goto l272
					}
					position++
					if buffer[position] != rune('u') {
						goto l272
					}
					position++
					if buffer[position] != rune('b') {
						goto l272
					}
					position++
					if buffer[position] != rune('s') {
						goto l272
					}
					position++
					if buffer[position] != rune('p') {
						goto l272
					}
					position++
				}
			l274:
				{
					position277, tokenIndex277 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l278
					}
					position++
					goto l277
				l278:
					position, tokenIndex = position277, tokenIndex277
					{
						position279, tokenIndex279 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l272
						}
						position, tokenIndex = position279, tokenIndex279
					}
				}
			l277:
				add(ruleRankSsp, position273)
			}
			return true
		l272:
			position, tokenIndex = position272, tokenIndex272
			return false
		},
		/* 38 RankAgamo <- <((('a' 'g' 'a' 'm' 'o' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 's' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position280, tokenIndex280 := position, tokenIndex
			{
				position281 := position
				{
					position282, tokenIndex282 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l283
					}
					position++
					if buffer[position] != rune('g') {
						goto l283
					}
					position++
					if buffer[position] != rune('a') {
						goto l283
					}
					position++
					if buffer[position] != rune('m') {
						goto l283
					}
					position++
					if buffer[position] != rune('o') {
						goto l283
					}
					position++
					if buffer[position] != rune('s') {
						goto l283
					}
					position++
					if buffer[position] != rune('p') {
						goto l283
					}
					position++
					goto l282
				l283:
					position, tokenIndex = position282, tokenIndex282
					if buffer[position] != rune('a') {
						goto l284
					}
					position++
					if buffer[position] != rune('g') {
						goto l284
					}
					position++
					if buffer[position] != rune('a') {
						goto l284
					}
					position++
					if buffer[position] != rune('m') {
						goto l284
					}
					position++
					if buffer[position] != rune('o') {
						goto l284
					}
					position++
					if buffer[position] != rune('s') {
						goto l284
					}
					position++
					if buffer[position] != rune('s') {
						goto l284
					}
					position++
					if buffer[position] != rune('p') {
						goto l284
					}
					position++
					goto l282
				l284:
					position, tokenIndex = position282, tokenIndex282
					if buffer[position] != rune('a') {
						goto l280
					}
					position++
					if buffer[position] != rune('g') {
						goto l280
					}
					position++
					if buffer[position] != rune('a') {
						goto l280
					}
					position++
					if buffer[position] != rune('m') {
						goto l280
					}
					position++
					if buffer[position] != rune('o') {
						goto l280
					}
					position++
					if buffer[position] != rune('v') {
						goto l280
					}
					position++
					if buffer[position] != rune('a') {
						goto l280
					}
					position++
					if buffer[position] != rune('r') {
						goto l280
					}
					position++
				}
			l282:
				{
					position285, tokenIndex285 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l286
					}
					position++
					goto l285
				l286:
					position, tokenIndex = position285, tokenIndex285
					{
						position287, tokenIndex287 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l280
						}
						position, tokenIndex = position287, tokenIndex287
					}
				}
			l285:
				add(ruleRankAgamo, position281)
			}
			return true
		l280:
			position, tokenIndex = position280, tokenIndex280
			return false
		},
		/* 39 SubgenusOrSuperspecies <- <('(' _? NameLowerChar+ _? ')')> */
		func() bool {
			position288, tokenIndex288 := position, tokenIndex
			{
				position289 := position
				if buffer[position] != rune('(') {
					goto l288
				}
				position++
				{
					position290, tokenIndex290 := position, tokenIndex
					if !_rules[rule_]() {
						goto l290
					}
					goto l291
				l290:
					position, tokenIndex = position290, tokenIndex290
				}
			l291:
				if !_rules[ruleNameLowerChar]() {
					goto l288
				}
			l292:
				{
					position293, tokenIndex293 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l293
					}
					goto l292
				l293:
					position, tokenIndex = position293, tokenIndex293
				}
				{
					position294, tokenIndex294 := position, tokenIndex
					if !_rules[rule_]() {
						goto l294
					}
					goto l295
				l294:
					position, tokenIndex = position294, tokenIndex294
				}
			l295:
				if buffer[position] != rune(')') {
					goto l288
				}
				position++
				add(ruleSubgenusOrSuperspecies, position289)
			}
			return true
		l288:
			position, tokenIndex = position288, tokenIndex288
			return false
		},
		/* 40 Subgenus <- <(Subgenus2 / Subgenus1)> */
		func() bool {
			position296, tokenIndex296 := position, tokenIndex
			{
				position297 := position
				{
					position298, tokenIndex298 := position, tokenIndex
					if !_rules[ruleSubgenus2]() {
						goto l299
					}
					goto l298
				l299:
					position, tokenIndex = position298, tokenIndex298
					if !_rules[ruleSubgenus1]() {
						goto l296
					}
				}
			l298:
				add(ruleSubgenus, position297)
			}
			return true
		l296:
			position, tokenIndex = position296, tokenIndex296
			return false
		},
		/* 41 Subgenus2 <- <('(' _? AbbrSubgenus _? ')' !(_? NameUpperChar))> */
		func() bool {
			position300, tokenIndex300 := position, tokenIndex
			{
				position301 := position
				if buffer[position] != rune('(') {
					goto l300
				}
				position++
				{
					position302, tokenIndex302 := position, tokenIndex
					if !_rules[rule_]() {
						goto l302
					}
					goto l303
				l302:
					position, tokenIndex = position302, tokenIndex302
				}
			l303:
				if !_rules[ruleAbbrSubgenus]() {
					goto l300
				}
				{
					position304, tokenIndex304 := position, tokenIndex
					if !_rules[rule_]() {
						goto l304
					}
					goto l305
				l304:
					position, tokenIndex = position304, tokenIndex304
				}
			l305:
				if buffer[position] != rune(')') {
					goto l300
				}
				position++
				{
					position306, tokenIndex306 := position, tokenIndex
					{
						position307, tokenIndex307 := position, tokenIndex
						if !_rules[rule_]() {
							goto l307
						}
						goto l308
					l307:
						position, tokenIndex = position307, tokenIndex307
					}
				l308:
					if !_rules[ruleNameUpperChar]() {
						goto l306
					}
					goto l300
				l306:
					position, tokenIndex = position306, tokenIndex306
				}
				add(ruleSubgenus2, position301)
			}
			return true
		l300:
			position, tokenIndex = position300, tokenIndex300
			return false
		},
		/* 42 Subgenus1 <- <('(' _? UninomialWord _? ')')> */
		func() bool {
			position309, tokenIndex309 := position, tokenIndex
			{
				position310 := position
				if buffer[position] != rune('(') {
					goto l309
				}
				position++
				{
					position311, tokenIndex311 := position, tokenIndex
					if !_rules[rule_]() {
						goto l311
					}
					goto l312
				l311:
					position, tokenIndex = position311, tokenIndex311
				}
			l312:
				if !_rules[ruleUninomialWord]() {
					goto l309
				}
				{
					position313, tokenIndex313 := position, tokenIndex
					if !_rules[rule_]() {
						goto l313
					}
					goto l314
				l313:
					position, tokenIndex = position313, tokenIndex313
				}
			l314:
				if buffer[position] != rune(')') {
					goto l309
				}
				position++
				add(ruleSubgenus1, position310)
			}
			return true
		l309:
			position, tokenIndex = position309, tokenIndex309
			return false
		},
		/* 43 UninomialCombo <- <(UninomialCombo1 / UninomialCombo2)> */
		func() bool {
			position315, tokenIndex315 := position, tokenIndex
			{
				position316 := position
				{
					position317, tokenIndex317 := position, tokenIndex
					if !_rules[ruleUninomialCombo1]() {
						goto l318
					}
					goto l317
				l318:
					position, tokenIndex = position317, tokenIndex317
					if !_rules[ruleUninomialCombo2]() {
						goto l315
					}
				}
			l317:
				add(ruleUninomialCombo, position316)
			}
			return true
		l315:
			position, tokenIndex = position315, tokenIndex315
			return false
		},
		/* 44 UninomialCombo1 <- <(UninomialWord _? Subgenus (_? Authorship)?)> */
		func() bool {
			position319, tokenIndex319 := position, tokenIndex
			{
				position320 := position
				if !_rules[ruleUninomialWord]() {
					goto l319
				}
				{
					position321, tokenIndex321 := position, tokenIndex
					if !_rules[rule_]() {
						goto l321
					}
					goto l322
				l321:
					position, tokenIndex = position321, tokenIndex321
				}
			l322:
				if !_rules[ruleSubgenus]() {
					goto l319
				}
				{
					position323, tokenIndex323 := position, tokenIndex
					{
						position325, tokenIndex325 := position, tokenIndex
						if !_rules[rule_]() {
							goto l325
						}
						goto l326
					l325:
						position, tokenIndex = position325, tokenIndex325
					}
				l326:
					if !_rules[ruleAuthorship]() {
						goto l323
					}
					goto l324
				l323:
					position, tokenIndex = position323, tokenIndex323
				}
			l324:
				add(ruleUninomialCombo1, position320)
			}
			return true
		l319:
			position, tokenIndex = position319, tokenIndex319
			return false
		},
		/* 45 UninomialCombo2 <- <(Uninomial _ RankUninomial _ Uninomial)> */
		func() bool {
			position327, tokenIndex327 := position, tokenIndex
			{
				position328 := position
				if !_rules[ruleUninomial]() {
					goto l327
				}
				if !_rules[rule_]() {
					goto l327
				}
				if !_rules[ruleRankUninomial]() {
					goto l327
				}
				if !_rules[rule_]() {
					goto l327
				}
				if !_rules[ruleUninomial]() {
					goto l327
				}
				add(ruleUninomialCombo2, position328)
			}
			return true
		l327:
			position, tokenIndex = position327, tokenIndex327
			return false
		},
		/* 46 RankUninomial <- <(RankUninomialPlain / RankUninomialNotho)> */
		func() bool {
			position329, tokenIndex329 := position, tokenIndex
			{
				position330 := position
				{
					position331, tokenIndex331 := position, tokenIndex
					if !_rules[ruleRankUninomialPlain]() {
						goto l332
					}
					goto l331
				l332:
					position, tokenIndex = position331, tokenIndex331
					if !_rules[ruleRankUninomialNotho]() {
						goto l329
					}
				}
			l331:
				add(ruleRankUninomial, position330)
			}
			return true
		l329:
			position, tokenIndex = position329, tokenIndex329
			return false
		},
		/* 47 RankUninomialPlain <- <((('s' 'e' 'c' 't') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('t' 'r' 'i' 'b') / ('s' 'u' 'b' 't' 'r' 'i' 'b') / ('s' 'u' 'b' 's' 'e' 'r') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('f' 'a' 'm') / ('s' 'u' 'b' 'f' 'a' 'm') / ('d' 'i' 'v') / ('s' 'u' 'p' 'e' 'r' 't' 'r' 'i' 'b')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position333, tokenIndex333 := position, tokenIndex
			{
				position334 := position
				{
					position335, tokenIndex335 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l336
					}
					position++
					if buffer[position] != rune('e') {
						goto l336
					}
					position++
					if buffer[position] != rune('c') {
						goto l336
					}
					position++
					if buffer[position] != rune('t') {
						goto l336
					}
					position++
					goto l335
				l336:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l337
					}
					position++
					if buffer[position] != rune('u') {
						goto l337
					}
					position++
					if buffer[position] != rune('b') {
						goto l337
					}
					position++
					if buffer[position] != rune('s') {
						goto l337
					}
					position++
					if buffer[position] != rune('e') {
						goto l337
					}
					position++
					if buffer[position] != rune('c') {
						goto l337
					}
					position++
					if buffer[position] != rune('t') {
						goto l337
					}
					position++
					goto l335
				l337:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('t') {
						goto l338
					}
					position++
					if buffer[position] != rune('r') {
						goto l338
					}
					position++
					if buffer[position] != rune('i') {
						goto l338
					}
					position++
					if buffer[position] != rune('b') {
						goto l338
					}
					position++
					goto l335
				l338:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l339
					}
					position++
					if buffer[position] != rune('u') {
						goto l339
					}
					position++
					if buffer[position] != rune('b') {
						goto l339
					}
					position++
					if buffer[position] != rune('t') {
						goto l339
					}
					position++
					if buffer[position] != rune('r') {
						goto l339
					}
					position++
					if buffer[position] != rune('i') {
						goto l339
					}
					position++
					if buffer[position] != rune('b') {
						goto l339
					}
					position++
					goto l335
				l339:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l340
					}
					position++
					if buffer[position] != rune('u') {
						goto l340
					}
					position++
					if buffer[position] != rune('b') {
						goto l340
					}
					position++
					if buffer[position] != rune('s') {
						goto l340
					}
					position++
					if buffer[position] != rune('e') {
						goto l340
					}
					position++
					if buffer[position] != rune('r') {
						goto l340
					}
					position++
					goto l335
				l340:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l341
					}
					position++
					if buffer[position] != rune('e') {
						goto l341
					}
					position++
					if buffer[position] != rune('r') {
						goto l341
					}
					position++
					goto l335
				l341:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l342
					}
					position++
					if buffer[position] != rune('u') {
						goto l342
					}
					position++
					if buffer[position] != rune('b') {
						goto l342
					}
					position++
					if buffer[position] != rune('g') {
						goto l342
					}
					position++
					if buffer[position] != rune('e') {
						goto l342
					}
					position++
					if buffer[position] != rune('n') {
						goto l342
					}
					position++
					goto l335
				l342:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l343
					}
					position++
					if buffer[position] != rune('u') {
						goto l343
					}
					position++
					if buffer[position] != rune('b') {
						goto l343
					}
					position++
					if buffer[position] != rune('g') {
						goto l343
					}
					position++
					goto l335
				l343:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('f') {
						goto l344
					}
					position++
					if buffer[position] != rune('a') {
						goto l344
					}
					position++
					if buffer[position] != rune('m') {
						goto l344
					}
					position++
					goto l335
				l344:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l345
					}
					position++
					if buffer[position] != rune('u') {
						goto l345
					}
					position++
					if buffer[position] != rune('b') {
						goto l345
					}
					position++
					if buffer[position] != rune('f') {
						goto l345
					}
					position++
					if buffer[position] != rune('a') {
						goto l345
					}
					position++
					if buffer[position] != rune('m') {
						goto l345
					}
					position++
					goto l335
				l345:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('d') {
						goto l346
					}
					position++
					if buffer[position] != rune('i') {
						goto l346
					}
					position++
					if buffer[position] != rune('v') {
						goto l346
					}
					position++
					goto l335
				l346:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l333
					}
					position++
					if buffer[position] != rune('u') {
						goto l333
					}
					position++
					if buffer[position] != rune('p') {
						goto l333
					}
					position++
					if buffer[position] != rune('e') {
						goto l333
					}
					position++
					if buffer[position] != rune('r') {
						goto l333
					}
					position++
					if buffer[position] != rune('t') {
						goto l333
					}
					position++
					if buffer[position] != rune('r') {
						goto l333
					}
					position++
					if buffer[position] != rune('i') {
						goto l333
					}
					position++
					if buffer[position] != rune('b') {
						goto l333
					}
					position++
				}
			l335:
				{
					position347, tokenIndex347 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l348
					}
					position++
					goto l347
				l348:
					position, tokenIndex = position347, tokenIndex347
					{
						position349, tokenIndex349 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l333
						}
						position, tokenIndex = position349, tokenIndex349
					}
				}
			l347:
				add(ruleRankUninomialPlain, position334)
			}
			return true
		l333:
			position, tokenIndex = position333, tokenIndex333
			return false
		},
		/* 48 RankUninomialNotho <- <('n' 'o' 't' 'h' 'o' _? (('s' 'e' 'c' 't') / ('g' 'e' 'n') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'e' 'n') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('s' 'u' 'b' 't' 'r' 'i' 'b')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position350, tokenIndex350 := position, tokenIndex
			{
				position351 := position
				if buffer[position] != rune('n') {
					goto l350
				}
				position++
				if buffer[position] != rune('o') {
					goto l350
				}
				position++
				if buffer[position] != rune('t') {
					goto l350
				}
				position++
				if buffer[position] != rune('h') {
					goto l350
				}
				position++
				if buffer[position] != rune('o') {
					goto l350
				}
				position++
				{
					position352, tokenIndex352 := position, tokenIndex
					if !_rules[rule_]() {
						goto l352
					}
					goto l353
				l352:
					position, tokenIndex = position352, tokenIndex352
				}
			l353:
				{
					position354, tokenIndex354 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l355
					}
					position++
					if buffer[position] != rune('e') {
						goto l355
					}
					position++
					if buffer[position] != rune('c') {
						goto l355
					}
					position++
					if buffer[position] != rune('t') {
						goto l355
					}
					position++
					goto l354
				l355:
					position, tokenIndex = position354, tokenIndex354
					if buffer[position] != rune('g') {
						goto l356
					}
					position++
					if buffer[position] != rune('e') {
						goto l356
					}
					position++
					if buffer[position] != rune('n') {
						goto l356
					}
					position++
					goto l354
				l356:
					position, tokenIndex = position354, tokenIndex354
					if buffer[position] != rune('s') {
						goto l357
					}
					position++
					if buffer[position] != rune('e') {
						goto l357
					}
					position++
					if buffer[position] != rune('r') {
						goto l357
					}
					position++
					goto l354
				l357:
					position, tokenIndex = position354, tokenIndex354
					if buffer[position] != rune('s') {
						goto l358
					}
					position++
					if buffer[position] != rune('u') {
						goto l358
					}
					position++
					if buffer[position] != rune('b') {
						goto l358
					}
					position++
					if buffer[position] != rune('g') {
						goto l358
					}
					position++
					if buffer[position] != rune('e') {
						goto l358
					}
					position++
					if buffer[position] != rune('e') {
						goto l358
					}
					position++
					if buffer[position] != rune('n') {
						goto l358
					}
					position++
					goto l354
				l358:
					position, tokenIndex = position354, tokenIndex354
					if buffer[position] != rune('s') {
						goto l359
					}
					position++
					if buffer[position] != rune('u') {
						goto l359
					}
					position++
					if buffer[position] != rune('b') {
						goto l359
					}
					position++
					if buffer[position] != rune('g') {
						goto l359
					}
					position++
					if buffer[position] != rune('e') {
						goto l359
					}
					position++
					if buffer[position] != rune('n') {
						goto l359
					}
					position++
					goto l354
				l359:
					position, tokenIndex = position354, tokenIndex354
					if buffer[position] != rune('s') {
						goto l360
					}
					position++
					if buffer[position] != rune('u') {
						goto l360
					}
					position++
					if buffer[position] != rune('b') {
						goto l360
					}
					position++
					if buffer[position] != rune('g') {
						goto l360
					}
					position++
					goto l354
				l360:
					position, tokenIndex = position354, tokenIndex354
					if buffer[position] != rune('s') {
						goto l361
					}
					position++
					if buffer[position] != rune('u') {
						goto l361
					}
					position++
					if buffer[position] != rune('b') {
						goto l361
					}
					position++
					if buffer[position] != rune('s') {
						goto l361
					}
					position++
					if buffer[position] != rune('e') {
						goto l361
					}
					position++
					if buffer[position] != rune('c') {
						goto l361
					}
					position++
					if buffer[position] != rune('t') {
						goto l361
					}
					position++
					goto l354
				l361:
					position, tokenIndex = position354, tokenIndex354
					if buffer[position] != rune('s') {
						goto l350
					}
					position++
					if buffer[position] != rune('u') {
						goto l350
					}
					position++
					if buffer[position] != rune('b') {
						goto l350
					}
					position++
					if buffer[position] != rune('t') {
						goto l350
					}
					position++
					if buffer[position] != rune('r') {
						goto l350
					}
					position++
					if buffer[position] != rune('i') {
						goto l350
					}
					position++
					if buffer[position] != rune('b') {
						goto l350
					}
					position++
				}
			l354:
				{
					position362, tokenIndex362 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l363
					}
					position++
					goto l362
				l363:
					position, tokenIndex = position362, tokenIndex362
					{
						position364, tokenIndex364 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l350
						}
						position, tokenIndex = position364, tokenIndex364
					}
				}
			l362:
				add(ruleRankUninomialNotho, position351)
			}
			return true
		l350:
			position, tokenIndex = position350, tokenIndex350
			return false
		},
		/* 49 Uninomial <- <(UninomialWord (_ Authorship !(_ LowerCharExtended LowerCharExtended LowerCharExtended))?)> */
		func() bool {
			position365, tokenIndex365 := position, tokenIndex
			{
				position366 := position
				if !_rules[ruleUninomialWord]() {
					goto l365
				}
				{
					position367, tokenIndex367 := position, tokenIndex
					if !_rules[rule_]() {
						goto l367
					}
					if !_rules[ruleAuthorship]() {
						goto l367
					}
					{
						position369, tokenIndex369 := position, tokenIndex
						if !_rules[rule_]() {
							goto l369
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l369
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l369
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l369
						}
						goto l367
					l369:
						position, tokenIndex = position369, tokenIndex369
					}
					goto l368
				l367:
					position, tokenIndex = position367, tokenIndex367
				}
			l368:
				add(ruleUninomial, position366)
			}
			return true
		l365:
			position, tokenIndex = position365, tokenIndex365
			return false
		},
		/* 50 UninomialWord <- <(CapWord / TwoLetterGenus)> */
		func() bool {
			position370, tokenIndex370 := position, tokenIndex
			{
				position371 := position
				{
					position372, tokenIndex372 := position, tokenIndex
					if !_rules[ruleCapWord]() {
						goto l373
					}
					goto l372
				l373:
					position, tokenIndex = position372, tokenIndex372
					if !_rules[ruleTwoLetterGenus]() {
						goto l370
					}
				}
			l372:
				add(ruleUninomialWord, position371)
			}
			return true
		l370:
			position, tokenIndex = position370, tokenIndex370
			return false
		},
		/* 51 AbbrSubgenus <- <(UpperChar LowerChar* '.')> */
		func() bool {
			position374, tokenIndex374 := position, tokenIndex
			{
				position375 := position
				if !_rules[ruleUpperChar]() {
					goto l374
				}
			l376:
				{
					position377, tokenIndex377 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l377
					}
					goto l376
				l377:
					position, tokenIndex = position377, tokenIndex377
				}
				if buffer[position] != rune('.') {
					goto l374
				}
				position++
				add(ruleAbbrSubgenus, position375)
			}
			return true
		l374:
			position, tokenIndex = position374, tokenIndex374
			return false
		},
		/* 52 AbbrGenus <- <(UpperChar LowerChar? '.')> */
		func() bool {
			position378, tokenIndex378 := position, tokenIndex
			{
				position379 := position
				if !_rules[ruleUpperChar]() {
					goto l378
				}
				{
					position380, tokenIndex380 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l380
					}
					goto l381
				l380:
					position, tokenIndex = position380, tokenIndex380
				}
			l381:
				if buffer[position] != rune('.') {
					goto l378
				}
				position++
				add(ruleAbbrGenus, position379)
			}
			return true
		l378:
			position, tokenIndex = position378, tokenIndex378
			return false
		},
		/* 53 CapWord <- <(CapWordWithDash / CapWord1)> */
		func() bool {
			position382, tokenIndex382 := position, tokenIndex
			{
				position383 := position
				{
					position384, tokenIndex384 := position, tokenIndex
					if !_rules[ruleCapWordWithDash]() {
						goto l385
					}
					goto l384
				l385:
					position, tokenIndex = position384, tokenIndex384
					if !_rules[ruleCapWord1]() {
						goto l382
					}
				}
			l384:
				add(ruleCapWord, position383)
			}
			return true
		l382:
			position, tokenIndex = position382, tokenIndex382
			return false
		},
		/* 54 CapWord1 <- <(NameUpperChar NameLowerChar NameLowerChar+ '?'?)> */
		func() bool {
			position386, tokenIndex386 := position, tokenIndex
			{
				position387 := position
				if !_rules[ruleNameUpperChar]() {
					goto l386
				}
				if !_rules[ruleNameLowerChar]() {
					goto l386
				}
				if !_rules[ruleNameLowerChar]() {
					goto l386
				}
			l388:
				{
					position389, tokenIndex389 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l389
					}
					goto l388
				l389:
					position, tokenIndex = position389, tokenIndex389
				}
				{
					position390, tokenIndex390 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l390
					}
					position++
					goto l391
				l390:
					position, tokenIndex = position390, tokenIndex390
				}
			l391:
				add(ruleCapWord1, position387)
			}
			return true
		l386:
			position, tokenIndex = position386, tokenIndex386
			return false
		},
		/* 55 CapWordWithDash <- <((CapWord1 / TwoLetterGenusDashedSegment) Dash (UpperAfterDash / LowerAfterDash))> */
		func() bool {
			position392, tokenIndex392 := position, tokenIndex
			{
				position393 := position
				{
					position394, tokenIndex394 := position, tokenIndex
					if !_rules[ruleCapWord1]() {
						goto l395
					}
					goto l394
				l395:
					position, tokenIndex = position394, tokenIndex394
					if !_rules[ruleTwoLetterGenusDashedSegment]() {
						goto l392
					}
				}
			l394:
				if !_rules[ruleDash]() {
					goto l392
				}
				{
					position396, tokenIndex396 := position, tokenIndex
					if !_rules[ruleUpperAfterDash]() {
						goto l397
					}
					goto l396
				l397:
					position, tokenIndex = position396, tokenIndex396
					if !_rules[ruleLowerAfterDash]() {
						goto l392
					}
				}
			l396:
				add(ruleCapWordWithDash, position393)
			}
			return true
		l392:
			position, tokenIndex = position392, tokenIndex392
			return false
		},
		/* 56 TwoLetterGenusDashedSegment <- <(('D' 'e') / ('E' 'u') / ('L' 'e') / ('N' 'e'))> */
		func() bool {
			position398, tokenIndex398 := position, tokenIndex
			{
				position399 := position
				{
					position400, tokenIndex400 := position, tokenIndex
					if buffer[position] != rune('D') {
						goto l401
					}
					position++
					if buffer[position] != rune('e') {
						goto l401
					}
					position++
					goto l400
				l401:
					position, tokenIndex = position400, tokenIndex400
					if buffer[position] != rune('E') {
						goto l402
					}
					position++
					if buffer[position] != rune('u') {
						goto l402
					}
					position++
					goto l400
				l402:
					position, tokenIndex = position400, tokenIndex400
					if buffer[position] != rune('L') {
						goto l403
					}
					position++
					if buffer[position] != rune('e') {
						goto l403
					}
					position++
					goto l400
				l403:
					position, tokenIndex = position400, tokenIndex400
					if buffer[position] != rune('N') {
						goto l398
					}
					position++
					if buffer[position] != rune('e') {
						goto l398
					}
					position++
				}
			l400:
				add(ruleTwoLetterGenusDashedSegment, position399)
			}
			return true
		l398:
			position, tokenIndex = position398, tokenIndex398
			return false
		},
		/* 57 UpperAfterDash <- <CapWord1> */
		func() bool {
			position404, tokenIndex404 := position, tokenIndex
			{
				position405 := position
				if !_rules[ruleCapWord1]() {
					goto l404
				}
				add(ruleUpperAfterDash, position405)
			}
			return true
		l404:
			position, tokenIndex = position404, tokenIndex404
			return false
		},
		/* 58 LowerAfterDash <- <Word1> */
		func() bool {
			position406, tokenIndex406 := position, tokenIndex
			{
				position407 := position
				if !_rules[ruleWord1]() {
					goto l406
				}
				add(ruleLowerAfterDash, position407)
			}
			return true
		l406:
			position, tokenIndex = position406, tokenIndex406
			return false
		},
		/* 59 TwoLetterGenus <- <(('C' 'a') / ('D' 'o') / ('E' 'a') / ('G' 'e') / ('I' 'a') / ('I' 'o') / ('I' 'x') / ('L' 'o') / ('O' 'a') / ('O' 'o') / ('N' 'u') / ('R' 'a') / ('T' 'y') / ('U' 'a') / ('A' 'a') / ('J' 'a') / ('Z' 'u') / ('L' 'a') / ('Q' 'u') / ('A' 's') / ('B' 'a'))> */
		func() bool {
			position408, tokenIndex408 := position, tokenIndex
			{
				position409 := position
				{
					position410, tokenIndex410 := position, tokenIndex
					if buffer[position] != rune('C') {
						goto l411
					}
					position++
					if buffer[position] != rune('a') {
						goto l411
					}
					position++
					goto l410
				l411:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('D') {
						goto l412
					}
					position++
					if buffer[position] != rune('o') {
						goto l412
					}
					position++
					goto l410
				l412:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('E') {
						goto l413
					}
					position++
					if buffer[position] != rune('a') {
						goto l413
					}
					position++
					goto l410
				l413:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('G') {
						goto l414
					}
					position++
					if buffer[position] != rune('e') {
						goto l414
					}
					position++
					goto l410
				l414:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('I') {
						goto l415
					}
					position++
					if buffer[position] != rune('a') {
						goto l415
					}
					position++
					goto l410
				l415:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('I') {
						goto l416
					}
					position++
					if buffer[position] != rune('o') {
						goto l416
					}
					position++
					goto l410
				l416:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('I') {
						goto l417
					}
					position++
					if buffer[position] != rune('x') {
						goto l417
					}
					position++
					goto l410
				l417:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('L') {
						goto l418
					}
					position++
					if buffer[position] != rune('o') {
						goto l418
					}
					position++
					goto l410
				l418:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('O') {
						goto l419
					}
					position++
					if buffer[position] != rune('a') {
						goto l419
					}
					position++
					goto l410
				l419:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('O') {
						goto l420
					}
					position++
					if buffer[position] != rune('o') {
						goto l420
					}
					position++
					goto l410
				l420:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('N') {
						goto l421
					}
					position++
					if buffer[position] != rune('u') {
						goto l421
					}
					position++
					goto l410
				l421:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('R') {
						goto l422
					}
					position++
					if buffer[position] != rune('a') {
						goto l422
					}
					position++
					goto l410
				l422:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('T') {
						goto l423
					}
					position++
					if buffer[position] != rune('y') {
						goto l423
					}
					position++
					goto l410
				l423:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('U') {
						goto l424
					}
					position++
					if buffer[position] != rune('a') {
						goto l424
					}
					position++
					goto l410
				l424:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('A') {
						goto l425
					}
					position++
					if buffer[position] != rune('a') {
						goto l425
					}
					position++
					goto l410
				l425:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('J') {
						goto l426
					}
					position++
					if buffer[position] != rune('a') {
						goto l426
					}
					position++
					goto l410
				l426:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('Z') {
						goto l427
					}
					position++
					if buffer[position] != rune('u') {
						goto l427
					}
					position++
					goto l410
				l427:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('L') {
						goto l428
					}
					position++
					if buffer[position] != rune('a') {
						goto l428
					}
					position++
					goto l410
				l428:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('Q') {
						goto l429
					}
					position++
					if buffer[position] != rune('u') {
						goto l429
					}
					position++
					goto l410
				l429:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('A') {
						goto l430
					}
					position++
					if buffer[position] != rune('s') {
						goto l430
					}
					position++
					goto l410
				l430:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('B') {
						goto l408
					}
					position++
					if buffer[position] != rune('a') {
						goto l408
					}
					position++
				}
			l410:
				add(ruleTwoLetterGenus, position409)
			}
			return true
		l408:
			position, tokenIndex = position408, tokenIndex408
			return false
		},
		/* 60 Word <- <(!((('e' 'x') / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd') / ('p' 'r' 'o') / ('c' 'v') / ('c' 'u' 'l' 't' 'i' 'v' 'a' 'r') / AuthorPrefix / RankUninomial / Approximation / Word4) SpaceCharEOI) (WordApostr / WordStartsWithDigit / MultiDashedWord / Word2 / Word1) &(SpaceCharEOI / '('))> */
		func() bool {
			position431, tokenIndex431 := position, tokenIndex
			{
				position432 := position
				{
					position433, tokenIndex433 := position, tokenIndex
					{
						position434, tokenIndex434 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l435
						}
						position++
						if buffer[position] != rune('x') {
							goto l435
						}
						position++
						goto l434
					l435:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('e') {
							goto l436
						}
						position++
						if buffer[position] != rune('t') {
							goto l436
						}
						position++
						goto l434
					l436:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('a') {
							goto l437
						}
						position++
						if buffer[position] != rune('n') {
							goto l437
						}
						position++
						if buffer[position] != rune('d') {
							goto l437
						}
						position++
						goto l434
					l437:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('a') {
							goto l438
						}
						position++
						if buffer[position] != rune('p') {
							goto l438
						}
						position++
						if buffer[position] != rune('u') {
							goto l438
						}
						position++
						if buffer[position] != rune('d') {
							goto l438
						}
						position++
						goto l434
					l438:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('p') {
							goto l439
						}
						position++
						if buffer[position] != rune('r') {
							goto l439
						}
						position++
						if buffer[position] != rune('o') {
							goto l439
						}
						position++
						goto l434
					l439:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('c') {
							goto l440
						}
						position++
						if buffer[position] != rune('v') {
							goto l440
						}
						position++
						goto l434
					l440:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('c') {
							goto l441
						}
						position++
						if buffer[position] != rune('u') {
							goto l441
						}
						position++
						if buffer[position] != rune('l') {
							goto l441
						}
						position++
						if buffer[position] != rune('t') {
							goto l441
						}
						position++
						if buffer[position] != rune('i') {
							goto l441
						}
						position++
						if buffer[position] != rune('v') {
							goto l441
						}
						position++
						if buffer[position] != rune('a') {
							goto l441
						}
						position++
						if buffer[position] != rune('r') {
							goto l441
						}
						position++
						goto l434
					l441:
						position, tokenIndex = position434, tokenIndex434
						if !_rules[ruleAuthorPrefix]() {
							goto l442
						}
						goto l434
					l442:
						position, tokenIndex = position434, tokenIndex434
						if !_rules[ruleRankUninomial]() {
							goto l443
						}
						goto l434
					l443:
						position, tokenIndex = position434, tokenIndex434
						if !_rules[ruleApproximation]() {
							goto l444
						}
						goto l434
					l444:
						position, tokenIndex = position434, tokenIndex434
						if !_rules[ruleWord4]() {
							goto l433
						}
					}
				l434:
					if !_rules[ruleSpaceCharEOI]() {
						goto l433
					}
					goto l431
				l433:
					position, tokenIndex = position433, tokenIndex433
				}
				{
					position445, tokenIndex445 := position, tokenIndex
					if !_rules[ruleWordApostr]() {
						goto l446
					}
					goto l445
				l446:
					position, tokenIndex = position445, tokenIndex445
					if !_rules[ruleWordStartsWithDigit]() {
						goto l447
					}
					goto l445
				l447:
					position, tokenIndex = position445, tokenIndex445
					if !_rules[ruleMultiDashedWord]() {
						goto l448
					}
					goto l445
				l448:
					position, tokenIndex = position445, tokenIndex445
					if !_rules[ruleWord2]() {
						goto l449
					}
					goto l445
				l449:
					position, tokenIndex = position445, tokenIndex445
					if !_rules[ruleWord1]() {
						goto l431
					}
				}
			l445:
				{
					position450, tokenIndex450 := position, tokenIndex
					{
						position451, tokenIndex451 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l452
						}
						goto l451
					l452:
						position, tokenIndex = position451, tokenIndex451
						if buffer[position] != rune('(') {
							goto l431
						}
						position++
					}
				l451:
					position, tokenIndex = position450, tokenIndex450
				}
				add(ruleWord, position432)
			}
			return true
		l431:
			position, tokenIndex = position431, tokenIndex431
			return false
		},
		/* 61 Word1 <- <(((DotPrefix / LowerASCII) Dash)? NameLowerChar NameLowerChar+)> */
		func() bool {
			position453, tokenIndex453 := position, tokenIndex
			{
				position454 := position
				{
					position455, tokenIndex455 := position, tokenIndex
					{
						position457, tokenIndex457 := position, tokenIndex
						if !_rules[ruleDotPrefix]() {
							goto l458
						}
						goto l457
					l458:
						position, tokenIndex = position457, tokenIndex457
						if !_rules[ruleLowerASCII]() {
							goto l455
						}
					}
				l457:
					if !_rules[ruleDash]() {
						goto l455
					}
					goto l456
				l455:
					position, tokenIndex = position455, tokenIndex455
				}
			l456:
				if !_rules[ruleNameLowerChar]() {
					goto l453
				}
				if !_rules[ruleNameLowerChar]() {
					goto l453
				}
			l459:
				{
					position460, tokenIndex460 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l460
					}
					goto l459
				l460:
					position, tokenIndex = position460, tokenIndex460
				}
				add(ruleWord1, position454)
			}
			return true
		l453:
			position, tokenIndex = position453, tokenIndex453
			return false
		},
		/* 62 WordStartsWithDigit <- <(('1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9') Nums? ('.' / Dash)? NameLowerChar NameLowerChar NameLowerChar NameLowerChar+)> */
		func() bool {
			position461, tokenIndex461 := position, tokenIndex
			{
				position462 := position
				{
					position463, tokenIndex463 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l464
					}
					position++
					goto l463
				l464:
					position, tokenIndex = position463, tokenIndex463
					if buffer[position] != rune('2') {
						goto l465
					}
					position++
					goto l463
				l465:
					position, tokenIndex = position463, tokenIndex463
					if buffer[position] != rune('3') {
						goto l466
					}
					position++
					goto l463
				l466:
					position, tokenIndex = position463, tokenIndex463
					if buffer[position] != rune('4') {
						goto l467
					}
					position++
					goto l463
				l467:
					position, tokenIndex = position463, tokenIndex463
					if buffer[position] != rune('5') {
						goto l468
					}
					position++
					goto l463
				l468:
					position, tokenIndex = position463, tokenIndex463
					if buffer[position] != rune('6') {
						goto l469
					}
					position++
					goto l463
				l469:
					position, tokenIndex = position463, tokenIndex463
					if buffer[position] != rune('7') {
						goto l470
					}
					position++
					goto l463
				l470:
					position, tokenIndex = position463, tokenIndex463
					if buffer[position] != rune('8') {
						goto l471
					}
					position++
					goto l463
				l471:
					position, tokenIndex = position463, tokenIndex463
					if buffer[position] != rune('9') {
						goto l461
					}
					position++
				}
			l463:
				{
					position472, tokenIndex472 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l472
					}
					goto l473
				l472:
					position, tokenIndex = position472, tokenIndex472
				}
			l473:
				{
					position474, tokenIndex474 := position, tokenIndex
					{
						position476, tokenIndex476 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l477
						}
						position++
						goto l476
					l477:
						position, tokenIndex = position476, tokenIndex476
						if !_rules[ruleDash]() {
							goto l474
						}
					}
				l476:
					goto l475
				l474:
					position, tokenIndex = position474, tokenIndex474
				}
			l475:
				if !_rules[ruleNameLowerChar]() {
					goto l461
				}
				if !_rules[ruleNameLowerChar]() {
					goto l461
				}
				if !_rules[ruleNameLowerChar]() {
					goto l461
				}
				if !_rules[ruleNameLowerChar]() {
					goto l461
				}
			l478:
				{
					position479, tokenIndex479 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l479
					}
					goto l478
				l479:
					position, tokenIndex = position479, tokenIndex479
				}
				add(ruleWordStartsWithDigit, position462)
			}
			return true
		l461:
			position, tokenIndex = position461, tokenIndex461
			return false
		},
		/* 63 Word2 <- <(NameLowerChar+ Dash? (WordApostr / NameLowerChar+))> */
		func() bool {
			position480, tokenIndex480 := position, tokenIndex
			{
				position481 := position
				if !_rules[ruleNameLowerChar]() {
					goto l480
				}
			l482:
				{
					position483, tokenIndex483 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l483
					}
					goto l482
				l483:
					position, tokenIndex = position483, tokenIndex483
				}
				{
					position484, tokenIndex484 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l484
					}
					goto l485
				l484:
					position, tokenIndex = position484, tokenIndex484
				}
			l485:
				{
					position486, tokenIndex486 := position, tokenIndex
					if !_rules[ruleWordApostr]() {
						goto l487
					}
					goto l486
				l487:
					position, tokenIndex = position486, tokenIndex486
					if !_rules[ruleNameLowerChar]() {
						goto l480
					}
				l488:
					{
						position489, tokenIndex489 := position, tokenIndex
						if !_rules[ruleNameLowerChar]() {
							goto l489
						}
						goto l488
					l489:
						position, tokenIndex = position489, tokenIndex489
					}
				}
			l486:
				add(ruleWord2, position481)
			}
			return true
		l480:
			position, tokenIndex = position480, tokenIndex480
			return false
		},
		/* 64 WordApostr <- <(NameLowerChar NameLowerChar* Apostrophe Word1)> */
		func() bool {
			position490, tokenIndex490 := position, tokenIndex
			{
				position491 := position
				if !_rules[ruleNameLowerChar]() {
					goto l490
				}
			l492:
				{
					position493, tokenIndex493 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l493
					}
					goto l492
				l493:
					position, tokenIndex = position493, tokenIndex493
				}
				if !_rules[ruleApostrophe]() {
					goto l490
				}
				if !_rules[ruleWord1]() {
					goto l490
				}
				add(ruleWordApostr, position491)
			}
			return true
		l490:
			position, tokenIndex = position490, tokenIndex490
			return false
		},
		/* 65 Word4 <- <(NameLowerChar+ '.' NameLowerChar)> */
		func() bool {
			position494, tokenIndex494 := position, tokenIndex
			{
				position495 := position
				if !_rules[ruleNameLowerChar]() {
					goto l494
				}
			l496:
				{
					position497, tokenIndex497 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l497
					}
					goto l496
				l497:
					position, tokenIndex = position497, tokenIndex497
				}
				if buffer[position] != rune('.') {
					goto l494
				}
				position++
				if !_rules[ruleNameLowerChar]() {
					goto l494
				}
				add(ruleWord4, position495)
			}
			return true
		l494:
			position, tokenIndex = position494, tokenIndex494
			return false
		},
		/* 66 DotPrefix <- <('s' 't' '.')> */
		func() bool {
			position498, tokenIndex498 := position, tokenIndex
			{
				position499 := position
				if buffer[position] != rune('s') {
					goto l498
				}
				position++
				if buffer[position] != rune('t') {
					goto l498
				}
				position++
				if buffer[position] != rune('.') {
					goto l498
				}
				position++
				add(ruleDotPrefix, position499)
			}
			return true
		l498:
			position, tokenIndex = position498, tokenIndex498
			return false
		},
		/* 67 MultiDashedWord <- <(NameLowerChar+ Dash NameLowerChar+ Dash NameLowerChar+ (Dash NameLowerChar+)?)> */
		func() bool {
			position500, tokenIndex500 := position, tokenIndex
			{
				position501 := position
				if !_rules[ruleNameLowerChar]() {
					goto l500
				}
			l502:
				{
					position503, tokenIndex503 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l503
					}
					goto l502
				l503:
					position, tokenIndex = position503, tokenIndex503
				}
				if !_rules[ruleDash]() {
					goto l500
				}
				if !_rules[ruleNameLowerChar]() {
					goto l500
				}
			l504:
				{
					position505, tokenIndex505 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l505
					}
					goto l504
				l505:
					position, tokenIndex = position505, tokenIndex505
				}
				if !_rules[ruleDash]() {
					goto l500
				}
				if !_rules[ruleNameLowerChar]() {
					goto l500
				}
			l506:
				{
					position507, tokenIndex507 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l507
					}
					goto l506
				l507:
					position, tokenIndex = position507, tokenIndex507
				}
				{
					position508, tokenIndex508 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l508
					}
					if !_rules[ruleNameLowerChar]() {
						goto l508
					}
				l510:
					{
						position511, tokenIndex511 := position, tokenIndex
						if !_rules[ruleNameLowerChar]() {
							goto l511
						}
						goto l510
					l511:
						position, tokenIndex = position511, tokenIndex511
					}
					goto l509
				l508:
					position, tokenIndex = position508, tokenIndex508
				}
			l509:
				add(ruleMultiDashedWord, position501)
			}
			return true
		l500:
			position, tokenIndex = position500, tokenIndex500
			return false
		},
		/* 68 HybridChar <- <('×' / (('x' / 'X') &_) / (('x' / 'X') &UninomialWord) / (('x' / 'X') &END))> */
		func() bool {
			position512, tokenIndex512 := position, tokenIndex
			{
				position513 := position
				{
					position514, tokenIndex514 := position, tokenIndex
					if buffer[position] != rune('×') {
						goto l515
					}
					position++
					goto l514
				l515:
					position, tokenIndex = position514, tokenIndex514
					{
						position517, tokenIndex517 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l518
						}
						position++
						goto l517
					l518:
						position, tokenIndex = position517, tokenIndex517
						if buffer[position] != rune('X') {
							goto l516
						}
						position++
					}
				l517:
					{
						position519, tokenIndex519 := position, tokenIndex
						if !_rules[rule_]() {
							goto l516
						}
						position, tokenIndex = position519, tokenIndex519
					}
					goto l514
				l516:
					position, tokenIndex = position514, tokenIndex514
					{
						position521, tokenIndex521 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l522
						}
						position++
						goto l521
					l522:
						position, tokenIndex = position521, tokenIndex521
						if buffer[position] != rune('X') {
							goto l520
						}
						position++
					}
				l521:
					{
						position523, tokenIndex523 := position, tokenIndex
						if !_rules[ruleUninomialWord]() {
							goto l520
						}
						position, tokenIndex = position523, tokenIndex523
					}
					goto l514
				l520:
					position, tokenIndex = position514, tokenIndex514
					{
						position524, tokenIndex524 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l525
						}
						position++
						goto l524
					l525:
						position, tokenIndex = position524, tokenIndex524
						if buffer[position] != rune('X') {
							goto l512
						}
						position++
					}
				l524:
					{
						position526, tokenIndex526 := position, tokenIndex
						if !_rules[ruleEND]() {
							goto l512
						}
						position, tokenIndex = position526, tokenIndex526
					}
				}
			l514:
				add(ruleHybridChar, position513)
			}
			return true
		l512:
			position, tokenIndex = position512, tokenIndex512
			return false
		},
		/* 69 GraftChimeraChar <- <'+'> */
		func() bool {
			position527, tokenIndex527 := position, tokenIndex
			{
				position528 := position
				if buffer[position] != rune('+') {
					goto l527
				}
				position++
				add(ruleGraftChimeraChar, position528)
			}
			return true
		l527:
			position, tokenIndex = position527, tokenIndex527
			return false
		},
		/* 70 ApproxNameIgnored <- <.*> */
		func() bool {
			{
				position530 := position
			l531:
				{
					position532, tokenIndex532 := position, tokenIndex
					if !matchDot() {
						goto l532
					}
					goto l531
				l532:
					position, tokenIndex = position532, tokenIndex532
				}
				add(ruleApproxNameIgnored, position530)
			}
			return true
		},
		/* 71 Approximation <- <(('s' 'p' '.' _? ('n' 'r' '.')) / ('s' 'p' '.' _? ('a' 'f' 'f' '.')) / ('m' 'o' 'n' 's' 't' '.') / '?' / ((('s' 'p' 'p') / ('n' 'r') / ('s' 'p') / ('a' 'f' 'f') / ('s' 'p' 'e' 'c' 'i' 'e' 's')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position533, tokenIndex533 := position, tokenIndex
			{
				position534 := position
				{
					position535, tokenIndex535 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l536
					}
					position++
					if buffer[position] != rune('p') {
						goto l536
					}
					position++
					if buffer[position] != rune('.') {
						goto l536
					}
					position++
					{
						position537, tokenIndex537 := position, tokenIndex
						if !_rules[rule_]() {
							goto l537
						}
						goto l538
					l537:
						position, tokenIndex = position537, tokenIndex537
					}
				l538:
					if buffer[position] != rune('n') {
						goto l536
					}
					position++
					if buffer[position] != rune('r') {
						goto l536
					}
					position++
					if buffer[position] != rune('.') {
						goto l536
					}
					position++
					goto l535
				l536:
					position, tokenIndex = position535, tokenIndex535
					if buffer[position] != rune('s') {
						goto l539
					}
					position++
					if buffer[position] != rune('p') {
						goto l539
					}
					position++
					if buffer[position] != rune('.') {
						goto l539
					}
					position++
					{
						position540, tokenIndex540 := position, tokenIndex
						if !_rules[rule_]() {
							goto l540
						}
						goto l541
					l540:
						position, tokenIndex = position540, tokenIndex540
					}
				l541:
					if buffer[position] != rune('a') {
						goto l539
					}
					position++
					if buffer[position] != rune('f') {
						goto l539
					}
					position++
					if buffer[position] != rune('f') {
						goto l539
					}
					position++
					if buffer[position] != rune('.') {
						goto l539
					}
					position++
					goto l535
				l539:
					position, tokenIndex = position535, tokenIndex535
					if buffer[position] != rune('m') {
						goto l542
					}
					position++
					if buffer[position] != rune('o') {
						goto l542
					}
					position++
					if buffer[position] != rune('n') {
						goto l542
					}
					position++
					if buffer[position] != rune('s') {
						goto l542
					}
					position++
					if buffer[position] != rune('t') {
						goto l542
					}
					position++
					if buffer[position] != rune('.') {
						goto l542
					}
					position++
					goto l535
				l542:
					position, tokenIndex = position535, tokenIndex535
					if buffer[position] != rune('?') {
						goto l543
					}
					position++
					goto l535
				l543:
					position, tokenIndex = position535, tokenIndex535
					{
						position544, tokenIndex544 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l545
						}
						position++
						if buffer[position] != rune('p') {
							goto l545
						}
						position++
						if buffer[position] != rune('p') {
							goto l545
						}
						position++
						goto l544
					l545:
						position, tokenIndex = position544, tokenIndex544
						if buffer[position] != rune('n') {
							goto l546
						}
						position++
						if buffer[position] != rune('r') {
							goto l546
						}
						position++
						goto l544
					l546:
						position, tokenIndex = position544, tokenIndex544
						if buffer[position] != rune('s') {
							goto l547
						}
						position++
						if buffer[position] != rune('p') {
							goto l547
						}
						position++
						goto l544
					l547:
						position, tokenIndex = position544, tokenIndex544
						if buffer[position] != rune('a') {
							goto l548
						}
						position++
						if buffer[position] != rune('f') {
							goto l548
						}
						position++
						if buffer[position] != rune('f') {
							goto l548
						}
						position++
						goto l544
					l548:
						position, tokenIndex = position544, tokenIndex544
						if buffer[position] != rune('s') {
							goto l533
						}
						position++
						if buffer[position] != rune('p') {
							goto l533
						}
						position++
						if buffer[position] != rune('e') {
							goto l533
						}
						position++
						if buffer[position] != rune('c') {
							goto l533
						}
						position++
						if buffer[position] != rune('i') {
							goto l533
						}
						position++
						if buffer[position] != rune('e') {
							goto l533
						}
						position++
						if buffer[position] != rune('s') {
							goto l533
						}
						position++
					}
				l544:
					{
						position549, tokenIndex549 := position, tokenIndex
						{
							position551, tokenIndex551 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l550
							}
							position, tokenIndex = position551, tokenIndex551
						}
						goto l549
					l550:
						position, tokenIndex = position549, tokenIndex549
						if buffer[position] != rune('.') {
							goto l533
						}
						position++
					}
				l549:
				}
			l535:
				add(ruleApproximation, position534)
			}
			return true
		l533:
			position, tokenIndex = position533, tokenIndex533
			return false
		},
		/* 72 Authorship <- <((AuthorshipCombo / OriginalAuthorship) &(SpaceCharEOI / ';' / ','))> */
		func() bool {
			position552, tokenIndex552 := position, tokenIndex
			{
				position553 := position
				{
					position554, tokenIndex554 := position, tokenIndex
					if !_rules[ruleAuthorshipCombo]() {
						goto l555
					}
					goto l554
				l555:
					position, tokenIndex = position554, tokenIndex554
					if !_rules[ruleOriginalAuthorship]() {
						goto l552
					}
				}
			l554:
				{
					position556, tokenIndex556 := position, tokenIndex
					{
						position557, tokenIndex557 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l558
						}
						goto l557
					l558:
						position, tokenIndex = position557, tokenIndex557
						if buffer[position] != rune(';') {
							goto l559
						}
						position++
						goto l557
					l559:
						position, tokenIndex = position557, tokenIndex557
						if buffer[position] != rune(',') {
							goto l552
						}
						position++
					}
				l557:
					position, tokenIndex = position556, tokenIndex556
				}
				add(ruleAuthorship, position553)
			}
			return true
		l552:
			position, tokenIndex = position552, tokenIndex552
			return false
		},
		/* 73 AuthorshipCombo <- <(OriginalAuthorshipComb (_? CombinationAuthorship)?)> */
		func() bool {
			position560, tokenIndex560 := position, tokenIndex
			{
				position561 := position
				if !_rules[ruleOriginalAuthorshipComb]() {
					goto l560
				}
				{
					position562, tokenIndex562 := position, tokenIndex
					{
						position564, tokenIndex564 := position, tokenIndex
						if !_rules[rule_]() {
							goto l564
						}
						goto l565
					l564:
						position, tokenIndex = position564, tokenIndex564
					}
				l565:
					if !_rules[ruleCombinationAuthorship]() {
						goto l562
					}
					goto l563
				l562:
					position, tokenIndex = position562, tokenIndex562
				}
			l563:
				add(ruleAuthorshipCombo, position561)
			}
			return true
		l560:
			position, tokenIndex = position560, tokenIndex560
			return false
		},
		/* 74 OriginalAuthorship <- <AuthorsGroup> */
		func() bool {
			position566, tokenIndex566 := position, tokenIndex
			{
				position567 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l566
				}
				add(ruleOriginalAuthorship, position567)
			}
			return true
		l566:
			position, tokenIndex = position566, tokenIndex566
			return false
		},
		/* 75 OriginalAuthorshipComb <- <(BasionymAuthorshipYearMisformed / BasionymAuthorship / BasionymAuthorshipMissingParens)> */
		func() bool {
			position568, tokenIndex568 := position, tokenIndex
			{
				position569 := position
				{
					position570, tokenIndex570 := position, tokenIndex
					if !_rules[ruleBasionymAuthorshipYearMisformed]() {
						goto l571
					}
					goto l570
				l571:
					position, tokenIndex = position570, tokenIndex570
					if !_rules[ruleBasionymAuthorship]() {
						goto l572
					}
					goto l570
				l572:
					position, tokenIndex = position570, tokenIndex570
					if !_rules[ruleBasionymAuthorshipMissingParens]() {
						goto l568
					}
				}
			l570:
				add(ruleOriginalAuthorshipComb, position569)
			}
			return true
		l568:
			position, tokenIndex = position568, tokenIndex568
			return false
		},
		/* 76 CombinationAuthorship <- <AuthorsGroup> */
		func() bool {
			position573, tokenIndex573 := position, tokenIndex
			{
				position574 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l573
				}
				add(ruleCombinationAuthorship, position574)
			}
			return true
		l573:
			position, tokenIndex = position573, tokenIndex573
			return false
		},
		/* 77 BasionymAuthorshipMissingParens <- <(MissingParensStart / MissingParensEnd)> */
		func() bool {
			position575, tokenIndex575 := position, tokenIndex
			{
				position576 := position
				{
					position577, tokenIndex577 := position, tokenIndex
					if !_rules[ruleMissingParensStart]() {
						goto l578
					}
					goto l577
				l578:
					position, tokenIndex = position577, tokenIndex577
					if !_rules[ruleMissingParensEnd]() {
						goto l575
					}
				}
			l577:
				add(ruleBasionymAuthorshipMissingParens, position576)
			}
			return true
		l575:
			position, tokenIndex = position575, tokenIndex575
			return false
		},
		/* 78 MissingParensStart <- <('(' _? AuthorsGroup)> */
		func() bool {
			position579, tokenIndex579 := position, tokenIndex
			{
				position580 := position
				if buffer[position] != rune('(') {
					goto l579
				}
				position++
				{
					position581, tokenIndex581 := position, tokenIndex
					if !_rules[rule_]() {
						goto l581
					}
					goto l582
				l581:
					position, tokenIndex = position581, tokenIndex581
				}
			l582:
				if !_rules[ruleAuthorsGroup]() {
					goto l579
				}
				add(ruleMissingParensStart, position580)
			}
			return true
		l579:
			position, tokenIndex = position579, tokenIndex579
			return false
		},
		/* 79 MissingParensEnd <- <(AuthorsGroup _? ')')> */
		func() bool {
			position583, tokenIndex583 := position, tokenIndex
			{
				position584 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l583
				}
				{
					position585, tokenIndex585 := position, tokenIndex
					if !_rules[rule_]() {
						goto l585
					}
					goto l586
				l585:
					position, tokenIndex = position585, tokenIndex585
				}
			l586:
				if buffer[position] != rune(')') {
					goto l583
				}
				position++
				add(ruleMissingParensEnd, position584)
			}
			return true
		l583:
			position, tokenIndex = position583, tokenIndex583
			return false
		},
		/* 80 BasionymAuthorshipYearMisformed <- <('(' _? AuthorsGroup _? ')' (_? ',')? _? Year)> */
		func() bool {
			position587, tokenIndex587 := position, tokenIndex
			{
				position588 := position
				if buffer[position] != rune('(') {
					goto l587
				}
				position++
				{
					position589, tokenIndex589 := position, tokenIndex
					if !_rules[rule_]() {
						goto l589
					}
					goto l590
				l589:
					position, tokenIndex = position589, tokenIndex589
				}
			l590:
				if !_rules[ruleAuthorsGroup]() {
					goto l587
				}
				{
					position591, tokenIndex591 := position, tokenIndex
					if !_rules[rule_]() {
						goto l591
					}
					goto l592
				l591:
					position, tokenIndex = position591, tokenIndex591
				}
			l592:
				if buffer[position] != rune(')') {
					goto l587
				}
				position++
				{
					position593, tokenIndex593 := position, tokenIndex
					{
						position595, tokenIndex595 := position, tokenIndex
						if !_rules[rule_]() {
							goto l595
						}
						goto l596
					l595:
						position, tokenIndex = position595, tokenIndex595
					}
				l596:
					if buffer[position] != rune(',') {
						goto l593
					}
					position++
					goto l594
				l593:
					position, tokenIndex = position593, tokenIndex593
				}
			l594:
				{
					position597, tokenIndex597 := position, tokenIndex
					if !_rules[rule_]() {
						goto l597
					}
					goto l598
				l597:
					position, tokenIndex = position597, tokenIndex597
				}
			l598:
				if !_rules[ruleYear]() {
					goto l587
				}
				add(ruleBasionymAuthorshipYearMisformed, position588)
			}
			return true
		l587:
			position, tokenIndex = position587, tokenIndex587
			return false
		},
		/* 81 BasionymAuthorship <- <(BasionymAuthorship1 / BasionymAuthorship2Parens)> */
		func() bool {
			position599, tokenIndex599 := position, tokenIndex
			{
				position600 := position
				{
					position601, tokenIndex601 := position, tokenIndex
					if !_rules[ruleBasionymAuthorship1]() {
						goto l602
					}
					goto l601
				l602:
					position, tokenIndex = position601, tokenIndex601
					if !_rules[ruleBasionymAuthorship2Parens]() {
						goto l599
					}
				}
			l601:
				add(ruleBasionymAuthorship, position600)
			}
			return true
		l599:
			position, tokenIndex = position599, tokenIndex599
			return false
		},
		/* 82 BasionymAuthorship1 <- <('(' _? AuthorsGroup _? ')')> */
		func() bool {
			position603, tokenIndex603 := position, tokenIndex
			{
				position604 := position
				if buffer[position] != rune('(') {
					goto l603
				}
				position++
				{
					position605, tokenIndex605 := position, tokenIndex
					if !_rules[rule_]() {
						goto l605
					}
					goto l606
				l605:
					position, tokenIndex = position605, tokenIndex605
				}
			l606:
				if !_rules[ruleAuthorsGroup]() {
					goto l603
				}
				{
					position607, tokenIndex607 := position, tokenIndex
					if !_rules[rule_]() {
						goto l607
					}
					goto l608
				l607:
					position, tokenIndex = position607, tokenIndex607
				}
			l608:
				if buffer[position] != rune(')') {
					goto l603
				}
				position++
				add(ruleBasionymAuthorship1, position604)
			}
			return true
		l603:
			position, tokenIndex = position603, tokenIndex603
			return false
		},
		/* 83 BasionymAuthorship2Parens <- <('(' _? '(' _? AuthorsGroup _? ')' _? ')')> */
		func() bool {
			position609, tokenIndex609 := position, tokenIndex
			{
				position610 := position
				if buffer[position] != rune('(') {
					goto l609
				}
				position++
				{
					position611, tokenIndex611 := position, tokenIndex
					if !_rules[rule_]() {
						goto l611
					}
					goto l612
				l611:
					position, tokenIndex = position611, tokenIndex611
				}
			l612:
				if buffer[position] != rune('(') {
					goto l609
				}
				position++
				{
					position613, tokenIndex613 := position, tokenIndex
					if !_rules[rule_]() {
						goto l613
					}
					goto l614
				l613:
					position, tokenIndex = position613, tokenIndex613
				}
			l614:
				if !_rules[ruleAuthorsGroup]() {
					goto l609
				}
				{
					position615, tokenIndex615 := position, tokenIndex
					if !_rules[rule_]() {
						goto l615
					}
					goto l616
				l615:
					position, tokenIndex = position615, tokenIndex615
				}
			l616:
				if buffer[position] != rune(')') {
					goto l609
				}
				position++
				{
					position617, tokenIndex617 := position, tokenIndex
					if !_rules[rule_]() {
						goto l617
					}
					goto l618
				l617:
					position, tokenIndex = position617, tokenIndex617
				}
			l618:
				if buffer[position] != rune(')') {
					goto l609
				}
				position++
				add(ruleBasionymAuthorship2Parens, position610)
			}
			return true
		l609:
			position, tokenIndex = position609, tokenIndex609
			return false
		},
		/* 84 AuthorsGroup <- <(AuthorsTeam (_ (AuthorEmend / AuthorEx) AuthorsTeam)?)> */
		func() bool {
			position619, tokenIndex619 := position, tokenIndex
			{
				position620 := position
				if !_rules[ruleAuthorsTeam]() {
					goto l619
				}
				{
					position621, tokenIndex621 := position, tokenIndex
					if !_rules[rule_]() {
						goto l621
					}
					{
						position623, tokenIndex623 := position, tokenIndex
						if !_rules[ruleAuthorEmend]() {
							goto l624
						}
						goto l623
					l624:
						position, tokenIndex = position623, tokenIndex623
						if !_rules[ruleAuthorEx]() {
							goto l621
						}
					}
				l623:
					if !_rules[ruleAuthorsTeam]() {
						goto l621
					}
					goto l622
				l621:
					position, tokenIndex = position621, tokenIndex621
				}
			l622:
				add(ruleAuthorsGroup, position620)
			}
			return true
		l619:
			position, tokenIndex = position619, tokenIndex619
			return false
		},
		/* 85 AuthorsTeam <- <(Author (AuthorSep Author)* (_? ','? _? Year)?)> */
		func() bool {
			position625, tokenIndex625 := position, tokenIndex
			{
				position626 := position
				if !_rules[ruleAuthor]() {
					goto l625
				}
			l627:
				{
					position628, tokenIndex628 := position, tokenIndex
					if !_rules[ruleAuthorSep]() {
						goto l628
					}
					if !_rules[ruleAuthor]() {
						goto l628
					}
					goto l627
				l628:
					position, tokenIndex = position628, tokenIndex628
				}
				{
					position629, tokenIndex629 := position, tokenIndex
					{
						position631, tokenIndex631 := position, tokenIndex
						if !_rules[rule_]() {
							goto l631
						}
						goto l632
					l631:
						position, tokenIndex = position631, tokenIndex631
					}
				l632:
					{
						position633, tokenIndex633 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l633
						}
						position++
						goto l634
					l633:
						position, tokenIndex = position633, tokenIndex633
					}
				l634:
					{
						position635, tokenIndex635 := position, tokenIndex
						if !_rules[rule_]() {
							goto l635
						}
						goto l636
					l635:
						position, tokenIndex = position635, tokenIndex635
					}
				l636:
					if !_rules[ruleYear]() {
						goto l629
					}
					goto l630
				l629:
					position, tokenIndex = position629, tokenIndex629
				}
			l630:
				add(ruleAuthorsTeam, position626)
			}
			return true
		l625:
			position, tokenIndex = position625, tokenIndex625
			return false
		},
		/* 86 AuthorSep <- <(AuthorSep1 / AuthorSep2)> */
		func() bool {
			position637, tokenIndex637 := position, tokenIndex
			{
				position638 := position
				{
					position639, tokenIndex639 := position, tokenIndex
					if !_rules[ruleAuthorSep1]() {
						goto l640
					}
					goto l639
				l640:
					position, tokenIndex = position639, tokenIndex639
					if !_rules[ruleAuthorSep2]() {
						goto l637
					}
				}
			l639:
				add(ruleAuthorSep, position638)
			}
			return true
		l637:
			position, tokenIndex = position637, tokenIndex637
			return false
		},
		/* 87 AuthorSep1 <- <(_? (',' _)? ('&' / AuthorSepSpanish / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd')) _?)> */
		func() bool {
			position641, tokenIndex641 := position, tokenIndex
			{
				position642 := position
				{
					position643, tokenIndex643 := position, tokenIndex
					if !_rules[rule_]() {
						goto l643
					}
					goto l644
				l643:
					position, tokenIndex = position643, tokenIndex643
				}
			l644:
				{
					position645, tokenIndex645 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l645
					}
					position++
					if !_rules[rule_]() {
						goto l645
					}
					goto l646
				l645:
					position, tokenIndex = position645, tokenIndex645
				}
			l646:
				{
					position647, tokenIndex647 := position, tokenIndex
					if buffer[position] != rune('&') {
						goto l648
					}
					position++
					goto l647
				l648:
					position, tokenIndex = position647, tokenIndex647
					if !_rules[ruleAuthorSepSpanish]() {
						goto l649
					}
					goto l647
				l649:
					position, tokenIndex = position647, tokenIndex647
					if buffer[position] != rune('e') {
						goto l650
					}
					position++
					if buffer[position] != rune('t') {
						goto l650
					}
					position++
					goto l647
				l650:
					position, tokenIndex = position647, tokenIndex647
					if buffer[position] != rune('a') {
						goto l651
					}
					position++
					if buffer[position] != rune('n') {
						goto l651
					}
					position++
					if buffer[position] != rune('d') {
						goto l651
					}
					position++
					goto l647
				l651:
					position, tokenIndex = position647, tokenIndex647
					if buffer[position] != rune('a') {
						goto l641
					}
					position++
					if buffer[position] != rune('p') {
						goto l641
					}
					position++
					if buffer[position] != rune('u') {
						goto l641
					}
					position++
					if buffer[position] != rune('d') {
						goto l641
					}
					position++
				}
			l647:
				{
					position652, tokenIndex652 := position, tokenIndex
					if !_rules[rule_]() {
						goto l652
					}
					goto l653
				l652:
					position, tokenIndex = position652, tokenIndex652
				}
			l653:
				add(ruleAuthorSep1, position642)
			}
			return true
		l641:
			position, tokenIndex = position641, tokenIndex641
			return false
		},
		/* 88 AuthorSep2 <- <(_? ',' _?)> */
		func() bool {
			position654, tokenIndex654 := position, tokenIndex
			{
				position655 := position
				{
					position656, tokenIndex656 := position, tokenIndex
					if !_rules[rule_]() {
						goto l656
					}
					goto l657
				l656:
					position, tokenIndex = position656, tokenIndex656
				}
			l657:
				if buffer[position] != rune(',') {
					goto l654
				}
				position++
				{
					position658, tokenIndex658 := position, tokenIndex
					if !_rules[rule_]() {
						goto l658
					}
					goto l659
				l658:
					position, tokenIndex = position658, tokenIndex658
				}
			l659:
				add(ruleAuthorSep2, position655)
			}
			return true
		l654:
			position, tokenIndex = position654, tokenIndex654
			return false
		},
		/* 89 AuthorSepSpanish <- <(_? 'y' _?)> */
		func() bool {
			position660, tokenIndex660 := position, tokenIndex
			{
				position661 := position
				{
					position662, tokenIndex662 := position, tokenIndex
					if !_rules[rule_]() {
						goto l662
					}
					goto l663
				l662:
					position, tokenIndex = position662, tokenIndex662
				}
			l663:
				if buffer[position] != rune('y') {
					goto l660
				}
				position++
				{
					position664, tokenIndex664 := position, tokenIndex
					if !_rules[rule_]() {
						goto l664
					}
					goto l665
				l664:
					position, tokenIndex = position664, tokenIndex664
				}
			l665:
				add(ruleAuthorSepSpanish, position661)
			}
			return true
		l660:
			position, tokenIndex = position660, tokenIndex660
			return false
		},
		/* 90 AuthorEx <- <((('e' 'x' '.'?) / ('m' 's' _ ('i' 'n')) / ('i' 'n')) _)> */
		func() bool {
			position666, tokenIndex666 := position, tokenIndex
			{
				position667 := position
				{
					position668, tokenIndex668 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l669
					}
					position++
					if buffer[position] != rune('x') {
						goto l669
					}
					position++
					{
						position670, tokenIndex670 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l670
						}
						position++
						goto l671
					l670:
						position, tokenIndex = position670, tokenIndex670
					}
				l671:
					goto l668
				l669:
					position, tokenIndex = position668, tokenIndex668
					if buffer[position] != rune('m') {
						goto l672
					}
					position++
					if buffer[position] != rune('s') {
						goto l672
					}
					position++
					if !_rules[rule_]() {
						goto l672
					}
					if buffer[position] != rune('i') {
						goto l672
					}
					position++
					if buffer[position] != rune('n') {
						goto l672
					}
					position++
					goto l668
				l672:
					position, tokenIndex = position668, tokenIndex668
					if buffer[position] != rune('i') {
						goto l666
					}
					position++
					if buffer[position] != rune('n') {
						goto l666
					}
					position++
				}
			l668:
				if !_rules[rule_]() {
					goto l666
				}
				add(ruleAuthorEx, position667)
			}
			return true
		l666:
			position, tokenIndex = position666, tokenIndex666
			return false
		},
		/* 91 AuthorEmend <- <('e' 'm' 'e' 'n' 'd' '.'? _)> */
		func() bool {
			position673, tokenIndex673 := position, tokenIndex
			{
				position674 := position
				if buffer[position] != rune('e') {
					goto l673
				}
				position++
				if buffer[position] != rune('m') {
					goto l673
				}
				position++
				if buffer[position] != rune('e') {
					goto l673
				}
				position++
				if buffer[position] != rune('n') {
					goto l673
				}
				position++
				if buffer[position] != rune('d') {
					goto l673
				}
				position++
				{
					position675, tokenIndex675 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l675
					}
					position++
					goto l676
				l675:
					position, tokenIndex = position675, tokenIndex675
				}
			l676:
				if !_rules[rule_]() {
					goto l673
				}
				add(ruleAuthorEmend, position674)
			}
			return true
		l673:
			position, tokenIndex = position673, tokenIndex673
			return false
		},
		/* 92 Author <- <((Author0 / Author1 / Author2 / UnknownAuthor) (_ AuthorEtAl)?)> */
		func() bool {
			position677, tokenIndex677 := position, tokenIndex
			{
				position678 := position
				{
					position679, tokenIndex679 := position, tokenIndex
					if !_rules[ruleAuthor0]() {
						goto l680
					}
					goto l679
				l680:
					position, tokenIndex = position679, tokenIndex679
					if !_rules[ruleAuthor1]() {
						goto l681
					}
					goto l679
				l681:
					position, tokenIndex = position679, tokenIndex679
					if !_rules[ruleAuthor2]() {
						goto l682
					}
					goto l679
				l682:
					position, tokenIndex = position679, tokenIndex679
					if !_rules[ruleUnknownAuthor]() {
						goto l677
					}
				}
			l679:
				{
					position683, tokenIndex683 := position, tokenIndex
					if !_rules[rule_]() {
						goto l683
					}
					if !_rules[ruleAuthorEtAl]() {
						goto l683
					}
					goto l684
				l683:
					position, tokenIndex = position683, tokenIndex683
				}
			l684:
				add(ruleAuthor, position678)
			}
			return true
		l677:
			position, tokenIndex = position677, tokenIndex677
			return false
		},
		/* 93 Author0 <- <(Author2 FiliusFNoSpace)> */
		func() bool {
			position685, tokenIndex685 := position, tokenIndex
			{
				position686 := position
				if !_rules[ruleAuthor2]() {
					goto l685
				}
				if !_rules[ruleFiliusFNoSpace]() {
					goto l685
				}
				add(ruleAuthor0, position686)
			}
			return true
		l685:
			position, tokenIndex = position685, tokenIndex685
			return false
		},
		/* 94 Author1 <- <(Author2 _? (Filius / AuthorSuffix))> */
		func() bool {
			position687, tokenIndex687 := position, tokenIndex
			{
				position688 := position
				if !_rules[ruleAuthor2]() {
					goto l687
				}
				{
					position689, tokenIndex689 := position, tokenIndex
					if !_rules[rule_]() {
						goto l689
					}
					goto l690
				l689:
					position, tokenIndex = position689, tokenIndex689
				}
			l690:
				{
					position691, tokenIndex691 := position, tokenIndex
					if !_rules[ruleFilius]() {
						goto l692
					}
					goto l691
				l692:
					position, tokenIndex = position691, tokenIndex691
					if !_rules[ruleAuthorSuffix]() {
						goto l687
					}
				}
			l691:
				add(ruleAuthor1, position688)
			}
			return true
		l687:
			position, tokenIndex = position687, tokenIndex687
			return false
		},
		/* 95 Author2 <- <(AuthorWord (_? AuthorWord)*)> */
		func() bool {
			position693, tokenIndex693 := position, tokenIndex
			{
				position694 := position
				if !_rules[ruleAuthorWord]() {
					goto l693
				}
			l695:
				{
					position696, tokenIndex696 := position, tokenIndex
					{
						position697, tokenIndex697 := position, tokenIndex
						if !_rules[rule_]() {
							goto l697
						}
						goto l698
					l697:
						position, tokenIndex = position697, tokenIndex697
					}
				l698:
					if !_rules[ruleAuthorWord]() {
						goto l696
					}
					goto l695
				l696:
					position, tokenIndex = position696, tokenIndex696
				}
				add(ruleAuthor2, position694)
			}
			return true
		l693:
			position, tokenIndex = position693, tokenIndex693
			return false
		},
		/* 96 UnknownAuthor <- <('?' / ((('a' 'u' 'c' 't') / ('a' 'n' 'o' 'n')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position699, tokenIndex699 := position, tokenIndex
			{
				position700 := position
				{
					position701, tokenIndex701 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l702
					}
					position++
					goto l701
				l702:
					position, tokenIndex = position701, tokenIndex701
					{
						position703, tokenIndex703 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l704
						}
						position++
						if buffer[position] != rune('u') {
							goto l704
						}
						position++
						if buffer[position] != rune('c') {
							goto l704
						}
						position++
						if buffer[position] != rune('t') {
							goto l704
						}
						position++
						goto l703
					l704:
						position, tokenIndex = position703, tokenIndex703
						if buffer[position] != rune('a') {
							goto l699
						}
						position++
						if buffer[position] != rune('n') {
							goto l699
						}
						position++
						if buffer[position] != rune('o') {
							goto l699
						}
						position++
						if buffer[position] != rune('n') {
							goto l699
						}
						position++
					}
				l703:
					{
						position705, tokenIndex705 := position, tokenIndex
						{
							position707, tokenIndex707 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l706
							}
							position, tokenIndex = position707, tokenIndex707
						}
						goto l705
					l706:
						position, tokenIndex = position705, tokenIndex705
						if buffer[position] != rune('.') {
							goto l699
						}
						position++
					}
				l705:
				}
			l701:
				add(ruleUnknownAuthor, position700)
			}
			return true
		l699:
			position, tokenIndex = position699, tokenIndex699
			return false
		},
		/* 97 AuthorWord <- <(!(HybridChar / (('b' / 'B') ('o' / 'O') ('l' / 'L') ('d' / 'D') ':')) (AuthorDashInitials / AuthorWord1 / AuthorWord2 / AuthorWord3 / AuthorPrefix))> */
		func() bool {
			position708, tokenIndex708 := position, tokenIndex
			{
				position709 := position
				{
					position710, tokenIndex710 := position, tokenIndex
					{
						position711, tokenIndex711 := position, tokenIndex
						if !_rules[ruleHybridChar]() {
							goto l712
						}
						goto l711
					l712:
						position, tokenIndex = position711, tokenIndex711
						{
							position713, tokenIndex713 := position, tokenIndex
							if buffer[position] != rune('b') {
								goto l714
							}
							position++
							goto l713
						l714:
							position, tokenIndex = position713, tokenIndex713
							if buffer[position] != rune('B') {
								goto l710
							}
							position++
						}
					l713:
						{
							position715, tokenIndex715 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l716
							}
							position++
							goto l715
						l716:
							position, tokenIndex = position715, tokenIndex715
							if buffer[position] != rune('O') {
								goto l710
							}
							position++
						}
					l715:
						{
							position717, tokenIndex717 := position, tokenIndex
							if buffer[position] != rune('l') {
								goto l718
							}
							position++
							goto l717
						l718:
							position, tokenIndex = position717, tokenIndex717
							if buffer[position] != rune('L') {
								goto l710
							}
							position++
						}
					l717:
						{
							position719, tokenIndex719 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l720
							}
							position++
							goto l719
						l720:
							position, tokenIndex = position719, tokenIndex719
							if buffer[position] != rune('D') {
								goto l710
							}
							position++
						}
					l719:
						if buffer[position] != rune(':') {
							goto l710
						}
						position++
					}
				l711:
					goto l708
				l710:
					position, tokenIndex = position710, tokenIndex710
				}
				{
					position721, tokenIndex721 := position, tokenIndex
					if !_rules[ruleAuthorDashInitials]() {
						goto l722
					}
					goto l721
				l722:
					position, tokenIndex = position721, tokenIndex721
					if !_rules[ruleAuthorWord1]() {
						goto l723
					}
					goto l721
				l723:
					position, tokenIndex = position721, tokenIndex721
					if !_rules[ruleAuthorWord2]() {
						goto l724
					}
					goto l721
				l724:
					position, tokenIndex = position721, tokenIndex721
					if !_rules[ruleAuthorWord3]() {
						goto l725
					}
					goto l721
				l725:
					position, tokenIndex = position721, tokenIndex721
					if !_rules[ruleAuthorPrefix]() {
						goto l708
					}
				}
			l721:
				add(ruleAuthorWord, position709)
			}
			return true
		l708:
			position, tokenIndex = position708, tokenIndex708
			return false
		},
		/* 98 AuthorEtAl <- <(('a' 'r' 'g' '.') / ('e' 't' ' ' 'a' 'l' '.' '{' '?' '}') / ((('e' 't') / '&') (' ' 'a' 'l') '.'?))> */
		func() bool {
			position726, tokenIndex726 := position, tokenIndex
			{
				position727 := position
				{
					position728, tokenIndex728 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l729
					}
					position++
					if buffer[position] != rune('r') {
						goto l729
					}
					position++
					if buffer[position] != rune('g') {
						goto l729
					}
					position++
					if buffer[position] != rune('.') {
						goto l729
					}
					position++
					goto l728
				l729:
					position, tokenIndex = position728, tokenIndex728
					if buffer[position] != rune('e') {
						goto l730
					}
					position++
					if buffer[position] != rune('t') {
						goto l730
					}
					position++
					if buffer[position] != rune(' ') {
						goto l730
					}
					position++
					if buffer[position] != rune('a') {
						goto l730
					}
					position++
					if buffer[position] != rune('l') {
						goto l730
					}
					position++
					if buffer[position] != rune('.') {
						goto l730
					}
					position++
					if buffer[position] != rune('{') {
						goto l730
					}
					position++
					if buffer[position] != rune('?') {
						goto l730
					}
					position++
					if buffer[position] != rune('}') {
						goto l730
					}
					position++
					goto l728
				l730:
					position, tokenIndex = position728, tokenIndex728
					{
						position731, tokenIndex731 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l732
						}
						position++
						if buffer[position] != rune('t') {
							goto l732
						}
						position++
						goto l731
					l732:
						position, tokenIndex = position731, tokenIndex731
						if buffer[position] != rune('&') {
							goto l726
						}
						position++
					}
				l731:
					if buffer[position] != rune(' ') {
						goto l726
					}
					position++
					if buffer[position] != rune('a') {
						goto l726
					}
					position++
					if buffer[position] != rune('l') {
						goto l726
					}
					position++
					{
						position733, tokenIndex733 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l733
						}
						position++
						goto l734
					l733:
						position, tokenIndex = position733, tokenIndex733
					}
				l734:
				}
			l728:
				add(ruleAuthorEtAl, position727)
			}
			return true
		l726:
			position, tokenIndex = position726, tokenIndex726
			return false
		},
		/* 99 AuthorWord1 <- <('d' 'u' 'P' 'o' 'n' 't')> */
		func() bool {
			position735, tokenIndex735 := position, tokenIndex
			{
				position736 := position
				if buffer[position] != rune('d') {
					goto l735
				}
				position++
				if buffer[position] != rune('u') {
					goto l735
				}
				position++
				if buffer[position] != rune('P') {
					goto l735
				}
				position++
				if buffer[position] != rune('o') {
					goto l735
				}
				position++
				if buffer[position] != rune('n') {
					goto l735
				}
				position++
				if buffer[position] != rune('t') {
					goto l735
				}
				position++
				add(ruleAuthorWord1, position736)
			}
			return true
		l735:
			position, tokenIndex = position735, tokenIndex735
			return false
		},
		/* 100 AuthorWord2 <- <(AuthorWord3 Dash (AuthorWordSoft / AuthorInitial))> */
		func() bool {
			position737, tokenIndex737 := position, tokenIndex
			{
				position738 := position
				if !_rules[ruleAuthorWord3]() {
					goto l737
				}
				if !_rules[ruleDash]() {
					goto l737
				}
				{
					position739, tokenIndex739 := position, tokenIndex
					if !_rules[ruleAuthorWordSoft]() {
						goto l740
					}
					goto l739
				l740:
					position, tokenIndex = position739, tokenIndex739
					if !_rules[ruleAuthorInitial]() {
						goto l737
					}
				}
			l739:
				add(ruleAuthorWord2, position738)
			}
			return true
		l737:
			position, tokenIndex = position737, tokenIndex737
			return false
		},
		/* 101 AuthorWord3 <- <(AuthorPrefixGlued? (AllCapsAuthorWord / CapAuthorWord) '.'?)> */
		func() bool {
			position741, tokenIndex741 := position, tokenIndex
			{
				position742 := position
				{
					position743, tokenIndex743 := position, tokenIndex
					if !_rules[ruleAuthorPrefixGlued]() {
						goto l743
					}
					goto l744
				l743:
					position, tokenIndex = position743, tokenIndex743
				}
			l744:
				{
					position745, tokenIndex745 := position, tokenIndex
					if !_rules[ruleAllCapsAuthorWord]() {
						goto l746
					}
					goto l745
				l746:
					position, tokenIndex = position745, tokenIndex745
					if !_rules[ruleCapAuthorWord]() {
						goto l741
					}
				}
			l745:
				{
					position747, tokenIndex747 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l747
					}
					position++
					goto l748
				l747:
					position, tokenIndex = position747, tokenIndex747
				}
			l748:
				add(ruleAuthorWord3, position742)
			}
			return true
		l741:
			position, tokenIndex = position741, tokenIndex741
			return false
		},
		/* 102 AuthorDashInitials <- <(AuthorUpperChar '.'? Dash AuthorUpperChar '.'?)> */
		func() bool {
			position749, tokenIndex749 := position, tokenIndex
			{
				position750 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l749
				}
				{
					position751, tokenIndex751 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l751
					}
					position++
					goto l752
				l751:
					position, tokenIndex = position751, tokenIndex751
				}
			l752:
				if !_rules[ruleDash]() {
					goto l749
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l749
				}
				{
					position753, tokenIndex753 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l753
					}
					position++
					goto l754
				l753:
					position, tokenIndex = position753, tokenIndex753
				}
			l754:
				add(ruleAuthorDashInitials, position750)
			}
			return true
		l749:
			position, tokenIndex = position749, tokenIndex749
			return false
		},
		/* 103 AuthorInitial <- <(AuthorUpperChar '.'?)> */
		func() bool {
			position755, tokenIndex755 := position, tokenIndex
			{
				position756 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l755
				}
				{
					position757, tokenIndex757 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l757
					}
					position++
					goto l758
				l757:
					position, tokenIndex = position757, tokenIndex757
				}
			l758:
				add(ruleAuthorInitial, position756)
			}
			return true
		l755:
			position, tokenIndex = position755, tokenIndex755
			return false
		},
		/* 104 AuthorWordSoft <- <(((AuthorUpperChar (AuthorUpperChar+ / AuthorLowerChar+)) / AuthorLowerChar+) '.'?)> */
		func() bool {
			position759, tokenIndex759 := position, tokenIndex
			{
				position760 := position
				{
					position761, tokenIndex761 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l762
					}
					{
						position763, tokenIndex763 := position, tokenIndex
						if !_rules[ruleAuthorUpperChar]() {
							goto l764
						}
					l765:
						{
							position766, tokenIndex766 := position, tokenIndex
							if !_rules[ruleAuthorUpperChar]() {
								goto l766
							}
							goto l765
						l766:
							position, tokenIndex = position766, tokenIndex766
						}
						goto l763
					l764:
						position, tokenIndex = position763, tokenIndex763
						if !_rules[ruleAuthorLowerChar]() {
							goto l762
						}
					l767:
						{
							position768, tokenIndex768 := position, tokenIndex
							if !_rules[ruleAuthorLowerChar]() {
								goto l768
							}
							goto l767
						l768:
							position, tokenIndex = position768, tokenIndex768
						}
					}
				l763:
					goto l761
				l762:
					position, tokenIndex = position761, tokenIndex761
					if !_rules[ruleAuthorLowerChar]() {
						goto l759
					}
				l769:
					{
						position770, tokenIndex770 := position, tokenIndex
						if !_rules[ruleAuthorLowerChar]() {
							goto l770
						}
						goto l769
					l770:
						position, tokenIndex = position770, tokenIndex770
					}
				}
			l761:
				{
					position771, tokenIndex771 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l771
					}
					position++
					goto l772
				l771:
					position, tokenIndex = position771, tokenIndex771
				}
			l772:
				add(ruleAuthorWordSoft, position760)
			}
			return true
		l759:
			position, tokenIndex = position759, tokenIndex759
			return false
		},
		/* 105 CapAuthorWord <- <(AuthorUpperChar AuthorLowerChar*)> */
		func() bool {
			position773, tokenIndex773 := position, tokenIndex
			{
				position774 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l773
				}
			l775:
				{
					position776, tokenIndex776 := position, tokenIndex
					if !_rules[ruleAuthorLowerChar]() {
						goto l776
					}
					goto l775
				l776:
					position, tokenIndex = position776, tokenIndex776
				}
				add(ruleCapAuthorWord, position774)
			}
			return true
		l773:
			position, tokenIndex = position773, tokenIndex773
			return false
		},
		/* 106 AllCapsAuthorWord <- <(AuthorUpperChar AuthorUpperChar+)> */
		func() bool {
			position777, tokenIndex777 := position, tokenIndex
			{
				position778 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l777
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l777
				}
			l779:
				{
					position780, tokenIndex780 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l780
					}
					goto l779
				l780:
					position, tokenIndex = position780, tokenIndex780
				}
				add(ruleAllCapsAuthorWord, position778)
			}
			return true
		l777:
			position, tokenIndex = position777, tokenIndex777
			return false
		},
		/* 107 Filius <- <(FiliusF / ('f' 'i' 'l' '.') / ('f' 'i' 'l' 'i' 'u' 's'))> */
		func() bool {
			position781, tokenIndex781 := position, tokenIndex
			{
				position782 := position
				{
					position783, tokenIndex783 := position, tokenIndex
					if !_rules[ruleFiliusF]() {
						goto l784
					}
					goto l783
				l784:
					position, tokenIndex = position783, tokenIndex783
					if buffer[position] != rune('f') {
						goto l785
					}
					position++
					if buffer[position] != rune('i') {
						goto l785
					}
					position++
					if buffer[position] != rune('l') {
						goto l785
					}
					position++
					if buffer[position] != rune('.') {
						goto l785
					}
					position++
					goto l783
				l785:
					position, tokenIndex = position783, tokenIndex783
					if buffer[position] != rune('f') {
						goto l781
					}
					position++
					if buffer[position] != rune('i') {
						goto l781
					}
					position++
					if buffer[position] != rune('l') {
						goto l781
					}
					position++
					if buffer[position] != rune('i') {
						goto l781
					}
					position++
					if buffer[position] != rune('u') {
						goto l781
					}
					position++
					if buffer[position] != rune('s') {
						goto l781
					}
					position++
				}
			l783:
				add(ruleFilius, position782)
			}
			return true
		l781:
			position, tokenIndex = position781, tokenIndex781
			return false
		},
		/* 108 FiliusF <- <('f' '.' !(_ Word))> */
		func() bool {
			position786, tokenIndex786 := position, tokenIndex
			{
				position787 := position
				if buffer[position] != rune('f') {
					goto l786
				}
				position++
				if buffer[position] != rune('.') {
					goto l786
				}
				position++
				{
					position788, tokenIndex788 := position, tokenIndex
					if !_rules[rule_]() {
						goto l788
					}
					if !_rules[ruleWord]() {
						goto l788
					}
					goto l786
				l788:
					position, tokenIndex = position788, tokenIndex788
				}
				add(ruleFiliusF, position787)
			}
			return true
		l786:
			position, tokenIndex = position786, tokenIndex786
			return false
		},
		/* 109 FiliusFNoSpace <- <('f' '.')> */
		func() bool {
			position789, tokenIndex789 := position, tokenIndex
			{
				position790 := position
				if buffer[position] != rune('f') {
					goto l789
				}
				position++
				if buffer[position] != rune('.') {
					goto l789
				}
				position++
				add(ruleFiliusFNoSpace, position790)
			}
			return true
		l789:
			position, tokenIndex = position789, tokenIndex789
			return false
		},
		/* 110 AuthorSuffix <- <(('b' 'i' 's') / ('t' 'e' 'r'))> */
		func() bool {
			position791, tokenIndex791 := position, tokenIndex
			{
				position792 := position
				{
					position793, tokenIndex793 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l794
					}
					position++
					if buffer[position] != rune('i') {
						goto l794
					}
					position++
					if buffer[position] != rune('s') {
						goto l794
					}
					position++
					goto l793
				l794:
					position, tokenIndex = position793, tokenIndex793
					if buffer[position] != rune('t') {
						goto l791
					}
					position++
					if buffer[position] != rune('e') {
						goto l791
					}
					position++
					if buffer[position] != rune('r') {
						goto l791
					}
					position++
				}
			l793:
				add(ruleAuthorSuffix, position792)
			}
			return true
		l791:
			position, tokenIndex = position791, tokenIndex791
			return false
		},
		/* 111 AuthorPrefixGlued <- <(('d' / 'O' / 'L' / ('M' 'c') / 'M') Apostrophe)> */
		func() bool {
			position795, tokenIndex795 := position, tokenIndex
			{
				position796 := position
				{
					position797, tokenIndex797 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l798
					}
					position++
					goto l797
				l798:
					position, tokenIndex = position797, tokenIndex797
					if buffer[position] != rune('O') {
						goto l799
					}
					position++
					goto l797
				l799:
					position, tokenIndex = position797, tokenIndex797
					if buffer[position] != rune('L') {
						goto l800
					}
					position++
					goto l797
				l800:
					position, tokenIndex = position797, tokenIndex797
					if buffer[position] != rune('M') {
						goto l801
					}
					position++
					if buffer[position] != rune('c') {
						goto l801
					}
					position++
					goto l797
				l801:
					position, tokenIndex = position797, tokenIndex797
					if buffer[position] != rune('M') {
						goto l795
					}
					position++
				}
			l797:
				if !_rules[ruleApostrophe]() {
					goto l795
				}
				add(ruleAuthorPrefixGlued, position796)
			}
			return true
		l795:
			position, tokenIndex = position795, tokenIndex795
			return false
		},
		/* 112 AuthorPrefix <- <(AuthorPrefix1 / AuthorPrefix2)> */
		func() bool {
			position802, tokenIndex802 := position, tokenIndex
			{
				position803 := position
				{
					position804, tokenIndex804 := position, tokenIndex
					if !_rules[ruleAuthorPrefix1]() {
						goto l805
					}
					goto l804
				l805:
					position, tokenIndex = position804, tokenIndex804
					if !_rules[ruleAuthorPrefix2]() {
						goto l802
					}
				}
			l804:
				add(ruleAuthorPrefix, position803)
			}
			return true
		l802:
			position, tokenIndex = position802, tokenIndex802
			return false
		},
		/* 113 AuthorPrefix2 <- <(('v' '.' (_? ('d' '.'))?) / (Apostrophe 't'))> */
		func() bool {
			position806, tokenIndex806 := position, tokenIndex
			{
				position807 := position
				{
					position808, tokenIndex808 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l809
					}
					position++
					if buffer[position] != rune('.') {
						goto l809
					}
					position++
					{
						position810, tokenIndex810 := position, tokenIndex
						{
							position812, tokenIndex812 := position, tokenIndex
							if !_rules[rule_]() {
								goto l812
							}
							goto l813
						l812:
							position, tokenIndex = position812, tokenIndex812
						}
					l813:
						if buffer[position] != rune('d') {
							goto l810
						}
						position++
						if buffer[position] != rune('.') {
							goto l810
						}
						position++
						goto l811
					l810:
						position, tokenIndex = position810, tokenIndex810
					}
				l811:
					goto l808
				l809:
					position, tokenIndex = position808, tokenIndex808
					if !_rules[ruleApostrophe]() {
						goto l806
					}
					if buffer[position] != rune('t') {
						goto l806
					}
					position++
				}
			l808:
				add(ruleAuthorPrefix2, position807)
			}
			return true
		l806:
			position, tokenIndex = position806, tokenIndex806
			return false
		},
		/* 114 AuthorPrefix1 <- <((('a' 'b') / ('a' 'f') / ('b' 'i' 's') / ('d' 'a') / ('d' 'e' 'r') / ('d' 'e' 's') / ('d' 'e' 'n') / ('d' 'e' 'l' 'l' 'a') / ('d' 'e' 'l' 'a') / ('d' 'e' 'l' 'l' 'e') / ('d' 'e' 'l') / ('d' 'e' ' ' 'l' 'o' 's') / ('d' 'e') / ('d' 'i') / ('d' 'o' 's') / ('d' 'u') / ('d' 'o') / ('e' 'l') / ('l' 'a') / ('l' 'e') / ('t' 'e' 'n') / ('t' 'e' 'r') / ('v' 'a' 'n') / ('v' 'e' 'r') / ('d' Apostrophe) / ('i' 'n' Apostrophe 't') / ('z' 'u' 'r') / ('z' 'u') / ('v' 'o' 'n' (_ (('d' '.') / ('d' 'e' 'm')))?) / ('v' (_ 'd')?)) &_)> */
		func() bool {
			position814, tokenIndex814 := position, tokenIndex
			{
				position815 := position
				{
					position816, tokenIndex816 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l817
					}
					position++
					if buffer[position] != rune('b') {
						goto l817
					}
					position++
					goto l816
				l817:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('a') {
						goto l818
					}
					position++
					if buffer[position] != rune('f') {
						goto l818
					}
					position++
					goto l816
				l818:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('b') {
						goto l819
					}
					position++
					if buffer[position] != rune('i') {
						goto l819
					}
					position++
					if buffer[position] != rune('s') {
						goto l819
					}
					position++
					goto l816
				l819:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('d') {
						goto l820
					}
					position++
					if buffer[position] != rune('a') {
						goto l820
					}
					position++
					goto l816
				l820:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('d') {
						goto l821
					}
					position++
					if buffer[position] != rune('e') {
						goto l821
					}
					position++
					if buffer[position] != rune('r') {
						goto l821
					}
					position++
					goto l816
				l821:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('d') {
						goto l822
					}
					position++
					if buffer[position] != rune('e') {
						goto l822
					}
					position++
					if buffer[position] != rune('s') {
						goto l822
					}
					position++
					goto l816
				l822:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('d') {
						goto l823
					}
					position++
					if buffer[position] != rune('e') {
						goto l823
					}
					position++
					if buffer[position] != rune('n') {
						goto l823
					}
					position++
					goto l816
				l823:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('d') {
						goto l824
					}
					position++
					if buffer[position] != rune('e') {
						goto l824
					}
					position++
					if buffer[position] != rune('l') {
						goto l824
					}
					position++
					if buffer[position] != rune('l') {
						goto l824
					}
					position++
					if buffer[position] != rune('a') {
						goto l824
					}
					position++
					goto l816
				l824:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('d') {
						goto l825
					}
					position++
					if buffer[position] != rune('e') {
						goto l825
					}
					position++
					if buffer[position] != rune('l') {
						goto l825
					}
					position++
					if buffer[position] != rune('a') {
						goto l825
					}
					position++
					goto l816
				l825:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('d') {
						goto l826
					}
					position++
					if buffer[position] != rune('e') {
						goto l826
					}
					position++
					if buffer[position] != rune('l') {
						goto l826
					}
					position++
					if buffer[position] != rune('l') {
						goto l826
					}
					position++
					if buffer[position] != rune('e') {
						goto l826
					}
					position++
					goto l816
				l826:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('d') {
						goto l827
					}
					position++
					if buffer[position] != rune('e') {
						goto l827
					}
					position++
					if buffer[position] != rune('l') {
						goto l827
					}
					position++
					goto l816
				l827:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('d') {
						goto l828
					}
					position++
					if buffer[position] != rune('e') {
						goto l828
					}
					position++
					if buffer[position] != rune(' ') {
						goto l828
					}
					position++
					if buffer[position] != rune('l') {
						goto l828
					}
					position++
					if buffer[position] != rune('o') {
						goto l828
					}
					position++
					if buffer[position] != rune('s') {
						goto l828
					}
					position++
					goto l816
				l828:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('d') {
						goto l829
					}
					position++
					if buffer[position] != rune('e') {
						goto l829
					}
					position++
					goto l816
				l829:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('d') {
						goto l830
					}
					position++
					if buffer[position] != rune('i') {
						goto l830
					}
					position++
					goto l816
				l830:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('d') {
						goto l831
					}
					position++
					if buffer[position] != rune('o') {
						goto l831
					}
					position++
					if buffer[position] != rune('s') {
						goto l831
					}
					position++
					goto l816
				l831:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('d') {
						goto l832
					}
					position++
					if buffer[position] != rune('u') {
						goto l832
					}
					position++
					goto l816
				l832:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('d') {
						goto l833
					}
					position++
					if buffer[position] != rune('o') {
						goto l833
					}
					position++
					goto l816
				l833:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('e') {
						goto l834
					}
					position++
					if buffer[position] != rune('l') {
						goto l834
					}
					position++
					goto l816
				l834:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('l') {
						goto l835
					}
					position++
					if buffer[position] != rune('a') {
						goto l835
					}
					position++
					goto l816
				l835:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('l') {
						goto l836
					}
					position++
					if buffer[position] != rune('e') {
						goto l836
					}
					position++
					goto l816
				l836:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('t') {
						goto l837
					}
					position++
					if buffer[position] != rune('e') {
						goto l837
					}
					position++
					if buffer[position] != rune('n') {
						goto l837
					}
					position++
					goto l816
				l837:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('t') {
						goto l838
					}
					position++
					if buffer[position] != rune('e') {
						goto l838
					}
					position++
					if buffer[position] != rune('r') {
						goto l838
					}
					position++
					goto l816
				l838:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('v') {
						goto l839
					}
					position++
					if buffer[position] != rune('a') {
						goto l839
					}
					position++
					if buffer[position] != rune('n') {
						goto l839
					}
					position++
					goto l816
				l839:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('v') {
						goto l840
					}
					position++
					if buffer[position] != rune('e') {
						goto l840
					}
					position++
					if buffer[position] != rune('r') {
						goto l840
					}
					position++
					goto l816
				l840:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('d') {
						goto l841
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l841
					}
					goto l816
				l841:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('i') {
						goto l842
					}
					position++
					if buffer[position] != rune('n') {
						goto l842
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l842
					}
					if buffer[position] != rune('t') {
						goto l842
					}
					position++
					goto l816
				l842:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('z') {
						goto l843
					}
					position++
					if buffer[position] != rune('u') {
						goto l843
					}
					position++
					if buffer[position] != rune('r') {
						goto l843
					}
					position++
					goto l816
				l843:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('z') {
						goto l844
					}
					position++
					if buffer[position] != rune('u') {
						goto l844
					}
					position++
					goto l816
				l844:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('v') {
						goto l845
					}
					position++
					if buffer[position] != rune('o') {
						goto l845
					}
					position++
					if buffer[position] != rune('n') {
						goto l845
					}
					position++
					{
						position846, tokenIndex846 := position, tokenIndex
						if !_rules[rule_]() {
							goto l846
						}
						{
							position848, tokenIndex848 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l849
							}
							position++
							if buffer[position] != rune('.') {
								goto l849
							}
							position++
							goto l848
						l849:
							position, tokenIndex = position848, tokenIndex848
							if buffer[position] != rune('d') {
								goto l846
							}
							position++
							if buffer[position] != rune('e') {
								goto l846
							}
							position++
							if buffer[position] != rune('m') {
								goto l846
							}
							position++
						}
					l848:
						goto l847
					l846:
						position, tokenIndex = position846, tokenIndex846
					}
				l847:
					goto l816
				l845:
					position, tokenIndex = position816, tokenIndex816
					if buffer[position] != rune('v') {
						goto l814
					}
					position++
					{
						position850, tokenIndex850 := position, tokenIndex
						if !_rules[rule_]() {
							goto l850
						}
						if buffer[position] != rune('d') {
							goto l850
						}
						position++
						goto l851
					l850:
						position, tokenIndex = position850, tokenIndex850
					}
				l851:
				}
			l816:
				{
					position852, tokenIndex852 := position, tokenIndex
					if !_rules[rule_]() {
						goto l814
					}
					position, tokenIndex = position852, tokenIndex852
				}
				add(ruleAuthorPrefix1, position815)
			}
			return true
		l814:
			position, tokenIndex = position814, tokenIndex814
			return false
		},
		/* 115 AuthorUpperChar <- <(UpperASCII / MiscodedChar / ('À' / 'Á' / 'Â' / 'Ã' / 'Ä' / 'Å' / 'Æ' / 'Ç' / 'È' / 'É' / 'Ê' / 'Ë' / 'Ì' / 'Í' / 'Î' / 'Ï' / 'Ð' / 'Ñ' / 'Ò' / 'Ó' / 'Ô' / 'Õ' / 'Ö' / 'Ø' / 'Ù' / 'Ú' / 'Û' / 'Ü' / 'Ý' / 'Ć' / 'Č' / 'Ď' / 'İ' / 'Ķ' / 'Ĺ' / 'ĺ' / 'Ľ' / 'ľ' / 'Ł' / 'ł' / 'Ņ' / 'Ō' / 'Ő' / 'Œ' / 'Ř' / 'Ś' / 'Ŝ' / 'Ş' / 'Š' / 'Ÿ' / 'Ź' / 'Ż' / 'Ž' / 'ƒ' / 'Ǿ' / 'Ș' / 'Ț'))> */
		func() bool {
			position853, tokenIndex853 := position, tokenIndex
			{
				position854 := position
				{
					position855, tokenIndex855 := position, tokenIndex
					if !_rules[ruleUpperASCII]() {
						goto l856
					}
					goto l855
				l856:
					position, tokenIndex = position855, tokenIndex855
					if !_rules[ruleMiscodedChar]() {
						goto l857
					}
					goto l855
				l857:
					position, tokenIndex = position855, tokenIndex855
					{
						position858, tokenIndex858 := position, tokenIndex
						if buffer[position] != rune('À') {
							goto l859
						}
						position++
						goto l858
					l859:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Á') {
							goto l860
						}
						position++
						goto l858
					l860:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Â') {
							goto l861
						}
						position++
						goto l858
					l861:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ã') {
							goto l862
						}
						position++
						goto l858
					l862:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ä') {
							goto l863
						}
						position++
						goto l858
					l863:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Å') {
							goto l864
						}
						position++
						goto l858
					l864:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Æ') {
							goto l865
						}
						position++
						goto l858
					l865:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ç') {
							goto l866
						}
						position++
						goto l858
					l866:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('È') {
							goto l867
						}
						position++
						goto l858
					l867:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('É') {
							goto l868
						}
						position++
						goto l858
					l868:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ê') {
							goto l869
						}
						position++
						goto l858
					l869:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ë') {
							goto l870
						}
						position++
						goto l858
					l870:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ì') {
							goto l871
						}
						position++
						goto l858
					l871:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Í') {
							goto l872
						}
						position++
						goto l858
					l872:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Î') {
							goto l873
						}
						position++
						goto l858
					l873:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ï') {
							goto l874
						}
						position++
						goto l858
					l874:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ð') {
							goto l875
						}
						position++
						goto l858
					l875:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ñ') {
							goto l876
						}
						position++
						goto l858
					l876:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ò') {
							goto l877
						}
						position++
						goto l858
					l877:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ó') {
							goto l878
						}
						position++
						goto l858
					l878:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ô') {
							goto l879
						}
						position++
						goto l858
					l879:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Õ') {
							goto l880
						}
						position++
						goto l858
					l880:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ö') {
							goto l881
						}
						position++
						goto l858
					l881:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ø') {
							goto l882
						}
						position++
						goto l858
					l882:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ù') {
							goto l883
						}
						position++
						goto l858
					l883:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ú') {
							goto l884
						}
						position++
						goto l858
					l884:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Û') {
							goto l885
						}
						position++
						goto l858
					l885:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ü') {
							goto l886
						}
						position++
						goto l858
					l886:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ý') {
							goto l887
						}
						position++
						goto l858
					l887:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ć') {
							goto l888
						}
						position++
						goto l858
					l888:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Č') {
							goto l889
						}
						position++
						goto l858
					l889:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ď') {
							goto l890
						}
						position++
						goto l858
					l890:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('İ') {
							goto l891
						}
						position++
						goto l858
					l891:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ķ') {
							goto l892
						}
						position++
						goto l858
					l892:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ĺ') {
							goto l893
						}
						position++
						goto l858
					l893:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('ĺ') {
							goto l894
						}
						position++
						goto l858
					l894:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ľ') {
							goto l895
						}
						position++
						goto l858
					l895:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('ľ') {
							goto l896
						}
						position++
						goto l858
					l896:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ł') {
							goto l897
						}
						position++
						goto l858
					l897:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('ł') {
							goto l898
						}
						position++
						goto l858
					l898:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ņ') {
							goto l899
						}
						position++
						goto l858
					l899:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ō') {
							goto l900
						}
						position++
						goto l858
					l900:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ő') {
							goto l901
						}
						position++
						goto l858
					l901:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Œ') {
							goto l902
						}
						position++
						goto l858
					l902:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ř') {
							goto l903
						}
						position++
						goto l858
					l903:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ś') {
							goto l904
						}
						position++
						goto l858
					l904:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ŝ') {
							goto l905
						}
						position++
						goto l858
					l905:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ş') {
							goto l906
						}
						position++
						goto l858
					l906:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Š') {
							goto l907
						}
						position++
						goto l858
					l907:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ÿ') {
							goto l908
						}
						position++
						goto l858
					l908:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ź') {
							goto l909
						}
						position++
						goto l858
					l909:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ż') {
							goto l910
						}
						position++
						goto l858
					l910:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ž') {
							goto l911
						}
						position++
						goto l858
					l911:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('ƒ') {
							goto l912
						}
						position++
						goto l858
					l912:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ǿ') {
							goto l913
						}
						position++
						goto l858
					l913:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ș') {
							goto l914
						}
						position++
						goto l858
					l914:
						position, tokenIndex = position858, tokenIndex858
						if buffer[position] != rune('Ț') {
							goto l853
						}
						position++
					}
				l858:
				}
			l855:
				add(ruleAuthorUpperChar, position854)
			}
			return true
		l853:
			position, tokenIndex = position853, tokenIndex853
			return false
		},
		/* 116 AuthorLowerChar <- <(LowerASCII / MiscodedChar / Apostrophe / ('à' / 'á' / 'â' / 'ã' / 'ä' / 'å' / 'æ' / 'ç' / 'è' / 'é' / 'ê' / 'ë' / 'ì' / 'í' / 'î' / 'ï' / 'ð' / 'ñ' / 'ò' / 'ó' / 'ó' / 'ô' / 'õ' / 'ö' / 'ø' / 'ù' / 'ú' / 'û' / 'ü' / 'ý' / 'ÿ' / 'ā' / 'ă' / 'ą' / 'ć' / 'ĉ' / 'č' / 'ď' / 'đ' / 'ē' / 'ĕ' / 'ė' / 'ę' / 'ě' / 'ğ' / 'ī' / 'ĭ' / 'İ' / 'ı' / 'ĺ' / 'ľ' / 'ł' / 'ń' / 'ņ' / 'ň' / 'ŏ' / 'ő' / 'œ' / 'ŕ' / 'ř' / 'ś' / 'ş' / 'š' / 'ţ' / 'ť' / 'ũ' / 'ū' / 'ŭ' / 'ů' / 'ű' / 'ź' / 'ż' / 'ž' / 'ſ' / 'ǎ' / 'ǔ' / 'ǧ' / 'ș' / 'ț' / 'ȳ' / 'ß'))> */
		func() bool {
			position915, tokenIndex915 := position, tokenIndex
			{
				position916 := position
				{
					position917, tokenIndex917 := position, tokenIndex
					if !_rules[ruleLowerASCII]() {
						goto l918
					}
					goto l917
				l918:
					position, tokenIndex = position917, tokenIndex917
					if !_rules[ruleMiscodedChar]() {
						goto l919
					}
					goto l917
				l919:
					position, tokenIndex = position917, tokenIndex917
					if !_rules[ruleApostrophe]() {
						goto l920
					}
					goto l917
				l920:
					position, tokenIndex = position917, tokenIndex917
					{
						position921, tokenIndex921 := position, tokenIndex
						if buffer[position] != rune('à') {
							goto l922
						}
						position++
						goto l921
					l922:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('á') {
							goto l923
						}
						position++
						goto l921
					l923:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('â') {
							goto l924
						}
						position++
						goto l921
					l924:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ã') {
							goto l925
						}
						position++
						goto l921
					l925:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ä') {
							goto l926
						}
						position++
						goto l921
					l926:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('å') {
							goto l927
						}
						position++
						goto l921
					l927:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('æ') {
							goto l928
						}
						position++
						goto l921
					l928:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ç') {
							goto l929
						}
						position++
						goto l921
					l929:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('è') {
							goto l930
						}
						position++
						goto l921
					l930:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('é') {
							goto l931
						}
						position++
						goto l921
					l931:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ê') {
							goto l932
						}
						position++
						goto l921
					l932:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ë') {
							goto l933
						}
						position++
						goto l921
					l933:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ì') {
							goto l934
						}
						position++
						goto l921
					l934:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('í') {
							goto l935
						}
						position++
						goto l921
					l935:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('î') {
							goto l936
						}
						position++
						goto l921
					l936:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ï') {
							goto l937
						}
						position++
						goto l921
					l937:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ð') {
							goto l938
						}
						position++
						goto l921
					l938:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ñ') {
							goto l939
						}
						position++
						goto l921
					l939:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ò') {
							goto l940
						}
						position++
						goto l921
					l940:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ó') {
							goto l941
						}
						position++
						goto l921
					l941:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ó') {
							goto l942
						}
						position++
						goto l921
					l942:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ô') {
							goto l943
						}
						position++
						goto l921
					l943:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('õ') {
							goto l944
						}
						position++
						goto l921
					l944:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ö') {
							goto l945
						}
						position++
						goto l921
					l945:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ø') {
							goto l946
						}
						position++
						goto l921
					l946:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ù') {
							goto l947
						}
						position++
						goto l921
					l947:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ú') {
							goto l948
						}
						position++
						goto l921
					l948:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('û') {
							goto l949
						}
						position++
						goto l921
					l949:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ü') {
							goto l950
						}
						position++
						goto l921
					l950:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ý') {
							goto l951
						}
						position++
						goto l921
					l951:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ÿ') {
							goto l952
						}
						position++
						goto l921
					l952:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ā') {
							goto l953
						}
						position++
						goto l921
					l953:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ă') {
							goto l954
						}
						position++
						goto l921
					l954:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ą') {
							goto l955
						}
						position++
						goto l921
					l955:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ć') {
							goto l956
						}
						position++
						goto l921
					l956:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ĉ') {
							goto l957
						}
						position++
						goto l921
					l957:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('č') {
							goto l958
						}
						position++
						goto l921
					l958:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ď') {
							goto l959
						}
						position++
						goto l921
					l959:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('đ') {
							goto l960
						}
						position++
						goto l921
					l960:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ē') {
							goto l961
						}
						position++
						goto l921
					l961:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ĕ') {
							goto l962
						}
						position++
						goto l921
					l962:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ė') {
							goto l963
						}
						position++
						goto l921
					l963:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ę') {
							goto l964
						}
						position++
						goto l921
					l964:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ě') {
							goto l965
						}
						position++
						goto l921
					l965:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ğ') {
							goto l966
						}
						position++
						goto l921
					l966:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ī') {
							goto l967
						}
						position++
						goto l921
					l967:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ĭ') {
							goto l968
						}
						position++
						goto l921
					l968:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('İ') {
							goto l969
						}
						position++
						goto l921
					l969:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ı') {
							goto l970
						}
						position++
						goto l921
					l970:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ĺ') {
							goto l971
						}
						position++
						goto l921
					l971:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ľ') {
							goto l972
						}
						position++
						goto l921
					l972:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ł') {
							goto l973
						}
						position++
						goto l921
					l973:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ń') {
							goto l974
						}
						position++
						goto l921
					l974:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ņ') {
							goto l975
						}
						position++
						goto l921
					l975:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ň') {
							goto l976
						}
						position++
						goto l921
					l976:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ŏ') {
							goto l977
						}
						position++
						goto l921
					l977:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ő') {
							goto l978
						}
						position++
						goto l921
					l978:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('œ') {
							goto l979
						}
						position++
						goto l921
					l979:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ŕ') {
							goto l980
						}
						position++
						goto l921
					l980:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ř') {
							goto l981
						}
						position++
						goto l921
					l981:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ś') {
							goto l982
						}
						position++
						goto l921
					l982:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ş') {
							goto l983
						}
						position++
						goto l921
					l983:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('š') {
							goto l984
						}
						position++
						goto l921
					l984:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ţ') {
							goto l985
						}
						position++
						goto l921
					l985:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ť') {
							goto l986
						}
						position++
						goto l921
					l986:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ũ') {
							goto l987
						}
						position++
						goto l921
					l987:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ū') {
							goto l988
						}
						position++
						goto l921
					l988:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ŭ') {
							goto l989
						}
						position++
						goto l921
					l989:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ů') {
							goto l990
						}
						position++
						goto l921
					l990:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ű') {
							goto l991
						}
						position++
						goto l921
					l991:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ź') {
							goto l992
						}
						position++
						goto l921
					l992:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ż') {
							goto l993
						}
						position++
						goto l921
					l993:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ž') {
							goto l994
						}
						position++
						goto l921
					l994:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ſ') {
							goto l995
						}
						position++
						goto l921
					l995:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ǎ') {
							goto l996
						}
						position++
						goto l921
					l996:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ǔ') {
							goto l997
						}
						position++
						goto l921
					l997:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ǧ') {
							goto l998
						}
						position++
						goto l921
					l998:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ș') {
							goto l999
						}
						position++
						goto l921
					l999:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ț') {
							goto l1000
						}
						position++
						goto l921
					l1000:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ȳ') {
							goto l1001
						}
						position++
						goto l921
					l1001:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ß') {
							goto l915
						}
						position++
					}
				l921:
				}
			l917:
				add(ruleAuthorLowerChar, position916)
			}
			return true
		l915:
			position, tokenIndex = position915, tokenIndex915
			return false
		},
		/* 117 Year <- <(YearRange / YearApprox / YearWithParens / YearWithPage / YearWithDot / YearWithChar / YearNum)> */
		func() bool {
			position1002, tokenIndex1002 := position, tokenIndex
			{
				position1003 := position
				{
					position1004, tokenIndex1004 := position, tokenIndex
					if !_rules[ruleYearRange]() {
						goto l1005
					}
					goto l1004
				l1005:
					position, tokenIndex = position1004, tokenIndex1004
					if !_rules[ruleYearApprox]() {
						goto l1006
					}
					goto l1004
				l1006:
					position, tokenIndex = position1004, tokenIndex1004
					if !_rules[ruleYearWithParens]() {
						goto l1007
					}
					goto l1004
				l1007:
					position, tokenIndex = position1004, tokenIndex1004
					if !_rules[ruleYearWithPage]() {
						goto l1008
					}
					goto l1004
				l1008:
					position, tokenIndex = position1004, tokenIndex1004
					if !_rules[ruleYearWithDot]() {
						goto l1009
					}
					goto l1004
				l1009:
					position, tokenIndex = position1004, tokenIndex1004
					if !_rules[ruleYearWithChar]() {
						goto l1010
					}
					goto l1004
				l1010:
					position, tokenIndex = position1004, tokenIndex1004
					if !_rules[ruleYearNum]() {
						goto l1002
					}
				}
			l1004:
				add(ruleYear, position1003)
			}
			return true
		l1002:
			position, tokenIndex = position1002, tokenIndex1002
			return false
		},
		/* 118 YearRange <- <(YearNum (Dash / Slash) (Nums+ ('a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'l' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z' / '?')*))> */
		func() bool {
			position1011, tokenIndex1011 := position, tokenIndex
			{
				position1012 := position
				if !_rules[ruleYearNum]() {
					goto l1011
				}
				{
					position1013, tokenIndex1013 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l1014
					}
					goto l1013
				l1014:
					position, tokenIndex = position1013, tokenIndex1013
					if !_rules[ruleSlash]() {
						goto l1011
					}
				}
			l1013:
				if !_rules[ruleNums]() {
					goto l1011
				}
			l1015:
				{
					position1016, tokenIndex1016 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1016
					}
					goto l1015
				l1016:
					position, tokenIndex = position1016, tokenIndex1016
				}
			l1017:
				{
					position1018, tokenIndex1018 := position, tokenIndex
					{
						position1019, tokenIndex1019 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l1020
						}
						position++
						goto l1019
					l1020:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('b') {
							goto l1021
						}
						position++
						goto l1019
					l1021:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('c') {
							goto l1022
						}
						position++
						goto l1019
					l1022:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('d') {
							goto l1023
						}
						position++
						goto l1019
					l1023:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('e') {
							goto l1024
						}
						position++
						goto l1019
					l1024:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('f') {
							goto l1025
						}
						position++
						goto l1019
					l1025:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('g') {
							goto l1026
						}
						position++
						goto l1019
					l1026:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('h') {
							goto l1027
						}
						position++
						goto l1019
					l1027:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('i') {
							goto l1028
						}
						position++
						goto l1019
					l1028:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('j') {
							goto l1029
						}
						position++
						goto l1019
					l1029:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('k') {
							goto l1030
						}
						position++
						goto l1019
					l1030:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('l') {
							goto l1031
						}
						position++
						goto l1019
					l1031:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('m') {
							goto l1032
						}
						position++
						goto l1019
					l1032:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('n') {
							goto l1033
						}
						position++
						goto l1019
					l1033:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('o') {
							goto l1034
						}
						position++
						goto l1019
					l1034:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('p') {
							goto l1035
						}
						position++
						goto l1019
					l1035:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('q') {
							goto l1036
						}
						position++
						goto l1019
					l1036:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('r') {
							goto l1037
						}
						position++
						goto l1019
					l1037:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('s') {
							goto l1038
						}
						position++
						goto l1019
					l1038:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('t') {
							goto l1039
						}
						position++
						goto l1019
					l1039:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('u') {
							goto l1040
						}
						position++
						goto l1019
					l1040:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('v') {
							goto l1041
						}
						position++
						goto l1019
					l1041:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('w') {
							goto l1042
						}
						position++
						goto l1019
					l1042:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('x') {
							goto l1043
						}
						position++
						goto l1019
					l1043:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('y') {
							goto l1044
						}
						position++
						goto l1019
					l1044:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('z') {
							goto l1045
						}
						position++
						goto l1019
					l1045:
						position, tokenIndex = position1019, tokenIndex1019
						if buffer[position] != rune('?') {
							goto l1018
						}
						position++
					}
				l1019:
					goto l1017
				l1018:
					position, tokenIndex = position1018, tokenIndex1018
				}
				add(ruleYearRange, position1012)
			}
			return true
		l1011:
			position, tokenIndex = position1011, tokenIndex1011
			return false
		},
		/* 119 YearWithDot <- <(YearNum '.')> */
		func() bool {
			position1046, tokenIndex1046 := position, tokenIndex
			{
				position1047 := position
				if !_rules[ruleYearNum]() {
					goto l1046
				}
				if buffer[position] != rune('.') {
					goto l1046
				}
				position++
				add(ruleYearWithDot, position1047)
			}
			return true
		l1046:
			position, tokenIndex = position1046, tokenIndex1046
			return false
		},
		/* 120 YearApprox <- <('[' _? YearNum _? ']')> */
		func() bool {
			position1048, tokenIndex1048 := position, tokenIndex
			{
				position1049 := position
				if buffer[position] != rune('[') {
					goto l1048
				}
				position++
				{
					position1050, tokenIndex1050 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1050
					}
					goto l1051
				l1050:
					position, tokenIndex = position1050, tokenIndex1050
				}
			l1051:
				if !_rules[ruleYearNum]() {
					goto l1048
				}
				{
					position1052, tokenIndex1052 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1052
					}
					goto l1053
				l1052:
					position, tokenIndex = position1052, tokenIndex1052
				}
			l1053:
				if buffer[position] != rune(']') {
					goto l1048
				}
				position++
				add(ruleYearApprox, position1049)
			}
			return true
		l1048:
			position, tokenIndex = position1048, tokenIndex1048
			return false
		},
		/* 121 YearWithPage <- <((YearWithChar / YearNum) _? ':' _? Nums+)> */
		func() bool {
			position1054, tokenIndex1054 := position, tokenIndex
			{
				position1055 := position
				{
					position1056, tokenIndex1056 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l1057
					}
					goto l1056
				l1057:
					position, tokenIndex = position1056, tokenIndex1056
					if !_rules[ruleYearNum]() {
						goto l1054
					}
				}
			l1056:
				{
					position1058, tokenIndex1058 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1058
					}
					goto l1059
				l1058:
					position, tokenIndex = position1058, tokenIndex1058
				}
			l1059:
				if buffer[position] != rune(':') {
					goto l1054
				}
				position++
				{
					position1060, tokenIndex1060 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1060
					}
					goto l1061
				l1060:
					position, tokenIndex = position1060, tokenIndex1060
				}
			l1061:
				if !_rules[ruleNums]() {
					goto l1054
				}
			l1062:
				{
					position1063, tokenIndex1063 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1063
					}
					goto l1062
				l1063:
					position, tokenIndex = position1063, tokenIndex1063
				}
				add(ruleYearWithPage, position1055)
			}
			return true
		l1054:
			position, tokenIndex = position1054, tokenIndex1054
			return false
		},
		/* 122 YearWithParens <- <('(' (YearWithChar / YearNum) ')')> */
		func() bool {
			position1064, tokenIndex1064 := position, tokenIndex
			{
				position1065 := position
				if buffer[position] != rune('(') {
					goto l1064
				}
				position++
				{
					position1066, tokenIndex1066 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l1067
					}
					goto l1066
				l1067:
					position, tokenIndex = position1066, tokenIndex1066
					if !_rules[ruleYearNum]() {
						goto l1064
					}
				}
			l1066:
				if buffer[position] != rune(')') {
					goto l1064
				}
				position++
				add(ruleYearWithParens, position1065)
			}
			return true
		l1064:
			position, tokenIndex = position1064, tokenIndex1064
			return false
		},
		/* 123 YearWithChar <- <(YearNum LowerASCII)> */
		func() bool {
			position1068, tokenIndex1068 := position, tokenIndex
			{
				position1069 := position
				if !_rules[ruleYearNum]() {
					goto l1068
				}
				if !_rules[ruleLowerASCII]() {
					goto l1068
				}
				add(ruleYearWithChar, position1069)
			}
			return true
		l1068:
			position, tokenIndex = position1068, tokenIndex1068
			return false
		},
		/* 124 YearNum <- <(('1' / '2') ('0' / '7' / '8' / '9') Nums (Nums / '?') '?'*)> */
		func() bool {
			position1070, tokenIndex1070 := position, tokenIndex
			{
				position1071 := position
				{
					position1072, tokenIndex1072 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l1073
					}
					position++
					goto l1072
				l1073:
					position, tokenIndex = position1072, tokenIndex1072
					if buffer[position] != rune('2') {
						goto l1070
					}
					position++
				}
			l1072:
				{
					position1074, tokenIndex1074 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l1075
					}
					position++
					goto l1074
				l1075:
					position, tokenIndex = position1074, tokenIndex1074
					if buffer[position] != rune('7') {
						goto l1076
					}
					position++
					goto l1074
				l1076:
					position, tokenIndex = position1074, tokenIndex1074
					if buffer[position] != rune('8') {
						goto l1077
					}
					position++
					goto l1074
				l1077:
					position, tokenIndex = position1074, tokenIndex1074
					if buffer[position] != rune('9') {
						goto l1070
					}
					position++
				}
			l1074:
				if !_rules[ruleNums]() {
					goto l1070
				}
				{
					position1078, tokenIndex1078 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1079
					}
					goto l1078
				l1079:
					position, tokenIndex = position1078, tokenIndex1078
					if buffer[position] != rune('?') {
						goto l1070
					}
					position++
				}
			l1078:
			l1080:
				{
					position1081, tokenIndex1081 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l1081
					}
					position++
					goto l1080
				l1081:
					position, tokenIndex = position1081, tokenIndex1081
				}
				add(ruleYearNum, position1071)
			}
			return true
		l1070:
			position, tokenIndex = position1070, tokenIndex1070
			return false
		},
		/* 125 NameUpperChar <- <(UpperChar / UpperCharExtended)> */
		func() bool {
			position1082, tokenIndex1082 := position, tokenIndex
			{
				position1083 := position
				{
					position1084, tokenIndex1084 := position, tokenIndex
					if !_rules[ruleUpperChar]() {
						goto l1085
					}
					goto l1084
				l1085:
					position, tokenIndex = position1084, tokenIndex1084
					if !_rules[ruleUpperCharExtended]() {
						goto l1082
					}
				}
			l1084:
				add(ruleNameUpperChar, position1083)
			}
			return true
		l1082:
			position, tokenIndex = position1082, tokenIndex1082
			return false
		},
		/* 126 UpperCharExtended <- <('Æ' / 'Œ' / 'Ö')> */
		func() bool {
			position1086, tokenIndex1086 := position, tokenIndex
			{
				position1087 := position
				{
					position1088, tokenIndex1088 := position, tokenIndex
					if buffer[position] != rune('Æ') {
						goto l1089
					}
					position++
					goto l1088
				l1089:
					position, tokenIndex = position1088, tokenIndex1088
					if buffer[position] != rune('Œ') {
						goto l1090
					}
					position++
					goto l1088
				l1090:
					position, tokenIndex = position1088, tokenIndex1088
					if buffer[position] != rune('Ö') {
						goto l1086
					}
					position++
				}
			l1088:
				add(ruleUpperCharExtended, position1087)
			}
			return true
		l1086:
			position, tokenIndex = position1086, tokenIndex1086
			return false
		},
		/* 127 UpperChar <- <UpperASCII> */
		func() bool {
			position1091, tokenIndex1091 := position, tokenIndex
			{
				position1092 := position
				if !_rules[ruleUpperASCII]() {
					goto l1091
				}
				add(ruleUpperChar, position1092)
			}
			return true
		l1091:
			position, tokenIndex = position1091, tokenIndex1091
			return false
		},
		/* 128 NameLowerChar <- <(LowerChar / LowerCharExtended / MiscodedChar)> */
		func() bool {
			position1093, tokenIndex1093 := position, tokenIndex
			{
				position1094 := position
				{
					position1095, tokenIndex1095 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l1096
					}
					goto l1095
				l1096:
					position, tokenIndex = position1095, tokenIndex1095
					if !_rules[ruleLowerCharExtended]() {
						goto l1097
					}
					goto l1095
				l1097:
					position, tokenIndex = position1095, tokenIndex1095
					if !_rules[ruleMiscodedChar]() {
						goto l1093
					}
				}
			l1095:
				add(ruleNameLowerChar, position1094)
			}
			return true
		l1093:
			position, tokenIndex = position1093, tokenIndex1093
			return false
		},
		/* 129 MiscodedChar <- <'�'> */
		func() bool {
			position1098, tokenIndex1098 := position, tokenIndex
			{
				position1099 := position
				if buffer[position] != rune('�') {
					goto l1098
				}
				position++
				add(ruleMiscodedChar, position1099)
			}
			return true
		l1098:
			position, tokenIndex = position1098, tokenIndex1098
			return false
		},
		/* 130 LowerCharExtended <- <('æ' / 'œ' / 'à' / 'â' / 'å' / 'ã' / 'ä' / 'á' / 'ç' / 'č' / 'é' / 'è' / 'ë' / 'í' / 'ì' / 'ï' / 'ň' / 'ñ' / 'ñ' / 'ó' / 'ò' / 'ô' / 'ø' / 'õ' / 'ö' / 'ú' / 'û' / 'ù' / 'ü' / 'ŕ' / 'ř' / 'ŗ' / 'ſ' / 'š' / 'š' / 'ş' / 'ß' / 'ž')> */
		func() bool {
			position1100, tokenIndex1100 := position, tokenIndex
			{
				position1101 := position
				{
					position1102, tokenIndex1102 := position, tokenIndex
					if buffer[position] != rune('æ') {
						goto l1103
					}
					position++
					goto l1102
				l1103:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('œ') {
						goto l1104
					}
					position++
					goto l1102
				l1104:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('à') {
						goto l1105
					}
					position++
					goto l1102
				l1105:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('â') {
						goto l1106
					}
					position++
					goto l1102
				l1106:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('å') {
						goto l1107
					}
					position++
					goto l1102
				l1107:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ã') {
						goto l1108
					}
					position++
					goto l1102
				l1108:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ä') {
						goto l1109
					}
					position++
					goto l1102
				l1109:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('á') {
						goto l1110
					}
					position++
					goto l1102
				l1110:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ç') {
						goto l1111
					}
					position++
					goto l1102
				l1111:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('č') {
						goto l1112
					}
					position++
					goto l1102
				l1112:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('é') {
						goto l1113
					}
					position++
					goto l1102
				l1113:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('è') {
						goto l1114
					}
					position++
					goto l1102
				l1114:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ë') {
						goto l1115
					}
					position++
					goto l1102
				l1115:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('í') {
						goto l1116
					}
					position++
					goto l1102
				l1116:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ì') {
						goto l1117
					}
					position++
					goto l1102
				l1117:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ï') {
						goto l1118
					}
					position++
					goto l1102
				l1118:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ň') {
						goto l1119
					}
					position++
					goto l1102
				l1119:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ñ') {
						goto l1120
					}
					position++
					goto l1102
				l1120:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ñ') {
						goto l1121
					}
					position++
					goto l1102
				l1121:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ó') {
						goto l1122
					}
					position++
					goto l1102
				l1122:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ò') {
						goto l1123
					}
					position++
					goto l1102
				l1123:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ô') {
						goto l1124
					}
					position++
					goto l1102
				l1124:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ø') {
						goto l1125
					}
					position++
					goto l1102
				l1125:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('õ') {
						goto l1126
					}
					position++
					goto l1102
				l1126:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ö') {
						goto l1127
					}
					position++
					goto l1102
				l1127:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ú') {
						goto l1128
					}
					position++
					goto l1102
				l1128:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('û') {
						goto l1129
					}
					position++
					goto l1102
				l1129:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ù') {
						goto l1130
					}
					position++
					goto l1102
				l1130:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ü') {
						goto l1131
					}
					position++
					goto l1102
				l1131:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ŕ') {
						goto l1132
					}
					position++
					goto l1102
				l1132:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ř') {
						goto l1133
					}
					position++
					goto l1102
				l1133:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ŗ') {
						goto l1134
					}
					position++
					goto l1102
				l1134:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ſ') {
						goto l1135
					}
					position++
					goto l1102
				l1135:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('š') {
						goto l1136
					}
					position++
					goto l1102
				l1136:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('š') {
						goto l1137
					}
					position++
					goto l1102
				l1137:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ş') {
						goto l1138
					}
					position++
					goto l1102
				l1138:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ß') {
						goto l1139
					}
					position++
					goto l1102
				l1139:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('ž') {
						goto l1100
					}
					position++
				}
			l1102:
				add(ruleLowerCharExtended, position1101)
			}
			return true
		l1100:
			position, tokenIndex = position1100, tokenIndex1100
			return false
		},
		/* 131 LowerChar <- <LowerASCII> */
		func() bool {
			position1140, tokenIndex1140 := position, tokenIndex
			{
				position1141 := position
				if !_rules[ruleLowerASCII]() {
					goto l1140
				}
				add(ruleLowerChar, position1141)
			}
			return true
		l1140:
			position, tokenIndex = position1140, tokenIndex1140
			return false
		},
		/* 132 SpaceCharEOI <- <(_ / !.)> */
		func() bool {
			position1142, tokenIndex1142 := position, tokenIndex
			{
				position1143 := position
				{
					position1144, tokenIndex1144 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1145
					}
					goto l1144
				l1145:
					position, tokenIndex = position1144, tokenIndex1144
					{
						position1146, tokenIndex1146 := position, tokenIndex
						if !matchDot() {
							goto l1146
						}
						goto l1142
					l1146:
						position, tokenIndex = position1146, tokenIndex1146
					}
				}
			l1144:
				add(ruleSpaceCharEOI, position1143)
			}
			return true
		l1142:
			position, tokenIndex = position1142, tokenIndex1142
			return false
		},
		/* 133 Nums <- <[0-9]> */
		func() bool {
			position1147, tokenIndex1147 := position, tokenIndex
			{
				position1148 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l1147
				}
				position++
				add(ruleNums, position1148)
			}
			return true
		l1147:
			position, tokenIndex = position1147, tokenIndex1147
			return false
		},
		/* 134 LowerGreek <- <[α-ω]> */
		func() bool {
			position1149, tokenIndex1149 := position, tokenIndex
			{
				position1150 := position
				if c := buffer[position]; c < rune('α') || c > rune('ω') {
					goto l1149
				}
				position++
				add(ruleLowerGreek, position1150)
			}
			return true
		l1149:
			position, tokenIndex = position1149, tokenIndex1149
			return false
		},
		/* 135 LowerASCII <- <[a-z]> */
		func() bool {
			position1151, tokenIndex1151 := position, tokenIndex
			{
				position1152 := position
				if c := buffer[position]; c < rune('a') || c > rune('z') {
					goto l1151
				}
				position++
				add(ruleLowerASCII, position1152)
			}
			return true
		l1151:
			position, tokenIndex = position1151, tokenIndex1151
			return false
		},
		/* 136 UpperASCII <- <[A-Z]> */
		func() bool {
			position1153, tokenIndex1153 := position, tokenIndex
			{
				position1154 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l1153
				}
				position++
				add(ruleUpperASCII, position1154)
			}
			return true
		l1153:
			position, tokenIndex = position1153, tokenIndex1153
			return false
		},
		/* 137 Apostrophe <- <(ApostrOther / ApostrASCII)> */
		func() bool {
			position1155, tokenIndex1155 := position, tokenIndex
			{
				position1156 := position
				{
					position1157, tokenIndex1157 := position, tokenIndex
					if !_rules[ruleApostrOther]() {
						goto l1158
					}
					goto l1157
				l1158:
					position, tokenIndex = position1157, tokenIndex1157
					if !_rules[ruleApostrASCII]() {
						goto l1155
					}
				}
			l1157:
				add(ruleApostrophe, position1156)
			}
			return true
		l1155:
			position, tokenIndex = position1155, tokenIndex1155
			return false
		},
		/* 138 ApostrASCII <- <'\''> */
		func() bool {
			position1159, tokenIndex1159 := position, tokenIndex
			{
				position1160 := position
				if buffer[position] != rune('\'') {
					goto l1159
				}
				position++
				add(ruleApostrASCII, position1160)
			}
			return true
		l1159:
			position, tokenIndex = position1159, tokenIndex1159
			return false
		},
		/* 139 ApostrOther <- <('‘' / '’' / '`' / '´')> */
		func() bool {
			position1161, tokenIndex1161 := position, tokenIndex
			{
				position1162 := position
				{
					position1163, tokenIndex1163 := position, tokenIndex
					if buffer[position] != rune('‘') {
						goto l1164
					}
					position++
					goto l1163
				l1164:
					position, tokenIndex = position1163, tokenIndex1163
					if buffer[position] != rune('’') {
						goto l1165
					}
					position++
					goto l1163
				l1165:
					position, tokenIndex = position1163, tokenIndex1163
					if buffer[position] != rune('`') {
						goto l1166
					}
					position++
					goto l1163
				l1166:
					position, tokenIndex = position1163, tokenIndex1163
					if buffer[position] != rune('´') {
						goto l1161
					}
					position++
				}
			l1163:
				add(ruleApostrOther, position1162)
			}
			return true
		l1161:
			position, tokenIndex = position1161, tokenIndex1161
			return false
		},
		/* 140 Dash <- <'-'> */
		func() bool {
			position1167, tokenIndex1167 := position, tokenIndex
			{
				position1168 := position
				if buffer[position] != rune('-') {
					goto l1167
				}
				position++
				add(ruleDash, position1168)
			}
			return true
		l1167:
			position, tokenIndex = position1167, tokenIndex1167
			return false
		},
		/* 141 Slash <- <'/'> */
		func() bool {
			position1169, tokenIndex1169 := position, tokenIndex
			{
				position1170 := position
				if buffer[position] != rune('/') {
					goto l1169
				}
				position++
				add(ruleSlash, position1170)
			}
			return true
		l1169:
			position, tokenIndex = position1169, tokenIndex1169
			return false
		},
		/* 142 _ <- <(MultipleSpace / SingleSpace)> */
		func() bool {
			position1171, tokenIndex1171 := position, tokenIndex
			{
				position1172 := position
				{
					position1173, tokenIndex1173 := position, tokenIndex
					if !_rules[ruleMultipleSpace]() {
						goto l1174
					}
					goto l1173
				l1174:
					position, tokenIndex = position1173, tokenIndex1173
					if !_rules[ruleSingleSpace]() {
						goto l1171
					}
				}
			l1173:
				add(rule_, position1172)
			}
			return true
		l1171:
			position, tokenIndex = position1171, tokenIndex1171
			return false
		},
		/* 143 MultipleSpace <- <(SingleSpace SingleSpace+)> */
		func() bool {
			position1175, tokenIndex1175 := position, tokenIndex
			{
				position1176 := position
				if !_rules[ruleSingleSpace]() {
					goto l1175
				}
				if !_rules[ruleSingleSpace]() {
					goto l1175
				}
			l1177:
				{
					position1178, tokenIndex1178 := position, tokenIndex
					if !_rules[ruleSingleSpace]() {
						goto l1178
					}
					goto l1177
				l1178:
					position, tokenIndex = position1178, tokenIndex1178
				}
				add(ruleMultipleSpace, position1176)
			}
			return true
		l1175:
			position, tokenIndex = position1175, tokenIndex1175
			return false
		},
		/* 144 SingleSpace <- <(' ' / OtherSpace)> */
		func() bool {
			position1179, tokenIndex1179 := position, tokenIndex
			{
				position1180 := position
				{
					position1181, tokenIndex1181 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l1182
					}
					position++
					goto l1181
				l1182:
					position, tokenIndex = position1181, tokenIndex1181
					if !_rules[ruleOtherSpace]() {
						goto l1179
					}
				}
			l1181:
				add(ruleSingleSpace, position1180)
			}
			return true
		l1179:
			position, tokenIndex = position1179, tokenIndex1179
			return false
		},
		/* 145 OtherSpace <- <('\u3000' / '\u00a0' / '\t' / '\r' / '\n' / '\f' / '\v')> */
		func() bool {
			position1183, tokenIndex1183 := position, tokenIndex
			{
				position1184 := position
				{
					position1185, tokenIndex1185 := position, tokenIndex
					if buffer[position] != rune('\u3000') {
						goto l1186
					}
					position++
					goto l1185
				l1186:
					position, tokenIndex = position1185, tokenIndex1185
					if buffer[position] != rune('\u00a0') {
						goto l1187
					}
					position++
					goto l1185
				l1187:
					position, tokenIndex = position1185, tokenIndex1185
					if buffer[position] != rune('\t') {
						goto l1188
					}
					position++
					goto l1185
				l1188:
					position, tokenIndex = position1185, tokenIndex1185
					if buffer[position] != rune('\r') {
						goto l1189
					}
					position++
					goto l1185
				l1189:
					position, tokenIndex = position1185, tokenIndex1185
					if buffer[position] != rune('\n') {
						goto l1190
					}
					position++
					goto l1185
				l1190:
					position, tokenIndex = position1185, tokenIndex1185
					if buffer[position] != rune('\f') {
						goto l1191
					}
					position++
					goto l1185
				l1191:
					position, tokenIndex = position1185, tokenIndex1185
					if buffer[position] != rune('\v') {
						goto l1183
					}
					position++
				}
			l1185:
				add(ruleOtherSpace, position1184)
			}
			return true
		l1183:
			position, tokenIndex = position1183, tokenIndex1183
			return false
		},
		/* 146 END <- <!.> */
		func() bool {
			position1192, tokenIndex1192 := position, tokenIndex
			{
				position1193 := position
				{
					position1194, tokenIndex1194 := position, tokenIndex
					if !matchDot() {
						goto l1194
					}
					goto l1192
				l1194:
					position, tokenIndex = position1194, tokenIndex1194
				}
				add(ruleEND, position1193)
			}
			return true
		l1192:
			position, tokenIndex = position1192, tokenIndex1192
			return false
		},
	}
	p.rules = _rules
	return nil
}
