package parser

// Code generated by peg grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleSciName
	ruleTail
	ruleName
	ruleHybridFormula
	ruleHybridFormulaFull
	ruleHybridFormulaPart
	ruleNamedHybrid
	ruleNamedSpeciesHybrid
	ruleNamedGenusHybrid
	ruleGraftChimeraFormula
	ruleGraftChimeraFormulaFull
	ruleGraftChimeraFormulaPart
	ruleNamedGenusGraftChimera
	ruleCandidatusName
	ruleCandidatus
	ruleSingleName
	ruleNameUninomial
	ruleNameApprox
	ruleNameComp
	ruleNameSpecies
	ruleGenusWord
	ruleInfraspGroup
	ruleInfraspEpithet
	ruleCultivarWordGroup
	ruleCultivar
	ruleRankCultivar
	ruleNotHybridChar
	ruleCultivarRecursive
	ruleCultivarApostrophe
	ruleSpeciesEpithet
	ruleComparison
	ruleRank
	ruleRankNotho
	ruleRankOtherUncommon
	ruleRankOther
	ruleRankVar
	ruleRankForma
	ruleRankSsp
	ruleRankAgamo
	ruleSubgenusOrSuperspecies
	ruleSubgenus
	ruleSubgenus2
	ruleSubgenus1
	ruleUninomialCombo
	ruleUninomialCombo1
	ruleUninomialCombo2
	ruleRankUninomial
	ruleRankUninomialPlain
	ruleRankUninomialNotho
	ruleUninomial
	ruleUninomialWord
	ruleAbbrSubgenus
	ruleAbbrGenus
	ruleCapWord
	ruleCapWord1
	ruleCapWordWithDash
	ruleUpperAfterDash
	ruleLowerAfterDash
	ruleTwoLetterGenus
	ruleWord
	ruleWord1
	ruleWordStartsWithDigit
	ruleWord2
	ruleWordApostr
	ruleWord4
	ruleMultiDashedWord
	ruleHybridChar
	ruleGraftChimeraChar
	ruleApproxNameIgnored
	ruleApproximation
	ruleAuthorship
	ruleAuthorshipCombo
	ruleOriginalAuthorship
	ruleOriginalAuthorshipComb
	ruleCombinationAuthorship
	ruleBasionymAuthorshipMissingParens
	ruleMissingParensStart
	ruleMissingParensEnd
	ruleBasionymAuthorshipYearMisformed
	ruleBasionymAuthorship
	ruleBasionymAuthorship1
	ruleBasionymAuthorship2Parens
	ruleAuthorsGroup
	ruleAuthorsTeam
	ruleAuthorSep
	ruleAuthorSep1
	ruleAuthorSep2
	ruleAuthorSepSpanish
	ruleAuthorEx
	ruleAuthorEmend
	ruleAuthor
	ruleAuthor0
	ruleAuthor1
	ruleAuthor2
	ruleUnknownAuthor
	ruleAuthorWord
	ruleAuthorEtAl
	ruleAuthorWord2
	ruleAuthorWord3
	ruleAuthorDashInitials
	ruleAuthorWordSoft
	ruleCapAuthorWord
	ruleAllCapsAuthorWord
	ruleFilius
	ruleFiliusF
	ruleFiliusFNoSpace
	ruleAuthorSuffix
	ruleAuthorPrefixGlued
	ruleAuthorPrefix
	ruleAuthorPrefix2
	ruleAuthorPrefix1
	ruleAuthorUpperChar
	ruleAuthorLowerChar
	ruleYear
	ruleYearRange
	ruleYearWithDot
	ruleYearApprox
	ruleYearWithPage
	ruleYearWithParens
	ruleYearWithChar
	ruleYearNum
	ruleNameUpperChar
	ruleUpperCharExtended
	ruleUpperChar
	ruleNameLowerChar
	ruleMiscodedChar
	ruleLowerCharExtended
	ruleLowerChar
	ruleSpaceCharEOI
	ruleNums
	ruleLowerGreek
	ruleLowerASCII
	ruleUpperASCII
	ruleApostrophe
	ruleApostrASCII
	ruleApostrOther
	ruleDash
	ruleSlash
	rule_
	ruleMultipleSpace
	ruleSingleSpace
	ruleOtherSpace
	ruleEND
)

var rul3s = [...]string{
	"Unknown",
	"SciName",
	"Tail",
	"Name",
	"HybridFormula",
	"HybridFormulaFull",
	"HybridFormulaPart",
	"NamedHybrid",
	"NamedSpeciesHybrid",
	"NamedGenusHybrid",
	"GraftChimeraFormula",
	"GraftChimeraFormulaFull",
	"GraftChimeraFormulaPart",
	"NamedGenusGraftChimera",
	"CandidatusName",
	"Candidatus",
	"SingleName",
	"NameUninomial",
	"NameApprox",
	"NameComp",
	"NameSpecies",
	"GenusWord",
	"InfraspGroup",
	"InfraspEpithet",
	"CultivarWordGroup",
	"Cultivar",
	"RankCultivar",
	"NotHybridChar",
	"CultivarRecursive",
	"CultivarApostrophe",
	"SpeciesEpithet",
	"Comparison",
	"Rank",
	"RankNotho",
	"RankOtherUncommon",
	"RankOther",
	"RankVar",
	"RankForma",
	"RankSsp",
	"RankAgamo",
	"SubgenusOrSuperspecies",
	"Subgenus",
	"Subgenus2",
	"Subgenus1",
	"UninomialCombo",
	"UninomialCombo1",
	"UninomialCombo2",
	"RankUninomial",
	"RankUninomialPlain",
	"RankUninomialNotho",
	"Uninomial",
	"UninomialWord",
	"AbbrSubgenus",
	"AbbrGenus",
	"CapWord",
	"CapWord1",
	"CapWordWithDash",
	"UpperAfterDash",
	"LowerAfterDash",
	"TwoLetterGenus",
	"Word",
	"Word1",
	"WordStartsWithDigit",
	"Word2",
	"WordApostr",
	"Word4",
	"MultiDashedWord",
	"HybridChar",
	"GraftChimeraChar",
	"ApproxNameIgnored",
	"Approximation",
	"Authorship",
	"AuthorshipCombo",
	"OriginalAuthorship",
	"OriginalAuthorshipComb",
	"CombinationAuthorship",
	"BasionymAuthorshipMissingParens",
	"MissingParensStart",
	"MissingParensEnd",
	"BasionymAuthorshipYearMisformed",
	"BasionymAuthorship",
	"BasionymAuthorship1",
	"BasionymAuthorship2Parens",
	"AuthorsGroup",
	"AuthorsTeam",
	"AuthorSep",
	"AuthorSep1",
	"AuthorSep2",
	"AuthorSepSpanish",
	"AuthorEx",
	"AuthorEmend",
	"Author",
	"Author0",
	"Author1",
	"Author2",
	"UnknownAuthor",
	"AuthorWord",
	"AuthorEtAl",
	"AuthorWord2",
	"AuthorWord3",
	"AuthorDashInitials",
	"AuthorWordSoft",
	"CapAuthorWord",
	"AllCapsAuthorWord",
	"Filius",
	"FiliusF",
	"FiliusFNoSpace",
	"AuthorSuffix",
	"AuthorPrefixGlued",
	"AuthorPrefix",
	"AuthorPrefix2",
	"AuthorPrefix1",
	"AuthorUpperChar",
	"AuthorLowerChar",
	"Year",
	"YearRange",
	"YearWithDot",
	"YearApprox",
	"YearWithPage",
	"YearWithParens",
	"YearWithChar",
	"YearNum",
	"NameUpperChar",
	"UpperCharExtended",
	"UpperChar",
	"NameLowerChar",
	"MiscodedChar",
	"LowerCharExtended",
	"LowerChar",
	"SpaceCharEOI",
	"Nums",
	"LowerGreek",
	"LowerASCII",
	"UpperASCII",
	"Apostrophe",
	"ApostrASCII",
	"ApostrOther",
	"Dash",
	"Slash",
	"_",
	"MultipleSpace",
	"SingleSpace",
	"OtherSpace",
	"END",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Engine struct {
	baseEngine

	Buffer string
	buffer []rune
	rules  [144]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Engine) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Engine) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Engine
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Engine) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Engine) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Engine) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Engine) error {
	return func(p *Engine) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Engine) error {
	return func(p *Engine) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Engine) Init(options ...func(*Engine) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 SciName <- <(_? Name Tail END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[rule_]() {
						goto l2
					}
					goto l3
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
			l3:
				if !_rules[ruleName]() {
					goto l0
				}
				if !_rules[ruleTail]() {
					goto l0
				}
				if !_rules[ruleEND]() {
					goto l0
				}
				add(ruleSciName, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Tail <- <((_ / ';' / ',') .*)?> */
		func() bool {
			{
				position5 := position
				{
					position6, tokenIndex6 := position, tokenIndex
					{
						position8, tokenIndex8 := position, tokenIndex
						if !_rules[rule_]() {
							goto l9
						}
						goto l8
					l9:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(';') {
							goto l10
						}
						position++
						goto l8
					l10:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(',') {
							goto l6
						}
						position++
					}
				l8:
				l11:
					{
						position12, tokenIndex12 := position, tokenIndex
						if !matchDot() {
							goto l12
						}
						goto l11
					l12:
						position, tokenIndex = position12, tokenIndex12
					}
					goto l7
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
			l7:
				add(ruleTail, position5)
			}
			return true
		},
		/* 2 Name <- <(NamedGenusGraftChimera / GraftChimeraFormula / NamedHybrid / HybridFormula / CandidatusName / SingleName)> */
		func() bool {
			position13, tokenIndex13 := position, tokenIndex
			{
				position14 := position
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleNamedGenusGraftChimera]() {
						goto l16
					}
					goto l15
				l16:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleGraftChimeraFormula]() {
						goto l17
					}
					goto l15
				l17:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleNamedHybrid]() {
						goto l18
					}
					goto l15
				l18:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleHybridFormula]() {
						goto l19
					}
					goto l15
				l19:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleCandidatusName]() {
						goto l20
					}
					goto l15
				l20:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleSingleName]() {
						goto l13
					}
				}
			l15:
				add(ruleName, position14)
			}
			return true
		l13:
			position, tokenIndex = position13, tokenIndex13
			return false
		},
		/* 3 HybridFormula <- <(SingleName (_ (HybridFormulaPart / HybridFormulaFull))+)> */
		func() bool {
			position21, tokenIndex21 := position, tokenIndex
			{
				position22 := position
				if !_rules[ruleSingleName]() {
					goto l21
				}
				if !_rules[rule_]() {
					goto l21
				}
				{
					position25, tokenIndex25 := position, tokenIndex
					if !_rules[ruleHybridFormulaPart]() {
						goto l26
					}
					goto l25
				l26:
					position, tokenIndex = position25, tokenIndex25
					if !_rules[ruleHybridFormulaFull]() {
						goto l21
					}
				}
			l25:
			l23:
				{
					position24, tokenIndex24 := position, tokenIndex
					if !_rules[rule_]() {
						goto l24
					}
					{
						position27, tokenIndex27 := position, tokenIndex
						if !_rules[ruleHybridFormulaPart]() {
							goto l28
						}
						goto l27
					l28:
						position, tokenIndex = position27, tokenIndex27
						if !_rules[ruleHybridFormulaFull]() {
							goto l24
						}
					}
				l27:
					goto l23
				l24:
					position, tokenIndex = position24, tokenIndex24
				}
				add(ruleHybridFormula, position22)
			}
			return true
		l21:
			position, tokenIndex = position21, tokenIndex21
			return false
		},
		/* 4 HybridFormulaFull <- <(HybridChar (_ SingleName)?)> */
		func() bool {
			position29, tokenIndex29 := position, tokenIndex
			{
				position30 := position
				if !_rules[ruleHybridChar]() {
					goto l29
				}
				{
					position31, tokenIndex31 := position, tokenIndex
					if !_rules[rule_]() {
						goto l31
					}
					if !_rules[ruleSingleName]() {
						goto l31
					}
					goto l32
				l31:
					position, tokenIndex = position31, tokenIndex31
				}
			l32:
				add(ruleHybridFormulaFull, position30)
			}
			return true
		l29:
			position, tokenIndex = position29, tokenIndex29
			return false
		},
		/* 5 HybridFormulaPart <- <(HybridChar _ SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position33, tokenIndex33 := position, tokenIndex
			{
				position34 := position
				if !_rules[ruleHybridChar]() {
					goto l33
				}
				if !_rules[rule_]() {
					goto l33
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l33
				}
				{
					position35, tokenIndex35 := position, tokenIndex
					if !_rules[rule_]() {
						goto l35
					}
					if !_rules[ruleInfraspGroup]() {
						goto l35
					}
					goto l36
				l35:
					position, tokenIndex = position35, tokenIndex35
				}
			l36:
				add(ruleHybridFormulaPart, position34)
			}
			return true
		l33:
			position, tokenIndex = position33, tokenIndex33
			return false
		},
		/* 6 NamedHybrid <- <(NamedGenusHybrid / NamedSpeciesHybrid)> */
		func() bool {
			position37, tokenIndex37 := position, tokenIndex
			{
				position38 := position
				{
					position39, tokenIndex39 := position, tokenIndex
					if !_rules[ruleNamedGenusHybrid]() {
						goto l40
					}
					goto l39
				l40:
					position, tokenIndex = position39, tokenIndex39
					if !_rules[ruleNamedSpeciesHybrid]() {
						goto l37
					}
				}
			l39:
				add(ruleNamedHybrid, position38)
			}
			return true
		l37:
			position, tokenIndex = position37, tokenIndex37
			return false
		},
		/* 7 NamedSpeciesHybrid <- <(GenusWord (_ Subgenus)? (_ Comparison)? _ HybridChar _? SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position41, tokenIndex41 := position, tokenIndex
			{
				position42 := position
				if !_rules[ruleGenusWord]() {
					goto l41
				}
				{
					position43, tokenIndex43 := position, tokenIndex
					if !_rules[rule_]() {
						goto l43
					}
					if !_rules[ruleSubgenus]() {
						goto l43
					}
					goto l44
				l43:
					position, tokenIndex = position43, tokenIndex43
				}
			l44:
				{
					position45, tokenIndex45 := position, tokenIndex
					if !_rules[rule_]() {
						goto l45
					}
					if !_rules[ruleComparison]() {
						goto l45
					}
					goto l46
				l45:
					position, tokenIndex = position45, tokenIndex45
				}
			l46:
				if !_rules[rule_]() {
					goto l41
				}
				if !_rules[ruleHybridChar]() {
					goto l41
				}
				{
					position47, tokenIndex47 := position, tokenIndex
					if !_rules[rule_]() {
						goto l47
					}
					goto l48
				l47:
					position, tokenIndex = position47, tokenIndex47
				}
			l48:
				if !_rules[ruleSpeciesEpithet]() {
					goto l41
				}
				{
					position49, tokenIndex49 := position, tokenIndex
					if !_rules[rule_]() {
						goto l49
					}
					if !_rules[ruleInfraspGroup]() {
						goto l49
					}
					goto l50
				l49:
					position, tokenIndex = position49, tokenIndex49
				}
			l50:
				add(ruleNamedSpeciesHybrid, position42)
			}
			return true
		l41:
			position, tokenIndex = position41, tokenIndex41
			return false
		},
		/* 8 NamedGenusHybrid <- <(HybridChar _? SingleName)> */
		func() bool {
			position51, tokenIndex51 := position, tokenIndex
			{
				position52 := position
				if !_rules[ruleHybridChar]() {
					goto l51
				}
				{
					position53, tokenIndex53 := position, tokenIndex
					if !_rules[rule_]() {
						goto l53
					}
					goto l54
				l53:
					position, tokenIndex = position53, tokenIndex53
				}
			l54:
				if !_rules[ruleSingleName]() {
					goto l51
				}
				add(ruleNamedGenusHybrid, position52)
			}
			return true
		l51:
			position, tokenIndex = position51, tokenIndex51
			return false
		},
		/* 9 GraftChimeraFormula <- <(SingleName (_ (GraftChimeraFormulaPart / GraftChimeraFormulaFull))+)> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				if !_rules[ruleSingleName]() {
					goto l55
				}
				if !_rules[rule_]() {
					goto l55
				}
				{
					position59, tokenIndex59 := position, tokenIndex
					if !_rules[ruleGraftChimeraFormulaPart]() {
						goto l60
					}
					goto l59
				l60:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleGraftChimeraFormulaFull]() {
						goto l55
					}
				}
			l59:
			l57:
				{
					position58, tokenIndex58 := position, tokenIndex
					if !_rules[rule_]() {
						goto l58
					}
					{
						position61, tokenIndex61 := position, tokenIndex
						if !_rules[ruleGraftChimeraFormulaPart]() {
							goto l62
						}
						goto l61
					l62:
						position, tokenIndex = position61, tokenIndex61
						if !_rules[ruleGraftChimeraFormulaFull]() {
							goto l58
						}
					}
				l61:
					goto l57
				l58:
					position, tokenIndex = position58, tokenIndex58
				}
				add(ruleGraftChimeraFormula, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
		/* 10 GraftChimeraFormulaFull <- <(GraftChimeraChar (_ SingleName)?)> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l63
				}
				{
					position65, tokenIndex65 := position, tokenIndex
					if !_rules[rule_]() {
						goto l65
					}
					if !_rules[ruleSingleName]() {
						goto l65
					}
					goto l66
				l65:
					position, tokenIndex = position65, tokenIndex65
				}
			l66:
				add(ruleGraftChimeraFormulaFull, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 11 GraftChimeraFormulaPart <- <(GraftChimeraChar _ SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position67, tokenIndex67 := position, tokenIndex
			{
				position68 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l67
				}
				if !_rules[rule_]() {
					goto l67
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l67
				}
				{
					position69, tokenIndex69 := position, tokenIndex
					if !_rules[rule_]() {
						goto l69
					}
					if !_rules[ruleInfraspGroup]() {
						goto l69
					}
					goto l70
				l69:
					position, tokenIndex = position69, tokenIndex69
				}
			l70:
				add(ruleGraftChimeraFormulaPart, position68)
			}
			return true
		l67:
			position, tokenIndex = position67, tokenIndex67
			return false
		},
		/* 12 NamedGenusGraftChimera <- <(GraftChimeraChar _? SingleName)> */
		func() bool {
			position71, tokenIndex71 := position, tokenIndex
			{
				position72 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l71
				}
				{
					position73, tokenIndex73 := position, tokenIndex
					if !_rules[rule_]() {
						goto l73
					}
					goto l74
				l73:
					position, tokenIndex = position73, tokenIndex73
				}
			l74:
				if !_rules[ruleSingleName]() {
					goto l71
				}
				add(ruleNamedGenusGraftChimera, position72)
			}
			return true
		l71:
			position, tokenIndex = position71, tokenIndex71
			return false
		},
		/* 13 CandidatusName <- <(Candidatus _ SingleName)> */
		func() bool {
			position75, tokenIndex75 := position, tokenIndex
			{
				position76 := position
				if !_rules[ruleCandidatus]() {
					goto l75
				}
				if !_rules[rule_]() {
					goto l75
				}
				if !_rules[ruleSingleName]() {
					goto l75
				}
				add(ruleCandidatusName, position76)
			}
			return true
		l75:
			position, tokenIndex = position75, tokenIndex75
			return false
		},
		/* 14 Candidatus <- <('C' 'a' 'n' 'd' 'i' 'd' 'a' 't' 'u' 's')> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				if buffer[position] != rune('C') {
					goto l77
				}
				position++
				if buffer[position] != rune('a') {
					goto l77
				}
				position++
				if buffer[position] != rune('n') {
					goto l77
				}
				position++
				if buffer[position] != rune('d') {
					goto l77
				}
				position++
				if buffer[position] != rune('i') {
					goto l77
				}
				position++
				if buffer[position] != rune('d') {
					goto l77
				}
				position++
				if buffer[position] != rune('a') {
					goto l77
				}
				position++
				if buffer[position] != rune('t') {
					goto l77
				}
				position++
				if buffer[position] != rune('u') {
					goto l77
				}
				position++
				if buffer[position] != rune('s') {
					goto l77
				}
				position++
				add(ruleCandidatus, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 15 SingleName <- <(NameComp / NameApprox / NameSpecies / NameUninomial)> */
		func() bool {
			position79, tokenIndex79 := position, tokenIndex
			{
				position80 := position
				{
					position81, tokenIndex81 := position, tokenIndex
					if !_rules[ruleNameComp]() {
						goto l82
					}
					goto l81
				l82:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameApprox]() {
						goto l83
					}
					goto l81
				l83:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameSpecies]() {
						goto l84
					}
					goto l81
				l84:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameUninomial]() {
						goto l79
					}
				}
			l81:
				add(ruleSingleName, position80)
			}
			return true
		l79:
			position, tokenIndex = position79, tokenIndex79
			return false
		},
		/* 16 NameUninomial <- <((UninomialCombo / Uninomial) (_ CultivarWordGroup)?)> */
		func() bool {
			position85, tokenIndex85 := position, tokenIndex
			{
				position86 := position
				{
					position87, tokenIndex87 := position, tokenIndex
					if !_rules[ruleUninomialCombo]() {
						goto l88
					}
					goto l87
				l88:
					position, tokenIndex = position87, tokenIndex87
					if !_rules[ruleUninomial]() {
						goto l85
					}
				}
			l87:
				{
					position89, tokenIndex89 := position, tokenIndex
					if !_rules[rule_]() {
						goto l89
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l89
					}
					goto l90
				l89:
					position, tokenIndex = position89, tokenIndex89
				}
			l90:
				add(ruleNameUninomial, position86)
			}
			return true
		l85:
			position, tokenIndex = position85, tokenIndex85
			return false
		},
		/* 17 NameApprox <- <(GenusWord (_ SpeciesEpithet)? _ Approximation ApproxNameIgnored)> */
		func() bool {
			position91, tokenIndex91 := position, tokenIndex
			{
				position92 := position
				if !_rules[ruleGenusWord]() {
					goto l91
				}
				{
					position93, tokenIndex93 := position, tokenIndex
					if !_rules[rule_]() {
						goto l93
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l93
					}
					goto l94
				l93:
					position, tokenIndex = position93, tokenIndex93
				}
			l94:
				if !_rules[rule_]() {
					goto l91
				}
				if !_rules[ruleApproximation]() {
					goto l91
				}
				if !_rules[ruleApproxNameIgnored]() {
					goto l91
				}
				add(ruleNameApprox, position92)
			}
			return true
		l91:
			position, tokenIndex = position91, tokenIndex91
			return false
		},
		/* 18 NameComp <- <(GenusWord _ Comparison (_ SpeciesEpithet)?)> */
		func() bool {
			position95, tokenIndex95 := position, tokenIndex
			{
				position96 := position
				if !_rules[ruleGenusWord]() {
					goto l95
				}
				if !_rules[rule_]() {
					goto l95
				}
				if !_rules[ruleComparison]() {
					goto l95
				}
				{
					position97, tokenIndex97 := position, tokenIndex
					if !_rules[rule_]() {
						goto l97
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l97
					}
					goto l98
				l97:
					position, tokenIndex = position97, tokenIndex97
				}
			l98:
				add(ruleNameComp, position96)
			}
			return true
		l95:
			position, tokenIndex = position95, tokenIndex95
			return false
		},
		/* 19 NameSpecies <- <(GenusWord (_? (Subgenus / SubgenusOrSuperspecies))? _ SpeciesEpithet (_ InfraspGroup)? (_ CultivarWordGroup)?)> */
		func() bool {
			position99, tokenIndex99 := position, tokenIndex
			{
				position100 := position
				if !_rules[ruleGenusWord]() {
					goto l99
				}
				{
					position101, tokenIndex101 := position, tokenIndex
					{
						position103, tokenIndex103 := position, tokenIndex
						if !_rules[rule_]() {
							goto l103
						}
						goto l104
					l103:
						position, tokenIndex = position103, tokenIndex103
					}
				l104:
					{
						position105, tokenIndex105 := position, tokenIndex
						if !_rules[ruleSubgenus]() {
							goto l106
						}
						goto l105
					l106:
						position, tokenIndex = position105, tokenIndex105
						if !_rules[ruleSubgenusOrSuperspecies]() {
							goto l101
						}
					}
				l105:
					goto l102
				l101:
					position, tokenIndex = position101, tokenIndex101
				}
			l102:
				if !_rules[rule_]() {
					goto l99
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l99
				}
				{
					position107, tokenIndex107 := position, tokenIndex
					if !_rules[rule_]() {
						goto l107
					}
					if !_rules[ruleInfraspGroup]() {
						goto l107
					}
					goto l108
				l107:
					position, tokenIndex = position107, tokenIndex107
				}
			l108:
				{
					position109, tokenIndex109 := position, tokenIndex
					if !_rules[rule_]() {
						goto l109
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l109
					}
					goto l110
				l109:
					position, tokenIndex = position109, tokenIndex109
				}
			l110:
				add(ruleNameSpecies, position100)
			}
			return true
		l99:
			position, tokenIndex = position99, tokenIndex99
			return false
		},
		/* 20 GenusWord <- <((AbbrGenus / UninomialWord) !(_ AuthorWord))> */
		func() bool {
			position111, tokenIndex111 := position, tokenIndex
			{
				position112 := position
				{
					position113, tokenIndex113 := position, tokenIndex
					if !_rules[ruleAbbrGenus]() {
						goto l114
					}
					goto l113
				l114:
					position, tokenIndex = position113, tokenIndex113
					if !_rules[ruleUninomialWord]() {
						goto l111
					}
				}
			l113:
				{
					position115, tokenIndex115 := position, tokenIndex
					if !_rules[rule_]() {
						goto l115
					}
					if !_rules[ruleAuthorWord]() {
						goto l115
					}
					goto l111
				l115:
					position, tokenIndex = position115, tokenIndex115
				}
				add(ruleGenusWord, position112)
			}
			return true
		l111:
			position, tokenIndex = position111, tokenIndex111
			return false
		},
		/* 21 InfraspGroup <- <(InfraspEpithet (_ InfraspEpithet)? (_ InfraspEpithet)?)> */
		func() bool {
			position116, tokenIndex116 := position, tokenIndex
			{
				position117 := position
				if !_rules[ruleInfraspEpithet]() {
					goto l116
				}
				{
					position118, tokenIndex118 := position, tokenIndex
					if !_rules[rule_]() {
						goto l118
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l118
					}
					goto l119
				l118:
					position, tokenIndex = position118, tokenIndex118
				}
			l119:
				{
					position120, tokenIndex120 := position, tokenIndex
					if !_rules[rule_]() {
						goto l120
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l120
					}
					goto l121
				l120:
					position, tokenIndex = position120, tokenIndex120
				}
			l121:
				add(ruleInfraspGroup, position117)
			}
			return true
		l116:
			position, tokenIndex = position116, tokenIndex116
			return false
		},
		/* 22 InfraspEpithet <- <((Rank _?)? !AuthorEx Word (_ Authorship)?)> */
		func() bool {
			position122, tokenIndex122 := position, tokenIndex
			{
				position123 := position
				{
					position124, tokenIndex124 := position, tokenIndex
					if !_rules[ruleRank]() {
						goto l124
					}
					{
						position126, tokenIndex126 := position, tokenIndex
						if !_rules[rule_]() {
							goto l126
						}
						goto l127
					l126:
						position, tokenIndex = position126, tokenIndex126
					}
				l127:
					goto l125
				l124:
					position, tokenIndex = position124, tokenIndex124
				}
			l125:
				{
					position128, tokenIndex128 := position, tokenIndex
					if !_rules[ruleAuthorEx]() {
						goto l128
					}
					goto l122
				l128:
					position, tokenIndex = position128, tokenIndex128
				}
				if !_rules[ruleWord]() {
					goto l122
				}
				{
					position129, tokenIndex129 := position, tokenIndex
					if !_rules[rule_]() {
						goto l129
					}
					if !_rules[ruleAuthorship]() {
						goto l129
					}
					goto l130
				l129:
					position, tokenIndex = position129, tokenIndex129
				}
			l130:
				add(ruleInfraspEpithet, position123)
			}
			return true
		l122:
			position, tokenIndex = position122, tokenIndex122
			return false
		},
		/* 23 CultivarWordGroup <- <(((RankCultivar _)? CultivarApostrophe CultivarRecursive CultivarApostrophe) / (RankCultivar _ Cultivar))> */
		func() bool {
			position131, tokenIndex131 := position, tokenIndex
			{
				position132 := position
				{
					position133, tokenIndex133 := position, tokenIndex
					{
						position135, tokenIndex135 := position, tokenIndex
						if !_rules[ruleRankCultivar]() {
							goto l135
						}
						if !_rules[rule_]() {
							goto l135
						}
						goto l136
					l135:
						position, tokenIndex = position135, tokenIndex135
					}
				l136:
					if !_rules[ruleCultivarApostrophe]() {
						goto l134
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l134
					}
					if !_rules[ruleCultivarApostrophe]() {
						goto l134
					}
					goto l133
				l134:
					position, tokenIndex = position133, tokenIndex133
					if !_rules[ruleRankCultivar]() {
						goto l131
					}
					if !_rules[rule_]() {
						goto l131
					}
					if !_rules[ruleCultivar]() {
						goto l131
					}
				}
			l133:
				add(ruleCultivarWordGroup, position132)
			}
			return true
		l131:
			position, tokenIndex = position131, tokenIndex131
			return false
		},
		/* 24 Cultivar <- <NotHybridChar+> */
		func() bool {
			position137, tokenIndex137 := position, tokenIndex
			{
				position138 := position
				if !_rules[ruleNotHybridChar]() {
					goto l137
				}
			l139:
				{
					position140, tokenIndex140 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l140
					}
					goto l139
				l140:
					position, tokenIndex = position140, tokenIndex140
				}
				add(ruleCultivar, position138)
			}
			return true
		l137:
			position, tokenIndex = position137, tokenIndex137
			return false
		},
		/* 25 RankCultivar <- <('c' 'v' '.'?)> */
		func() bool {
			position141, tokenIndex141 := position, tokenIndex
			{
				position142 := position
				if buffer[position] != rune('c') {
					goto l141
				}
				position++
				if buffer[position] != rune('v') {
					goto l141
				}
				position++
				{
					position143, tokenIndex143 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l143
					}
					position++
					goto l144
				l143:
					position, tokenIndex = position143, tokenIndex143
				}
			l144:
				add(ruleRankCultivar, position142)
			}
			return true
		l141:
			position, tokenIndex = position141, tokenIndex141
			return false
		},
		/* 26 NotHybridChar <- <(!(_ HybridChar) .)> */
		func() bool {
			position145, tokenIndex145 := position, tokenIndex
			{
				position146 := position
				{
					position147, tokenIndex147 := position, tokenIndex
					if !_rules[rule_]() {
						goto l147
					}
					if !_rules[ruleHybridChar]() {
						goto l147
					}
					goto l145
				l147:
					position, tokenIndex = position147, tokenIndex147
				}
				if !matchDot() {
					goto l145
				}
				add(ruleNotHybridChar, position146)
			}
			return true
		l145:
			position, tokenIndex = position145, tokenIndex145
			return false
		},
		/* 27 CultivarRecursive <- <((NotHybridChar CultivarRecursive) / &CultivarApostrophe)> */
		func() bool {
			position148, tokenIndex148 := position, tokenIndex
			{
				position149 := position
				{
					position150, tokenIndex150 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l151
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l151
					}
					goto l150
				l151:
					position, tokenIndex = position150, tokenIndex150
					{
						position152, tokenIndex152 := position, tokenIndex
						if !_rules[ruleCultivarApostrophe]() {
							goto l148
						}
						position, tokenIndex = position152, tokenIndex152
					}
				}
			l150:
				add(ruleCultivarRecursive, position149)
			}
			return true
		l148:
			position, tokenIndex = position148, tokenIndex148
			return false
		},
		/* 28 CultivarApostrophe <- <('\'' / '‘' / '’' / '"' / '“' / '”')> */
		func() bool {
			position153, tokenIndex153 := position, tokenIndex
			{
				position154 := position
				{
					position155, tokenIndex155 := position, tokenIndex
					if buffer[position] != rune('\'') {
						goto l156
					}
					position++
					goto l155
				l156:
					position, tokenIndex = position155, tokenIndex155
					if buffer[position] != rune('‘') {
						goto l157
					}
					position++
					goto l155
				l157:
					position, tokenIndex = position155, tokenIndex155
					if buffer[position] != rune('’') {
						goto l158
					}
					position++
					goto l155
				l158:
					position, tokenIndex = position155, tokenIndex155
					if buffer[position] != rune('"') {
						goto l159
					}
					position++
					goto l155
				l159:
					position, tokenIndex = position155, tokenIndex155
					if buffer[position] != rune('“') {
						goto l160
					}
					position++
					goto l155
				l160:
					position, tokenIndex = position155, tokenIndex155
					if buffer[position] != rune('”') {
						goto l153
					}
					position++
				}
			l155:
				add(ruleCultivarApostrophe, position154)
			}
			return true
		l153:
			position, tokenIndex = position153, tokenIndex153
			return false
		},
		/* 29 SpeciesEpithet <- <(!AuthorEx Word (_? Authorship)?)> */
		func() bool {
			position161, tokenIndex161 := position, tokenIndex
			{
				position162 := position
				{
					position163, tokenIndex163 := position, tokenIndex
					if !_rules[ruleAuthorEx]() {
						goto l163
					}
					goto l161
				l163:
					position, tokenIndex = position163, tokenIndex163
				}
				if !_rules[ruleWord]() {
					goto l161
				}
				{
					position164, tokenIndex164 := position, tokenIndex
					{
						position166, tokenIndex166 := position, tokenIndex
						if !_rules[rule_]() {
							goto l166
						}
						goto l167
					l166:
						position, tokenIndex = position166, tokenIndex166
					}
				l167:
					if !_rules[ruleAuthorship]() {
						goto l164
					}
					goto l165
				l164:
					position, tokenIndex = position164, tokenIndex164
				}
			l165:
				add(ruleSpeciesEpithet, position162)
			}
			return true
		l161:
			position, tokenIndex = position161, tokenIndex161
			return false
		},
		/* 30 Comparison <- <('c' 'f' '.'? &SpaceCharEOI)> */
		func() bool {
			position168, tokenIndex168 := position, tokenIndex
			{
				position169 := position
				if buffer[position] != rune('c') {
					goto l168
				}
				position++
				if buffer[position] != rune('f') {
					goto l168
				}
				position++
				{
					position170, tokenIndex170 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l170
					}
					position++
					goto l171
				l170:
					position, tokenIndex = position170, tokenIndex170
				}
			l171:
				{
					position172, tokenIndex172 := position, tokenIndex
					if !_rules[ruleSpaceCharEOI]() {
						goto l168
					}
					position, tokenIndex = position172, tokenIndex172
				}
				add(ruleComparison, position169)
			}
			return true
		l168:
			position, tokenIndex = position168, tokenIndex168
			return false
		},
		/* 31 Rank <- <((RankForma / RankVar / RankSsp / RankOther / RankOtherUncommon / RankAgamo / RankNotho) (_? LowerGreek ('.' / &SpaceCharEOI))?)> */
		func() bool {
			position173, tokenIndex173 := position, tokenIndex
			{
				position174 := position
				{
					position175, tokenIndex175 := position, tokenIndex
					if !_rules[ruleRankForma]() {
						goto l176
					}
					goto l175
				l176:
					position, tokenIndex = position175, tokenIndex175
					if !_rules[ruleRankVar]() {
						goto l177
					}
					goto l175
				l177:
					position, tokenIndex = position175, tokenIndex175
					if !_rules[ruleRankSsp]() {
						goto l178
					}
					goto l175
				l178:
					position, tokenIndex = position175, tokenIndex175
					if !_rules[ruleRankOther]() {
						goto l179
					}
					goto l175
				l179:
					position, tokenIndex = position175, tokenIndex175
					if !_rules[ruleRankOtherUncommon]() {
						goto l180
					}
					goto l175
				l180:
					position, tokenIndex = position175, tokenIndex175
					if !_rules[ruleRankAgamo]() {
						goto l181
					}
					goto l175
				l181:
					position, tokenIndex = position175, tokenIndex175
					if !_rules[ruleRankNotho]() {
						goto l173
					}
				}
			l175:
				{
					position182, tokenIndex182 := position, tokenIndex
					{
						position184, tokenIndex184 := position, tokenIndex
						if !_rules[rule_]() {
							goto l184
						}
						goto l185
					l184:
						position, tokenIndex = position184, tokenIndex184
					}
				l185:
					if !_rules[ruleLowerGreek]() {
						goto l182
					}
					{
						position186, tokenIndex186 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l187
						}
						position++
						goto l186
					l187:
						position, tokenIndex = position186, tokenIndex186
						{
							position188, tokenIndex188 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l182
							}
							position, tokenIndex = position188, tokenIndex188
						}
					}
				l186:
					goto l183
				l182:
					position, tokenIndex = position182, tokenIndex182
				}
			l183:
				add(ruleRank, position174)
			}
			return true
		l173:
			position, tokenIndex = position173, tokenIndex173
			return false
		},
		/* 32 RankNotho <- <((('n' 'o' 't' 'h' 'o' (('v' 'a' 'r') / ('f' 'o') / 'f' / ('s' 'u' 'b' 's' 'p') / ('s' 's' 'p') / ('s' 'p') / ('m' 'o' 'r' 't' 'h') / ('s' 'u' 'p' 's' 'p') / ('s' 'u'))) / ('n' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position189, tokenIndex189 := position, tokenIndex
			{
				position190 := position
				{
					position191, tokenIndex191 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l192
					}
					position++
					if buffer[position] != rune('o') {
						goto l192
					}
					position++
					if buffer[position] != rune('t') {
						goto l192
					}
					position++
					if buffer[position] != rune('h') {
						goto l192
					}
					position++
					if buffer[position] != rune('o') {
						goto l192
					}
					position++
					{
						position193, tokenIndex193 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l194
						}
						position++
						if buffer[position] != rune('a') {
							goto l194
						}
						position++
						if buffer[position] != rune('r') {
							goto l194
						}
						position++
						goto l193
					l194:
						position, tokenIndex = position193, tokenIndex193
						if buffer[position] != rune('f') {
							goto l195
						}
						position++
						if buffer[position] != rune('o') {
							goto l195
						}
						position++
						goto l193
					l195:
						position, tokenIndex = position193, tokenIndex193
						if buffer[position] != rune('f') {
							goto l196
						}
						position++
						goto l193
					l196:
						position, tokenIndex = position193, tokenIndex193
						if buffer[position] != rune('s') {
							goto l197
						}
						position++
						if buffer[position] != rune('u') {
							goto l197
						}
						position++
						if buffer[position] != rune('b') {
							goto l197
						}
						position++
						if buffer[position] != rune('s') {
							goto l197
						}
						position++
						if buffer[position] != rune('p') {
							goto l197
						}
						position++
						goto l193
					l197:
						position, tokenIndex = position193, tokenIndex193
						if buffer[position] != rune('s') {
							goto l198
						}
						position++
						if buffer[position] != rune('s') {
							goto l198
						}
						position++
						if buffer[position] != rune('p') {
							goto l198
						}
						position++
						goto l193
					l198:
						position, tokenIndex = position193, tokenIndex193
						if buffer[position] != rune('s') {
							goto l199
						}
						position++
						if buffer[position] != rune('p') {
							goto l199
						}
						position++
						goto l193
					l199:
						position, tokenIndex = position193, tokenIndex193
						if buffer[position] != rune('m') {
							goto l200
						}
						position++
						if buffer[position] != rune('o') {
							goto l200
						}
						position++
						if buffer[position] != rune('r') {
							goto l200
						}
						position++
						if buffer[position] != rune('t') {
							goto l200
						}
						position++
						if buffer[position] != rune('h') {
							goto l200
						}
						position++
						goto l193
					l200:
						position, tokenIndex = position193, tokenIndex193
						if buffer[position] != rune('s') {
							goto l201
						}
						position++
						if buffer[position] != rune('u') {
							goto l201
						}
						position++
						if buffer[position] != rune('p') {
							goto l201
						}
						position++
						if buffer[position] != rune('s') {
							goto l201
						}
						position++
						if buffer[position] != rune('p') {
							goto l201
						}
						position++
						goto l193
					l201:
						position, tokenIndex = position193, tokenIndex193
						if buffer[position] != rune('s') {
							goto l192
						}
						position++
						if buffer[position] != rune('u') {
							goto l192
						}
						position++
					}
				l193:
					goto l191
				l192:
					position, tokenIndex = position191, tokenIndex191
					if buffer[position] != rune('n') {
						goto l189
					}
					position++
					if buffer[position] != rune('v') {
						goto l189
					}
					position++
					if buffer[position] != rune('a') {
						goto l189
					}
					position++
					if buffer[position] != rune('r') {
						goto l189
					}
					position++
				}
			l191:
				{
					position202, tokenIndex202 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l203
					}
					position++
					goto l202
				l203:
					position, tokenIndex = position202, tokenIndex202
					{
						position204, tokenIndex204 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l189
						}
						position, tokenIndex = position204, tokenIndex204
					}
				}
			l202:
				add(ruleRankNotho, position190)
			}
			return true
		l189:
			position, tokenIndex = position189, tokenIndex189
			return false
		},
		/* 33 RankOtherUncommon <- <(('*' / ('n' 'a' 't' 'i' 'o') / ('n' 'a' 't' '.') / ('n' 'a' 't') / ('f' '.' 's' 'p') / 'α' / ('β' 'β') / 'β' / 'γ' / 'δ' / 'ε' / 'φ' / 'θ' / 'μ' / ('a' '.') / ('b' '.') / ('c' '.') / ('d' '.') / ('e' '.') / ('g' '.') / ('k' '.') / ('m' 'u' 't' '.')) &SpaceCharEOI)> */
		func() bool {
			position205, tokenIndex205 := position, tokenIndex
			{
				position206 := position
				{
					position207, tokenIndex207 := position, tokenIndex
					if buffer[position] != rune('*') {
						goto l208
					}
					position++
					goto l207
				l208:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('n') {
						goto l209
					}
					position++
					if buffer[position] != rune('a') {
						goto l209
					}
					position++
					if buffer[position] != rune('t') {
						goto l209
					}
					position++
					if buffer[position] != rune('i') {
						goto l209
					}
					position++
					if buffer[position] != rune('o') {
						goto l209
					}
					position++
					goto l207
				l209:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('n') {
						goto l210
					}
					position++
					if buffer[position] != rune('a') {
						goto l210
					}
					position++
					if buffer[position] != rune('t') {
						goto l210
					}
					position++
					if buffer[position] != rune('.') {
						goto l210
					}
					position++
					goto l207
				l210:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('n') {
						goto l211
					}
					position++
					if buffer[position] != rune('a') {
						goto l211
					}
					position++
					if buffer[position] != rune('t') {
						goto l211
					}
					position++
					goto l207
				l211:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('f') {
						goto l212
					}
					position++
					if buffer[position] != rune('.') {
						goto l212
					}
					position++
					if buffer[position] != rune('s') {
						goto l212
					}
					position++
					if buffer[position] != rune('p') {
						goto l212
					}
					position++
					goto l207
				l212:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('α') {
						goto l213
					}
					position++
					goto l207
				l213:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('β') {
						goto l214
					}
					position++
					if buffer[position] != rune('β') {
						goto l214
					}
					position++
					goto l207
				l214:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('β') {
						goto l215
					}
					position++
					goto l207
				l215:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('γ') {
						goto l216
					}
					position++
					goto l207
				l216:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('δ') {
						goto l217
					}
					position++
					goto l207
				l217:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('ε') {
						goto l218
					}
					position++
					goto l207
				l218:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('φ') {
						goto l219
					}
					position++
					goto l207
				l219:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('θ') {
						goto l220
					}
					position++
					goto l207
				l220:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('μ') {
						goto l221
					}
					position++
					goto l207
				l221:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('a') {
						goto l222
					}
					position++
					if buffer[position] != rune('.') {
						goto l222
					}
					position++
					goto l207
				l222:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('b') {
						goto l223
					}
					position++
					if buffer[position] != rune('.') {
						goto l223
					}
					position++
					goto l207
				l223:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('c') {
						goto l224
					}
					position++
					if buffer[position] != rune('.') {
						goto l224
					}
					position++
					goto l207
				l224:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('d') {
						goto l225
					}
					position++
					if buffer[position] != rune('.') {
						goto l225
					}
					position++
					goto l207
				l225:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('e') {
						goto l226
					}
					position++
					if buffer[position] != rune('.') {
						goto l226
					}
					position++
					goto l207
				l226:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('g') {
						goto l227
					}
					position++
					if buffer[position] != rune('.') {
						goto l227
					}
					position++
					goto l207
				l227:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('k') {
						goto l228
					}
					position++
					if buffer[position] != rune('.') {
						goto l228
					}
					position++
					goto l207
				l228:
					position, tokenIndex = position207, tokenIndex207
					if buffer[position] != rune('m') {
						goto l205
					}
					position++
					if buffer[position] != rune('u') {
						goto l205
					}
					position++
					if buffer[position] != rune('t') {
						goto l205
					}
					position++
					if buffer[position] != rune('.') {
						goto l205
					}
					position++
				}
			l207:
				{
					position229, tokenIndex229 := position, tokenIndex
					if !_rules[ruleSpaceCharEOI]() {
						goto l205
					}
					position, tokenIndex = position229, tokenIndex229
				}
				add(ruleRankOtherUncommon, position206)
			}
			return true
		l205:
			position, tokenIndex = position205, tokenIndex205
			return false
		},
		/* 34 RankOther <- <((('m' 'o' 'r' 'p' 'h') / ('c' 'o' 'n' 'v' 'a' 'r') / ('p' 's' 'e' 'u' 'd' 'o' 'v' 'a' 'r') / ('s' 'e' 'c' 't') / ('s' 'e' 'r') / ('s' 'u' 'b' 'v' 'a' 'r') / ('s' 'u' 'b' 'f') / ('r' 'a' 'c' 'e') / ('p' 'v') / ('p' 'a' 't' 'h' 'o' 'v' 'a' 'r') / ('a' 'b' '.' (_? ('n' '.'))?) / ('s' 't')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position230, tokenIndex230 := position, tokenIndex
			{
				position231 := position
				{
					position232, tokenIndex232 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l233
					}
					position++
					if buffer[position] != rune('o') {
						goto l233
					}
					position++
					if buffer[position] != rune('r') {
						goto l233
					}
					position++
					if buffer[position] != rune('p') {
						goto l233
					}
					position++
					if buffer[position] != rune('h') {
						goto l233
					}
					position++
					goto l232
				l233:
					position, tokenIndex = position232, tokenIndex232
					if buffer[position] != rune('c') {
						goto l234
					}
					position++
					if buffer[position] != rune('o') {
						goto l234
					}
					position++
					if buffer[position] != rune('n') {
						goto l234
					}
					position++
					if buffer[position] != rune('v') {
						goto l234
					}
					position++
					if buffer[position] != rune('a') {
						goto l234
					}
					position++
					if buffer[position] != rune('r') {
						goto l234
					}
					position++
					goto l232
				l234:
					position, tokenIndex = position232, tokenIndex232
					if buffer[position] != rune('p') {
						goto l235
					}
					position++
					if buffer[position] != rune('s') {
						goto l235
					}
					position++
					if buffer[position] != rune('e') {
						goto l235
					}
					position++
					if buffer[position] != rune('u') {
						goto l235
					}
					position++
					if buffer[position] != rune('d') {
						goto l235
					}
					position++
					if buffer[position] != rune('o') {
						goto l235
					}
					position++
					if buffer[position] != rune('v') {
						goto l235
					}
					position++
					if buffer[position] != rune('a') {
						goto l235
					}
					position++
					if buffer[position] != rune('r') {
						goto l235
					}
					position++
					goto l232
				l235:
					position, tokenIndex = position232, tokenIndex232
					if buffer[position] != rune('s') {
						goto l236
					}
					position++
					if buffer[position] != rune('e') {
						goto l236
					}
					position++
					if buffer[position] != rune('c') {
						goto l236
					}
					position++
					if buffer[position] != rune('t') {
						goto l236
					}
					position++
					goto l232
				l236:
					position, tokenIndex = position232, tokenIndex232
					if buffer[position] != rune('s') {
						goto l237
					}
					position++
					if buffer[position] != rune('e') {
						goto l237
					}
					position++
					if buffer[position] != rune('r') {
						goto l237
					}
					position++
					goto l232
				l237:
					position, tokenIndex = position232, tokenIndex232
					if buffer[position] != rune('s') {
						goto l238
					}
					position++
					if buffer[position] != rune('u') {
						goto l238
					}
					position++
					if buffer[position] != rune('b') {
						goto l238
					}
					position++
					if buffer[position] != rune('v') {
						goto l238
					}
					position++
					if buffer[position] != rune('a') {
						goto l238
					}
					position++
					if buffer[position] != rune('r') {
						goto l238
					}
					position++
					goto l232
				l238:
					position, tokenIndex = position232, tokenIndex232
					if buffer[position] != rune('s') {
						goto l239
					}
					position++
					if buffer[position] != rune('u') {
						goto l239
					}
					position++
					if buffer[position] != rune('b') {
						goto l239
					}
					position++
					if buffer[position] != rune('f') {
						goto l239
					}
					position++
					goto l232
				l239:
					position, tokenIndex = position232, tokenIndex232
					if buffer[position] != rune('r') {
						goto l240
					}
					position++
					if buffer[position] != rune('a') {
						goto l240
					}
					position++
					if buffer[position] != rune('c') {
						goto l240
					}
					position++
					if buffer[position] != rune('e') {
						goto l240
					}
					position++
					goto l232
				l240:
					position, tokenIndex = position232, tokenIndex232
					if buffer[position] != rune('p') {
						goto l241
					}
					position++
					if buffer[position] != rune('v') {
						goto l241
					}
					position++
					goto l232
				l241:
					position, tokenIndex = position232, tokenIndex232
					if buffer[position] != rune('p') {
						goto l242
					}
					position++
					if buffer[position] != rune('a') {
						goto l242
					}
					position++
					if buffer[position] != rune('t') {
						goto l242
					}
					position++
					if buffer[position] != rune('h') {
						goto l242
					}
					position++
					if buffer[position] != rune('o') {
						goto l242
					}
					position++
					if buffer[position] != rune('v') {
						goto l242
					}
					position++
					if buffer[position] != rune('a') {
						goto l242
					}
					position++
					if buffer[position] != rune('r') {
						goto l242
					}
					position++
					goto l232
				l242:
					position, tokenIndex = position232, tokenIndex232
					if buffer[position] != rune('a') {
						goto l243
					}
					position++
					if buffer[position] != rune('b') {
						goto l243
					}
					position++
					if buffer[position] != rune('.') {
						goto l243
					}
					position++
					{
						position244, tokenIndex244 := position, tokenIndex
						{
							position246, tokenIndex246 := position, tokenIndex
							if !_rules[rule_]() {
								goto l246
							}
							goto l247
						l246:
							position, tokenIndex = position246, tokenIndex246
						}
					l247:
						if buffer[position] != rune('n') {
							goto l244
						}
						position++
						if buffer[position] != rune('.') {
							goto l244
						}
						position++
						goto l245
					l244:
						position, tokenIndex = position244, tokenIndex244
					}
				l245:
					goto l232
				l243:
					position, tokenIndex = position232, tokenIndex232
					if buffer[position] != rune('s') {
						goto l230
					}
					position++
					if buffer[position] != rune('t') {
						goto l230
					}
					position++
				}
			l232:
				{
					position248, tokenIndex248 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l249
					}
					position++
					goto l248
				l249:
					position, tokenIndex = position248, tokenIndex248
					{
						position250, tokenIndex250 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l230
						}
						position, tokenIndex = position250, tokenIndex250
					}
				}
			l248:
				add(ruleRankOther, position231)
			}
			return true
		l230:
			position, tokenIndex = position230, tokenIndex230
			return false
		},
		/* 35 RankVar <- <((('v' 'a' 'r' 'i' 'e' 't' 'y') / ('[' 'v' 'a' 'r' '.' ']') / ('v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position251, tokenIndex251 := position, tokenIndex
			{
				position252 := position
				{
					position253, tokenIndex253 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l254
					}
					position++
					if buffer[position] != rune('a') {
						goto l254
					}
					position++
					if buffer[position] != rune('r') {
						goto l254
					}
					position++
					if buffer[position] != rune('i') {
						goto l254
					}
					position++
					if buffer[position] != rune('e') {
						goto l254
					}
					position++
					if buffer[position] != rune('t') {
						goto l254
					}
					position++
					if buffer[position] != rune('y') {
						goto l254
					}
					position++
					goto l253
				l254:
					position, tokenIndex = position253, tokenIndex253
					if buffer[position] != rune('[') {
						goto l255
					}
					position++
					if buffer[position] != rune('v') {
						goto l255
					}
					position++
					if buffer[position] != rune('a') {
						goto l255
					}
					position++
					if buffer[position] != rune('r') {
						goto l255
					}
					position++
					if buffer[position] != rune('.') {
						goto l255
					}
					position++
					if buffer[position] != rune(']') {
						goto l255
					}
					position++
					goto l253
				l255:
					position, tokenIndex = position253, tokenIndex253
					if buffer[position] != rune('v') {
						goto l251
					}
					position++
					if buffer[position] != rune('a') {
						goto l251
					}
					position++
					if buffer[position] != rune('r') {
						goto l251
					}
					position++
				}
			l253:
				{
					position256, tokenIndex256 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l257
					}
					position++
					goto l256
				l257:
					position, tokenIndex = position256, tokenIndex256
					{
						position258, tokenIndex258 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l251
						}
						position, tokenIndex = position258, tokenIndex258
					}
				}
			l256:
				add(ruleRankVar, position252)
			}
			return true
		l251:
			position, tokenIndex = position251, tokenIndex251
			return false
		},
		/* 36 RankForma <- <((('f' 'o' 'r' 'm' 'a') / ('f' 'm' 'a') / ('f' 'm') / ('f' 'o' 'r' 'm') / ('f' 'o') / 'f') ('.' / &SpaceCharEOI))> */
		func() bool {
			position259, tokenIndex259 := position, tokenIndex
			{
				position260 := position
				{
					position261, tokenIndex261 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l262
					}
					position++
					if buffer[position] != rune('o') {
						goto l262
					}
					position++
					if buffer[position] != rune('r') {
						goto l262
					}
					position++
					if buffer[position] != rune('m') {
						goto l262
					}
					position++
					if buffer[position] != rune('a') {
						goto l262
					}
					position++
					goto l261
				l262:
					position, tokenIndex = position261, tokenIndex261
					if buffer[position] != rune('f') {
						goto l263
					}
					position++
					if buffer[position] != rune('m') {
						goto l263
					}
					position++
					if buffer[position] != rune('a') {
						goto l263
					}
					position++
					goto l261
				l263:
					position, tokenIndex = position261, tokenIndex261
					if buffer[position] != rune('f') {
						goto l264
					}
					position++
					if buffer[position] != rune('m') {
						goto l264
					}
					position++
					goto l261
				l264:
					position, tokenIndex = position261, tokenIndex261
					if buffer[position] != rune('f') {
						goto l265
					}
					position++
					if buffer[position] != rune('o') {
						goto l265
					}
					position++
					if buffer[position] != rune('r') {
						goto l265
					}
					position++
					if buffer[position] != rune('m') {
						goto l265
					}
					position++
					goto l261
				l265:
					position, tokenIndex = position261, tokenIndex261
					if buffer[position] != rune('f') {
						goto l266
					}
					position++
					if buffer[position] != rune('o') {
						goto l266
					}
					position++
					goto l261
				l266:
					position, tokenIndex = position261, tokenIndex261
					if buffer[position] != rune('f') {
						goto l259
					}
					position++
				}
			l261:
				{
					position267, tokenIndex267 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l268
					}
					position++
					goto l267
				l268:
					position, tokenIndex = position267, tokenIndex267
					{
						position269, tokenIndex269 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l259
						}
						position, tokenIndex = position269, tokenIndex269
					}
				}
			l267:
				add(ruleRankForma, position260)
			}
			return true
		l259:
			position, tokenIndex = position259, tokenIndex259
			return false
		},
		/* 37 RankSsp <- <((('s' 's' 'p') / ('s' 'u' 'b' 's' 'p' 'e' 'c') / ('s' 'u' 'b' 's' 'p')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position270, tokenIndex270 := position, tokenIndex
			{
				position271 := position
				{
					position272, tokenIndex272 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l273
					}
					position++
					if buffer[position] != rune('s') {
						goto l273
					}
					position++
					if buffer[position] != rune('p') {
						goto l273
					}
					position++
					goto l272
				l273:
					position, tokenIndex = position272, tokenIndex272
					if buffer[position] != rune('s') {
						goto l274
					}
					position++
					if buffer[position] != rune('u') {
						goto l274
					}
					position++
					if buffer[position] != rune('b') {
						goto l274
					}
					position++
					if buffer[position] != rune('s') {
						goto l274
					}
					position++
					if buffer[position] != rune('p') {
						goto l274
					}
					position++
					if buffer[position] != rune('e') {
						goto l274
					}
					position++
					if buffer[position] != rune('c') {
						goto l274
					}
					position++
					goto l272
				l274:
					position, tokenIndex = position272, tokenIndex272
					if buffer[position] != rune('s') {
						goto l270
					}
					position++
					if buffer[position] != rune('u') {
						goto l270
					}
					position++
					if buffer[position] != rune('b') {
						goto l270
					}
					position++
					if buffer[position] != rune('s') {
						goto l270
					}
					position++
					if buffer[position] != rune('p') {
						goto l270
					}
					position++
				}
			l272:
				{
					position275, tokenIndex275 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l276
					}
					position++
					goto l275
				l276:
					position, tokenIndex = position275, tokenIndex275
					{
						position277, tokenIndex277 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l270
						}
						position, tokenIndex = position277, tokenIndex277
					}
				}
			l275:
				add(ruleRankSsp, position271)
			}
			return true
		l270:
			position, tokenIndex = position270, tokenIndex270
			return false
		},
		/* 38 RankAgamo <- <((('a' 'g' 'a' 'm' 'o' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 's' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position278, tokenIndex278 := position, tokenIndex
			{
				position279 := position
				{
					position280, tokenIndex280 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l281
					}
					position++
					if buffer[position] != rune('g') {
						goto l281
					}
					position++
					if buffer[position] != rune('a') {
						goto l281
					}
					position++
					if buffer[position] != rune('m') {
						goto l281
					}
					position++
					if buffer[position] != rune('o') {
						goto l281
					}
					position++
					if buffer[position] != rune('s') {
						goto l281
					}
					position++
					if buffer[position] != rune('p') {
						goto l281
					}
					position++
					goto l280
				l281:
					position, tokenIndex = position280, tokenIndex280
					if buffer[position] != rune('a') {
						goto l282
					}
					position++
					if buffer[position] != rune('g') {
						goto l282
					}
					position++
					if buffer[position] != rune('a') {
						goto l282
					}
					position++
					if buffer[position] != rune('m') {
						goto l282
					}
					position++
					if buffer[position] != rune('o') {
						goto l282
					}
					position++
					if buffer[position] != rune('s') {
						goto l282
					}
					position++
					if buffer[position] != rune('s') {
						goto l282
					}
					position++
					if buffer[position] != rune('p') {
						goto l282
					}
					position++
					goto l280
				l282:
					position, tokenIndex = position280, tokenIndex280
					if buffer[position] != rune('a') {
						goto l278
					}
					position++
					if buffer[position] != rune('g') {
						goto l278
					}
					position++
					if buffer[position] != rune('a') {
						goto l278
					}
					position++
					if buffer[position] != rune('m') {
						goto l278
					}
					position++
					if buffer[position] != rune('o') {
						goto l278
					}
					position++
					if buffer[position] != rune('v') {
						goto l278
					}
					position++
					if buffer[position] != rune('a') {
						goto l278
					}
					position++
					if buffer[position] != rune('r') {
						goto l278
					}
					position++
				}
			l280:
				{
					position283, tokenIndex283 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l284
					}
					position++
					goto l283
				l284:
					position, tokenIndex = position283, tokenIndex283
					{
						position285, tokenIndex285 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l278
						}
						position, tokenIndex = position285, tokenIndex285
					}
				}
			l283:
				add(ruleRankAgamo, position279)
			}
			return true
		l278:
			position, tokenIndex = position278, tokenIndex278
			return false
		},
		/* 39 SubgenusOrSuperspecies <- <('(' _? NameLowerChar+ _? ')')> */
		func() bool {
			position286, tokenIndex286 := position, tokenIndex
			{
				position287 := position
				if buffer[position] != rune('(') {
					goto l286
				}
				position++
				{
					position288, tokenIndex288 := position, tokenIndex
					if !_rules[rule_]() {
						goto l288
					}
					goto l289
				l288:
					position, tokenIndex = position288, tokenIndex288
				}
			l289:
				if !_rules[ruleNameLowerChar]() {
					goto l286
				}
			l290:
				{
					position291, tokenIndex291 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l291
					}
					goto l290
				l291:
					position, tokenIndex = position291, tokenIndex291
				}
				{
					position292, tokenIndex292 := position, tokenIndex
					if !_rules[rule_]() {
						goto l292
					}
					goto l293
				l292:
					position, tokenIndex = position292, tokenIndex292
				}
			l293:
				if buffer[position] != rune(')') {
					goto l286
				}
				position++
				add(ruleSubgenusOrSuperspecies, position287)
			}
			return true
		l286:
			position, tokenIndex = position286, tokenIndex286
			return false
		},
		/* 40 Subgenus <- <(Subgenus2 / Subgenus1)> */
		func() bool {
			position294, tokenIndex294 := position, tokenIndex
			{
				position295 := position
				{
					position296, tokenIndex296 := position, tokenIndex
					if !_rules[ruleSubgenus2]() {
						goto l297
					}
					goto l296
				l297:
					position, tokenIndex = position296, tokenIndex296
					if !_rules[ruleSubgenus1]() {
						goto l294
					}
				}
			l296:
				add(ruleSubgenus, position295)
			}
			return true
		l294:
			position, tokenIndex = position294, tokenIndex294
			return false
		},
		/* 41 Subgenus2 <- <('(' _? AbbrSubgenus _? ')' !(_? NameUpperChar))> */
		func() bool {
			position298, tokenIndex298 := position, tokenIndex
			{
				position299 := position
				if buffer[position] != rune('(') {
					goto l298
				}
				position++
				{
					position300, tokenIndex300 := position, tokenIndex
					if !_rules[rule_]() {
						goto l300
					}
					goto l301
				l300:
					position, tokenIndex = position300, tokenIndex300
				}
			l301:
				if !_rules[ruleAbbrSubgenus]() {
					goto l298
				}
				{
					position302, tokenIndex302 := position, tokenIndex
					if !_rules[rule_]() {
						goto l302
					}
					goto l303
				l302:
					position, tokenIndex = position302, tokenIndex302
				}
			l303:
				if buffer[position] != rune(')') {
					goto l298
				}
				position++
				{
					position304, tokenIndex304 := position, tokenIndex
					{
						position305, tokenIndex305 := position, tokenIndex
						if !_rules[rule_]() {
							goto l305
						}
						goto l306
					l305:
						position, tokenIndex = position305, tokenIndex305
					}
				l306:
					if !_rules[ruleNameUpperChar]() {
						goto l304
					}
					goto l298
				l304:
					position, tokenIndex = position304, tokenIndex304
				}
				add(ruleSubgenus2, position299)
			}
			return true
		l298:
			position, tokenIndex = position298, tokenIndex298
			return false
		},
		/* 42 Subgenus1 <- <('(' _? UninomialWord _? ')')> */
		func() bool {
			position307, tokenIndex307 := position, tokenIndex
			{
				position308 := position
				if buffer[position] != rune('(') {
					goto l307
				}
				position++
				{
					position309, tokenIndex309 := position, tokenIndex
					if !_rules[rule_]() {
						goto l309
					}
					goto l310
				l309:
					position, tokenIndex = position309, tokenIndex309
				}
			l310:
				if !_rules[ruleUninomialWord]() {
					goto l307
				}
				{
					position311, tokenIndex311 := position, tokenIndex
					if !_rules[rule_]() {
						goto l311
					}
					goto l312
				l311:
					position, tokenIndex = position311, tokenIndex311
				}
			l312:
				if buffer[position] != rune(')') {
					goto l307
				}
				position++
				add(ruleSubgenus1, position308)
			}
			return true
		l307:
			position, tokenIndex = position307, tokenIndex307
			return false
		},
		/* 43 UninomialCombo <- <(UninomialCombo1 / UninomialCombo2)> */
		func() bool {
			position313, tokenIndex313 := position, tokenIndex
			{
				position314 := position
				{
					position315, tokenIndex315 := position, tokenIndex
					if !_rules[ruleUninomialCombo1]() {
						goto l316
					}
					goto l315
				l316:
					position, tokenIndex = position315, tokenIndex315
					if !_rules[ruleUninomialCombo2]() {
						goto l313
					}
				}
			l315:
				add(ruleUninomialCombo, position314)
			}
			return true
		l313:
			position, tokenIndex = position313, tokenIndex313
			return false
		},
		/* 44 UninomialCombo1 <- <(UninomialWord _? Subgenus (_? Authorship)?)> */
		func() bool {
			position317, tokenIndex317 := position, tokenIndex
			{
				position318 := position
				if !_rules[ruleUninomialWord]() {
					goto l317
				}
				{
					position319, tokenIndex319 := position, tokenIndex
					if !_rules[rule_]() {
						goto l319
					}
					goto l320
				l319:
					position, tokenIndex = position319, tokenIndex319
				}
			l320:
				if !_rules[ruleSubgenus]() {
					goto l317
				}
				{
					position321, tokenIndex321 := position, tokenIndex
					{
						position323, tokenIndex323 := position, tokenIndex
						if !_rules[rule_]() {
							goto l323
						}
						goto l324
					l323:
						position, tokenIndex = position323, tokenIndex323
					}
				l324:
					if !_rules[ruleAuthorship]() {
						goto l321
					}
					goto l322
				l321:
					position, tokenIndex = position321, tokenIndex321
				}
			l322:
				add(ruleUninomialCombo1, position318)
			}
			return true
		l317:
			position, tokenIndex = position317, tokenIndex317
			return false
		},
		/* 45 UninomialCombo2 <- <(Uninomial _ RankUninomial _ Uninomial)> */
		func() bool {
			position325, tokenIndex325 := position, tokenIndex
			{
				position326 := position
				if !_rules[ruleUninomial]() {
					goto l325
				}
				if !_rules[rule_]() {
					goto l325
				}
				if !_rules[ruleRankUninomial]() {
					goto l325
				}
				if !_rules[rule_]() {
					goto l325
				}
				if !_rules[ruleUninomial]() {
					goto l325
				}
				add(ruleUninomialCombo2, position326)
			}
			return true
		l325:
			position, tokenIndex = position325, tokenIndex325
			return false
		},
		/* 46 RankUninomial <- <(RankUninomialPlain / RankUninomialNotho)> */
		func() bool {
			position327, tokenIndex327 := position, tokenIndex
			{
				position328 := position
				{
					position329, tokenIndex329 := position, tokenIndex
					if !_rules[ruleRankUninomialPlain]() {
						goto l330
					}
					goto l329
				l330:
					position, tokenIndex = position329, tokenIndex329
					if !_rules[ruleRankUninomialNotho]() {
						goto l327
					}
				}
			l329:
				add(ruleRankUninomial, position328)
			}
			return true
		l327:
			position, tokenIndex = position327, tokenIndex327
			return false
		},
		/* 47 RankUninomialPlain <- <((('s' 'e' 'c' 't') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('t' 'r' 'i' 'b') / ('s' 'u' 'b' 't' 'r' 'i' 'b') / ('s' 'u' 'b' 's' 'e' 'r') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('f' 'a' 'm') / ('s' 'u' 'b' 'f' 'a' 'm') / ('s' 'u' 'p' 'e' 'r' 't' 'r' 'i' 'b')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position331, tokenIndex331 := position, tokenIndex
			{
				position332 := position
				{
					position333, tokenIndex333 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l334
					}
					position++
					if buffer[position] != rune('e') {
						goto l334
					}
					position++
					if buffer[position] != rune('c') {
						goto l334
					}
					position++
					if buffer[position] != rune('t') {
						goto l334
					}
					position++
					goto l333
				l334:
					position, tokenIndex = position333, tokenIndex333
					if buffer[position] != rune('s') {
						goto l335
					}
					position++
					if buffer[position] != rune('u') {
						goto l335
					}
					position++
					if buffer[position] != rune('b') {
						goto l335
					}
					position++
					if buffer[position] != rune('s') {
						goto l335
					}
					position++
					if buffer[position] != rune('e') {
						goto l335
					}
					position++
					if buffer[position] != rune('c') {
						goto l335
					}
					position++
					if buffer[position] != rune('t') {
						goto l335
					}
					position++
					goto l333
				l335:
					position, tokenIndex = position333, tokenIndex333
					if buffer[position] != rune('t') {
						goto l336
					}
					position++
					if buffer[position] != rune('r') {
						goto l336
					}
					position++
					if buffer[position] != rune('i') {
						goto l336
					}
					position++
					if buffer[position] != rune('b') {
						goto l336
					}
					position++
					goto l333
				l336:
					position, tokenIndex = position333, tokenIndex333
					if buffer[position] != rune('s') {
						goto l337
					}
					position++
					if buffer[position] != rune('u') {
						goto l337
					}
					position++
					if buffer[position] != rune('b') {
						goto l337
					}
					position++
					if buffer[position] != rune('t') {
						goto l337
					}
					position++
					if buffer[position] != rune('r') {
						goto l337
					}
					position++
					if buffer[position] != rune('i') {
						goto l337
					}
					position++
					if buffer[position] != rune('b') {
						goto l337
					}
					position++
					goto l333
				l337:
					position, tokenIndex = position333, tokenIndex333
					if buffer[position] != rune('s') {
						goto l338
					}
					position++
					if buffer[position] != rune('u') {
						goto l338
					}
					position++
					if buffer[position] != rune('b') {
						goto l338
					}
					position++
					if buffer[position] != rune('s') {
						goto l338
					}
					position++
					if buffer[position] != rune('e') {
						goto l338
					}
					position++
					if buffer[position] != rune('r') {
						goto l338
					}
					position++
					goto l333
				l338:
					position, tokenIndex = position333, tokenIndex333
					if buffer[position] != rune('s') {
						goto l339
					}
					position++
					if buffer[position] != rune('e') {
						goto l339
					}
					position++
					if buffer[position] != rune('r') {
						goto l339
					}
					position++
					goto l333
				l339:
					position, tokenIndex = position333, tokenIndex333
					if buffer[position] != rune('s') {
						goto l340
					}
					position++
					if buffer[position] != rune('u') {
						goto l340
					}
					position++
					if buffer[position] != rune('b') {
						goto l340
					}
					position++
					if buffer[position] != rune('g') {
						goto l340
					}
					position++
					if buffer[position] != rune('e') {
						goto l340
					}
					position++
					if buffer[position] != rune('n') {
						goto l340
					}
					position++
					goto l333
				l340:
					position, tokenIndex = position333, tokenIndex333
					if buffer[position] != rune('s') {
						goto l341
					}
					position++
					if buffer[position] != rune('u') {
						goto l341
					}
					position++
					if buffer[position] != rune('b') {
						goto l341
					}
					position++
					if buffer[position] != rune('g') {
						goto l341
					}
					position++
					goto l333
				l341:
					position, tokenIndex = position333, tokenIndex333
					if buffer[position] != rune('f') {
						goto l342
					}
					position++
					if buffer[position] != rune('a') {
						goto l342
					}
					position++
					if buffer[position] != rune('m') {
						goto l342
					}
					position++
					goto l333
				l342:
					position, tokenIndex = position333, tokenIndex333
					if buffer[position] != rune('s') {
						goto l343
					}
					position++
					if buffer[position] != rune('u') {
						goto l343
					}
					position++
					if buffer[position] != rune('b') {
						goto l343
					}
					position++
					if buffer[position] != rune('f') {
						goto l343
					}
					position++
					if buffer[position] != rune('a') {
						goto l343
					}
					position++
					if buffer[position] != rune('m') {
						goto l343
					}
					position++
					goto l333
				l343:
					position, tokenIndex = position333, tokenIndex333
					if buffer[position] != rune('s') {
						goto l331
					}
					position++
					if buffer[position] != rune('u') {
						goto l331
					}
					position++
					if buffer[position] != rune('p') {
						goto l331
					}
					position++
					if buffer[position] != rune('e') {
						goto l331
					}
					position++
					if buffer[position] != rune('r') {
						goto l331
					}
					position++
					if buffer[position] != rune('t') {
						goto l331
					}
					position++
					if buffer[position] != rune('r') {
						goto l331
					}
					position++
					if buffer[position] != rune('i') {
						goto l331
					}
					position++
					if buffer[position] != rune('b') {
						goto l331
					}
					position++
				}
			l333:
				{
					position344, tokenIndex344 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l345
					}
					position++
					goto l344
				l345:
					position, tokenIndex = position344, tokenIndex344
					{
						position346, tokenIndex346 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l331
						}
						position, tokenIndex = position346, tokenIndex346
					}
				}
			l344:
				add(ruleRankUninomialPlain, position332)
			}
			return true
		l331:
			position, tokenIndex = position331, tokenIndex331
			return false
		},
		/* 48 RankUninomialNotho <- <('n' 'o' 't' 'h' 'o' _? (('s' 'e' 'c' 't') / ('g' 'e' 'n') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'e' 'n') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('s' 'u' 'b' 't' 'r' 'i' 'b')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position347, tokenIndex347 := position, tokenIndex
			{
				position348 := position
				if buffer[position] != rune('n') {
					goto l347
				}
				position++
				if buffer[position] != rune('o') {
					goto l347
				}
				position++
				if buffer[position] != rune('t') {
					goto l347
				}
				position++
				if buffer[position] != rune('h') {
					goto l347
				}
				position++
				if buffer[position] != rune('o') {
					goto l347
				}
				position++
				{
					position349, tokenIndex349 := position, tokenIndex
					if !_rules[rule_]() {
						goto l349
					}
					goto l350
				l349:
					position, tokenIndex = position349, tokenIndex349
				}
			l350:
				{
					position351, tokenIndex351 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l352
					}
					position++
					if buffer[position] != rune('e') {
						goto l352
					}
					position++
					if buffer[position] != rune('c') {
						goto l352
					}
					position++
					if buffer[position] != rune('t') {
						goto l352
					}
					position++
					goto l351
				l352:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('g') {
						goto l353
					}
					position++
					if buffer[position] != rune('e') {
						goto l353
					}
					position++
					if buffer[position] != rune('n') {
						goto l353
					}
					position++
					goto l351
				l353:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('s') {
						goto l354
					}
					position++
					if buffer[position] != rune('e') {
						goto l354
					}
					position++
					if buffer[position] != rune('r') {
						goto l354
					}
					position++
					goto l351
				l354:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('s') {
						goto l355
					}
					position++
					if buffer[position] != rune('u') {
						goto l355
					}
					position++
					if buffer[position] != rune('b') {
						goto l355
					}
					position++
					if buffer[position] != rune('g') {
						goto l355
					}
					position++
					if buffer[position] != rune('e') {
						goto l355
					}
					position++
					if buffer[position] != rune('e') {
						goto l355
					}
					position++
					if buffer[position] != rune('n') {
						goto l355
					}
					position++
					goto l351
				l355:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('s') {
						goto l356
					}
					position++
					if buffer[position] != rune('u') {
						goto l356
					}
					position++
					if buffer[position] != rune('b') {
						goto l356
					}
					position++
					if buffer[position] != rune('g') {
						goto l356
					}
					position++
					if buffer[position] != rune('e') {
						goto l356
					}
					position++
					if buffer[position] != rune('n') {
						goto l356
					}
					position++
					goto l351
				l356:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('s') {
						goto l357
					}
					position++
					if buffer[position] != rune('u') {
						goto l357
					}
					position++
					if buffer[position] != rune('b') {
						goto l357
					}
					position++
					if buffer[position] != rune('g') {
						goto l357
					}
					position++
					goto l351
				l357:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('s') {
						goto l358
					}
					position++
					if buffer[position] != rune('u') {
						goto l358
					}
					position++
					if buffer[position] != rune('b') {
						goto l358
					}
					position++
					if buffer[position] != rune('s') {
						goto l358
					}
					position++
					if buffer[position] != rune('e') {
						goto l358
					}
					position++
					if buffer[position] != rune('c') {
						goto l358
					}
					position++
					if buffer[position] != rune('t') {
						goto l358
					}
					position++
					goto l351
				l358:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('s') {
						goto l347
					}
					position++
					if buffer[position] != rune('u') {
						goto l347
					}
					position++
					if buffer[position] != rune('b') {
						goto l347
					}
					position++
					if buffer[position] != rune('t') {
						goto l347
					}
					position++
					if buffer[position] != rune('r') {
						goto l347
					}
					position++
					if buffer[position] != rune('i') {
						goto l347
					}
					position++
					if buffer[position] != rune('b') {
						goto l347
					}
					position++
				}
			l351:
				{
					position359, tokenIndex359 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l360
					}
					position++
					goto l359
				l360:
					position, tokenIndex = position359, tokenIndex359
					{
						position361, tokenIndex361 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l347
						}
						position, tokenIndex = position361, tokenIndex361
					}
				}
			l359:
				add(ruleRankUninomialNotho, position348)
			}
			return true
		l347:
			position, tokenIndex = position347, tokenIndex347
			return false
		},
		/* 49 Uninomial <- <(UninomialWord (_ Authorship !(_ LowerCharExtended LowerCharExtended LowerCharExtended))?)> */
		func() bool {
			position362, tokenIndex362 := position, tokenIndex
			{
				position363 := position
				if !_rules[ruleUninomialWord]() {
					goto l362
				}
				{
					position364, tokenIndex364 := position, tokenIndex
					if !_rules[rule_]() {
						goto l364
					}
					if !_rules[ruleAuthorship]() {
						goto l364
					}
					{
						position366, tokenIndex366 := position, tokenIndex
						if !_rules[rule_]() {
							goto l366
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l366
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l366
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l366
						}
						goto l364
					l366:
						position, tokenIndex = position366, tokenIndex366
					}
					goto l365
				l364:
					position, tokenIndex = position364, tokenIndex364
				}
			l365:
				add(ruleUninomial, position363)
			}
			return true
		l362:
			position, tokenIndex = position362, tokenIndex362
			return false
		},
		/* 50 UninomialWord <- <(CapWord / TwoLetterGenus)> */
		func() bool {
			position367, tokenIndex367 := position, tokenIndex
			{
				position368 := position
				{
					position369, tokenIndex369 := position, tokenIndex
					if !_rules[ruleCapWord]() {
						goto l370
					}
					goto l369
				l370:
					position, tokenIndex = position369, tokenIndex369
					if !_rules[ruleTwoLetterGenus]() {
						goto l367
					}
				}
			l369:
				add(ruleUninomialWord, position368)
			}
			return true
		l367:
			position, tokenIndex = position367, tokenIndex367
			return false
		},
		/* 51 AbbrSubgenus <- <(UpperChar LowerChar* '.')> */
		func() bool {
			position371, tokenIndex371 := position, tokenIndex
			{
				position372 := position
				if !_rules[ruleUpperChar]() {
					goto l371
				}
			l373:
				{
					position374, tokenIndex374 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l374
					}
					goto l373
				l374:
					position, tokenIndex = position374, tokenIndex374
				}
				if buffer[position] != rune('.') {
					goto l371
				}
				position++
				add(ruleAbbrSubgenus, position372)
			}
			return true
		l371:
			position, tokenIndex = position371, tokenIndex371
			return false
		},
		/* 52 AbbrGenus <- <(UpperChar LowerChar? '.')> */
		func() bool {
			position375, tokenIndex375 := position, tokenIndex
			{
				position376 := position
				if !_rules[ruleUpperChar]() {
					goto l375
				}
				{
					position377, tokenIndex377 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l377
					}
					goto l378
				l377:
					position, tokenIndex = position377, tokenIndex377
				}
			l378:
				if buffer[position] != rune('.') {
					goto l375
				}
				position++
				add(ruleAbbrGenus, position376)
			}
			return true
		l375:
			position, tokenIndex = position375, tokenIndex375
			return false
		},
		/* 53 CapWord <- <(CapWordWithDash / CapWord1)> */
		func() bool {
			position379, tokenIndex379 := position, tokenIndex
			{
				position380 := position
				{
					position381, tokenIndex381 := position, tokenIndex
					if !_rules[ruleCapWordWithDash]() {
						goto l382
					}
					goto l381
				l382:
					position, tokenIndex = position381, tokenIndex381
					if !_rules[ruleCapWord1]() {
						goto l379
					}
				}
			l381:
				add(ruleCapWord, position380)
			}
			return true
		l379:
			position, tokenIndex = position379, tokenIndex379
			return false
		},
		/* 54 CapWord1 <- <(NameUpperChar NameLowerChar NameLowerChar+ '?'?)> */
		func() bool {
			position383, tokenIndex383 := position, tokenIndex
			{
				position384 := position
				if !_rules[ruleNameUpperChar]() {
					goto l383
				}
				if !_rules[ruleNameLowerChar]() {
					goto l383
				}
				if !_rules[ruleNameLowerChar]() {
					goto l383
				}
			l385:
				{
					position386, tokenIndex386 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l386
					}
					goto l385
				l386:
					position, tokenIndex = position386, tokenIndex386
				}
				{
					position387, tokenIndex387 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l387
					}
					position++
					goto l388
				l387:
					position, tokenIndex = position387, tokenIndex387
				}
			l388:
				add(ruleCapWord1, position384)
			}
			return true
		l383:
			position, tokenIndex = position383, tokenIndex383
			return false
		},
		/* 55 CapWordWithDash <- <(CapWord1 Dash (UpperAfterDash / LowerAfterDash))> */
		func() bool {
			position389, tokenIndex389 := position, tokenIndex
			{
				position390 := position
				if !_rules[ruleCapWord1]() {
					goto l389
				}
				if !_rules[ruleDash]() {
					goto l389
				}
				{
					position391, tokenIndex391 := position, tokenIndex
					if !_rules[ruleUpperAfterDash]() {
						goto l392
					}
					goto l391
				l392:
					position, tokenIndex = position391, tokenIndex391
					if !_rules[ruleLowerAfterDash]() {
						goto l389
					}
				}
			l391:
				add(ruleCapWordWithDash, position390)
			}
			return true
		l389:
			position, tokenIndex = position389, tokenIndex389
			return false
		},
		/* 56 UpperAfterDash <- <CapWord1> */
		func() bool {
			position393, tokenIndex393 := position, tokenIndex
			{
				position394 := position
				if !_rules[ruleCapWord1]() {
					goto l393
				}
				add(ruleUpperAfterDash, position394)
			}
			return true
		l393:
			position, tokenIndex = position393, tokenIndex393
			return false
		},
		/* 57 LowerAfterDash <- <Word1> */
		func() bool {
			position395, tokenIndex395 := position, tokenIndex
			{
				position396 := position
				if !_rules[ruleWord1]() {
					goto l395
				}
				add(ruleLowerAfterDash, position396)
			}
			return true
		l395:
			position, tokenIndex = position395, tokenIndex395
			return false
		},
		/* 58 TwoLetterGenus <- <(('C' 'a') / ('D' 'o') / ('E' 'a') / ('G' 'e') / ('I' 'a') / ('I' 'o') / ('I' 'x') / ('L' 'o') / ('O' 'a') / ('O' 'o') / ('N' 'u') / ('R' 'a') / ('T' 'y') / ('U' 'a') / ('A' 'a') / ('J' 'a') / ('Z' 'u') / ('L' 'a') / ('Q' 'u') / ('A' 's') / ('B' 'a'))> */
		func() bool {
			position397, tokenIndex397 := position, tokenIndex
			{
				position398 := position
				{
					position399, tokenIndex399 := position, tokenIndex
					if buffer[position] != rune('C') {
						goto l400
					}
					position++
					if buffer[position] != rune('a') {
						goto l400
					}
					position++
					goto l399
				l400:
					position, tokenIndex = position399, tokenIndex399
					if buffer[position] != rune('D') {
						goto l401
					}
					position++
					if buffer[position] != rune('o') {
						goto l401
					}
					position++
					goto l399
				l401:
					position, tokenIndex = position399, tokenIndex399
					if buffer[position] != rune('E') {
						goto l402
					}
					position++
					if buffer[position] != rune('a') {
						goto l402
					}
					position++
					goto l399
				l402:
					position, tokenIndex = position399, tokenIndex399
					if buffer[position] != rune('G') {
						goto l403
					}
					position++
					if buffer[position] != rune('e') {
						goto l403
					}
					position++
					goto l399
				l403:
					position, tokenIndex = position399, tokenIndex399
					if buffer[position] != rune('I') {
						goto l404
					}
					position++
					if buffer[position] != rune('a') {
						goto l404
					}
					position++
					goto l399
				l404:
					position, tokenIndex = position399, tokenIndex399
					if buffer[position] != rune('I') {
						goto l405
					}
					position++
					if buffer[position] != rune('o') {
						goto l405
					}
					position++
					goto l399
				l405:
					position, tokenIndex = position399, tokenIndex399
					if buffer[position] != rune('I') {
						goto l406
					}
					position++
					if buffer[position] != rune('x') {
						goto l406
					}
					position++
					goto l399
				l406:
					position, tokenIndex = position399, tokenIndex399
					if buffer[position] != rune('L') {
						goto l407
					}
					position++
					if buffer[position] != rune('o') {
						goto l407
					}
					position++
					goto l399
				l407:
					position, tokenIndex = position399, tokenIndex399
					if buffer[position] != rune('O') {
						goto l408
					}
					position++
					if buffer[position] != rune('a') {
						goto l408
					}
					position++
					goto l399
				l408:
					position, tokenIndex = position399, tokenIndex399
					if buffer[position] != rune('O') {
						goto l409
					}
					position++
					if buffer[position] != rune('o') {
						goto l409
					}
					position++
					goto l399
				l409:
					position, tokenIndex = position399, tokenIndex399
					if buffer[position] != rune('N') {
						goto l410
					}
					position++
					if buffer[position] != rune('u') {
						goto l410
					}
					position++
					goto l399
				l410:
					position, tokenIndex = position399, tokenIndex399
					if buffer[position] != rune('R') {
						goto l411
					}
					position++
					if buffer[position] != rune('a') {
						goto l411
					}
					position++
					goto l399
				l411:
					position, tokenIndex = position399, tokenIndex399
					if buffer[position] != rune('T') {
						goto l412
					}
					position++
					if buffer[position] != rune('y') {
						goto l412
					}
					position++
					goto l399
				l412:
					position, tokenIndex = position399, tokenIndex399
					if buffer[position] != rune('U') {
						goto l413
					}
					position++
					if buffer[position] != rune('a') {
						goto l413
					}
					position++
					goto l399
				l413:
					position, tokenIndex = position399, tokenIndex399
					if buffer[position] != rune('A') {
						goto l414
					}
					position++
					if buffer[position] != rune('a') {
						goto l414
					}
					position++
					goto l399
				l414:
					position, tokenIndex = position399, tokenIndex399
					if buffer[position] != rune('J') {
						goto l415
					}
					position++
					if buffer[position] != rune('a') {
						goto l415
					}
					position++
					goto l399
				l415:
					position, tokenIndex = position399, tokenIndex399
					if buffer[position] != rune('Z') {
						goto l416
					}
					position++
					if buffer[position] != rune('u') {
						goto l416
					}
					position++
					goto l399
				l416:
					position, tokenIndex = position399, tokenIndex399
					if buffer[position] != rune('L') {
						goto l417
					}
					position++
					if buffer[position] != rune('a') {
						goto l417
					}
					position++
					goto l399
				l417:
					position, tokenIndex = position399, tokenIndex399
					if buffer[position] != rune('Q') {
						goto l418
					}
					position++
					if buffer[position] != rune('u') {
						goto l418
					}
					position++
					goto l399
				l418:
					position, tokenIndex = position399, tokenIndex399
					if buffer[position] != rune('A') {
						goto l419
					}
					position++
					if buffer[position] != rune('s') {
						goto l419
					}
					position++
					goto l399
				l419:
					position, tokenIndex = position399, tokenIndex399
					if buffer[position] != rune('B') {
						goto l397
					}
					position++
					if buffer[position] != rune('a') {
						goto l397
					}
					position++
				}
			l399:
				add(ruleTwoLetterGenus, position398)
			}
			return true
		l397:
			position, tokenIndex = position397, tokenIndex397
			return false
		},
		/* 59 Word <- <(!((('e' 'x') / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd') / ('p' 'r' 'o') / ('c' 'v') / ('c' 'u' 'l' 't' 'i' 'v' 'a' 'r') / AuthorPrefix / RankUninomial / Approximation / Word4) SpaceCharEOI) (WordApostr / WordStartsWithDigit / MultiDashedWord / Word2 / Word1) &(SpaceCharEOI / '('))> */
		func() bool {
			position420, tokenIndex420 := position, tokenIndex
			{
				position421 := position
				{
					position422, tokenIndex422 := position, tokenIndex
					{
						position423, tokenIndex423 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l424
						}
						position++
						if buffer[position] != rune('x') {
							goto l424
						}
						position++
						goto l423
					l424:
						position, tokenIndex = position423, tokenIndex423
						if buffer[position] != rune('e') {
							goto l425
						}
						position++
						if buffer[position] != rune('t') {
							goto l425
						}
						position++
						goto l423
					l425:
						position, tokenIndex = position423, tokenIndex423
						if buffer[position] != rune('a') {
							goto l426
						}
						position++
						if buffer[position] != rune('n') {
							goto l426
						}
						position++
						if buffer[position] != rune('d') {
							goto l426
						}
						position++
						goto l423
					l426:
						position, tokenIndex = position423, tokenIndex423
						if buffer[position] != rune('a') {
							goto l427
						}
						position++
						if buffer[position] != rune('p') {
							goto l427
						}
						position++
						if buffer[position] != rune('u') {
							goto l427
						}
						position++
						if buffer[position] != rune('d') {
							goto l427
						}
						position++
						goto l423
					l427:
						position, tokenIndex = position423, tokenIndex423
						if buffer[position] != rune('p') {
							goto l428
						}
						position++
						if buffer[position] != rune('r') {
							goto l428
						}
						position++
						if buffer[position] != rune('o') {
							goto l428
						}
						position++
						goto l423
					l428:
						position, tokenIndex = position423, tokenIndex423
						if buffer[position] != rune('c') {
							goto l429
						}
						position++
						if buffer[position] != rune('v') {
							goto l429
						}
						position++
						goto l423
					l429:
						position, tokenIndex = position423, tokenIndex423
						if buffer[position] != rune('c') {
							goto l430
						}
						position++
						if buffer[position] != rune('u') {
							goto l430
						}
						position++
						if buffer[position] != rune('l') {
							goto l430
						}
						position++
						if buffer[position] != rune('t') {
							goto l430
						}
						position++
						if buffer[position] != rune('i') {
							goto l430
						}
						position++
						if buffer[position] != rune('v') {
							goto l430
						}
						position++
						if buffer[position] != rune('a') {
							goto l430
						}
						position++
						if buffer[position] != rune('r') {
							goto l430
						}
						position++
						goto l423
					l430:
						position, tokenIndex = position423, tokenIndex423
						if !_rules[ruleAuthorPrefix]() {
							goto l431
						}
						goto l423
					l431:
						position, tokenIndex = position423, tokenIndex423
						if !_rules[ruleRankUninomial]() {
							goto l432
						}
						goto l423
					l432:
						position, tokenIndex = position423, tokenIndex423
						if !_rules[ruleApproximation]() {
							goto l433
						}
						goto l423
					l433:
						position, tokenIndex = position423, tokenIndex423
						if !_rules[ruleWord4]() {
							goto l422
						}
					}
				l423:
					if !_rules[ruleSpaceCharEOI]() {
						goto l422
					}
					goto l420
				l422:
					position, tokenIndex = position422, tokenIndex422
				}
				{
					position434, tokenIndex434 := position, tokenIndex
					if !_rules[ruleWordApostr]() {
						goto l435
					}
					goto l434
				l435:
					position, tokenIndex = position434, tokenIndex434
					if !_rules[ruleWordStartsWithDigit]() {
						goto l436
					}
					goto l434
				l436:
					position, tokenIndex = position434, tokenIndex434
					if !_rules[ruleMultiDashedWord]() {
						goto l437
					}
					goto l434
				l437:
					position, tokenIndex = position434, tokenIndex434
					if !_rules[ruleWord2]() {
						goto l438
					}
					goto l434
				l438:
					position, tokenIndex = position434, tokenIndex434
					if !_rules[ruleWord1]() {
						goto l420
					}
				}
			l434:
				{
					position439, tokenIndex439 := position, tokenIndex
					{
						position440, tokenIndex440 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l441
						}
						goto l440
					l441:
						position, tokenIndex = position440, tokenIndex440
						if buffer[position] != rune('(') {
							goto l420
						}
						position++
					}
				l440:
					position, tokenIndex = position439, tokenIndex439
				}
				add(ruleWord, position421)
			}
			return true
		l420:
			position, tokenIndex = position420, tokenIndex420
			return false
		},
		/* 60 Word1 <- <((LowerASCII Dash)? NameLowerChar NameLowerChar+)> */
		func() bool {
			position442, tokenIndex442 := position, tokenIndex
			{
				position443 := position
				{
					position444, tokenIndex444 := position, tokenIndex
					if !_rules[ruleLowerASCII]() {
						goto l444
					}
					if !_rules[ruleDash]() {
						goto l444
					}
					goto l445
				l444:
					position, tokenIndex = position444, tokenIndex444
				}
			l445:
				if !_rules[ruleNameLowerChar]() {
					goto l442
				}
				if !_rules[ruleNameLowerChar]() {
					goto l442
				}
			l446:
				{
					position447, tokenIndex447 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l447
					}
					goto l446
				l447:
					position, tokenIndex = position447, tokenIndex447
				}
				add(ruleWord1, position443)
			}
			return true
		l442:
			position, tokenIndex = position442, tokenIndex442
			return false
		},
		/* 61 WordStartsWithDigit <- <(('1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9') Nums? ('.' / Dash)? NameLowerChar NameLowerChar NameLowerChar NameLowerChar+)> */
		func() bool {
			position448, tokenIndex448 := position, tokenIndex
			{
				position449 := position
				{
					position450, tokenIndex450 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l451
					}
					position++
					goto l450
				l451:
					position, tokenIndex = position450, tokenIndex450
					if buffer[position] != rune('2') {
						goto l452
					}
					position++
					goto l450
				l452:
					position, tokenIndex = position450, tokenIndex450
					if buffer[position] != rune('3') {
						goto l453
					}
					position++
					goto l450
				l453:
					position, tokenIndex = position450, tokenIndex450
					if buffer[position] != rune('4') {
						goto l454
					}
					position++
					goto l450
				l454:
					position, tokenIndex = position450, tokenIndex450
					if buffer[position] != rune('5') {
						goto l455
					}
					position++
					goto l450
				l455:
					position, tokenIndex = position450, tokenIndex450
					if buffer[position] != rune('6') {
						goto l456
					}
					position++
					goto l450
				l456:
					position, tokenIndex = position450, tokenIndex450
					if buffer[position] != rune('7') {
						goto l457
					}
					position++
					goto l450
				l457:
					position, tokenIndex = position450, tokenIndex450
					if buffer[position] != rune('8') {
						goto l458
					}
					position++
					goto l450
				l458:
					position, tokenIndex = position450, tokenIndex450
					if buffer[position] != rune('9') {
						goto l448
					}
					position++
				}
			l450:
				{
					position459, tokenIndex459 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l459
					}
					goto l460
				l459:
					position, tokenIndex = position459, tokenIndex459
				}
			l460:
				{
					position461, tokenIndex461 := position, tokenIndex
					{
						position463, tokenIndex463 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l464
						}
						position++
						goto l463
					l464:
						position, tokenIndex = position463, tokenIndex463
						if !_rules[ruleDash]() {
							goto l461
						}
					}
				l463:
					goto l462
				l461:
					position, tokenIndex = position461, tokenIndex461
				}
			l462:
				if !_rules[ruleNameLowerChar]() {
					goto l448
				}
				if !_rules[ruleNameLowerChar]() {
					goto l448
				}
				if !_rules[ruleNameLowerChar]() {
					goto l448
				}
				if !_rules[ruleNameLowerChar]() {
					goto l448
				}
			l465:
				{
					position466, tokenIndex466 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l466
					}
					goto l465
				l466:
					position, tokenIndex = position466, tokenIndex466
				}
				add(ruleWordStartsWithDigit, position449)
			}
			return true
		l448:
			position, tokenIndex = position448, tokenIndex448
			return false
		},
		/* 62 Word2 <- <(NameLowerChar+ Dash? NameLowerChar+)> */
		func() bool {
			position467, tokenIndex467 := position, tokenIndex
			{
				position468 := position
				if !_rules[ruleNameLowerChar]() {
					goto l467
				}
			l469:
				{
					position470, tokenIndex470 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l470
					}
					goto l469
				l470:
					position, tokenIndex = position470, tokenIndex470
				}
				{
					position471, tokenIndex471 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l471
					}
					goto l472
				l471:
					position, tokenIndex = position471, tokenIndex471
				}
			l472:
				if !_rules[ruleNameLowerChar]() {
					goto l467
				}
			l473:
				{
					position474, tokenIndex474 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l474
					}
					goto l473
				l474:
					position, tokenIndex = position474, tokenIndex474
				}
				add(ruleWord2, position468)
			}
			return true
		l467:
			position, tokenIndex = position467, tokenIndex467
			return false
		},
		/* 63 WordApostr <- <(NameLowerChar NameLowerChar* Apostrophe Word1)> */
		func() bool {
			position475, tokenIndex475 := position, tokenIndex
			{
				position476 := position
				if !_rules[ruleNameLowerChar]() {
					goto l475
				}
			l477:
				{
					position478, tokenIndex478 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l478
					}
					goto l477
				l478:
					position, tokenIndex = position478, tokenIndex478
				}
				if !_rules[ruleApostrophe]() {
					goto l475
				}
				if !_rules[ruleWord1]() {
					goto l475
				}
				add(ruleWordApostr, position476)
			}
			return true
		l475:
			position, tokenIndex = position475, tokenIndex475
			return false
		},
		/* 64 Word4 <- <(NameLowerChar+ '.' NameLowerChar)> */
		func() bool {
			position479, tokenIndex479 := position, tokenIndex
			{
				position480 := position
				if !_rules[ruleNameLowerChar]() {
					goto l479
				}
			l481:
				{
					position482, tokenIndex482 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l482
					}
					goto l481
				l482:
					position, tokenIndex = position482, tokenIndex482
				}
				if buffer[position] != rune('.') {
					goto l479
				}
				position++
				if !_rules[ruleNameLowerChar]() {
					goto l479
				}
				add(ruleWord4, position480)
			}
			return true
		l479:
			position, tokenIndex = position479, tokenIndex479
			return false
		},
		/* 65 MultiDashedWord <- <(NameLowerChar+ Dash NameLowerChar+ Dash NameLowerChar+ (Dash NameLowerChar+)?)> */
		func() bool {
			position483, tokenIndex483 := position, tokenIndex
			{
				position484 := position
				if !_rules[ruleNameLowerChar]() {
					goto l483
				}
			l485:
				{
					position486, tokenIndex486 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l486
					}
					goto l485
				l486:
					position, tokenIndex = position486, tokenIndex486
				}
				if !_rules[ruleDash]() {
					goto l483
				}
				if !_rules[ruleNameLowerChar]() {
					goto l483
				}
			l487:
				{
					position488, tokenIndex488 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l488
					}
					goto l487
				l488:
					position, tokenIndex = position488, tokenIndex488
				}
				if !_rules[ruleDash]() {
					goto l483
				}
				if !_rules[ruleNameLowerChar]() {
					goto l483
				}
			l489:
				{
					position490, tokenIndex490 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l490
					}
					goto l489
				l490:
					position, tokenIndex = position490, tokenIndex490
				}
				{
					position491, tokenIndex491 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l491
					}
					if !_rules[ruleNameLowerChar]() {
						goto l491
					}
				l493:
					{
						position494, tokenIndex494 := position, tokenIndex
						if !_rules[ruleNameLowerChar]() {
							goto l494
						}
						goto l493
					l494:
						position, tokenIndex = position494, tokenIndex494
					}
					goto l492
				l491:
					position, tokenIndex = position491, tokenIndex491
				}
			l492:
				add(ruleMultiDashedWord, position484)
			}
			return true
		l483:
			position, tokenIndex = position483, tokenIndex483
			return false
		},
		/* 66 HybridChar <- <('×' / (('x' / 'X') &_) / (('x' / 'X') &UninomialWord) / (('x' / 'X') &END))> */
		func() bool {
			position495, tokenIndex495 := position, tokenIndex
			{
				position496 := position
				{
					position497, tokenIndex497 := position, tokenIndex
					if buffer[position] != rune('×') {
						goto l498
					}
					position++
					goto l497
				l498:
					position, tokenIndex = position497, tokenIndex497
					{
						position500, tokenIndex500 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l501
						}
						position++
						goto l500
					l501:
						position, tokenIndex = position500, tokenIndex500
						if buffer[position] != rune('X') {
							goto l499
						}
						position++
					}
				l500:
					{
						position502, tokenIndex502 := position, tokenIndex
						if !_rules[rule_]() {
							goto l499
						}
						position, tokenIndex = position502, tokenIndex502
					}
					goto l497
				l499:
					position, tokenIndex = position497, tokenIndex497
					{
						position504, tokenIndex504 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l505
						}
						position++
						goto l504
					l505:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('X') {
							goto l503
						}
						position++
					}
				l504:
					{
						position506, tokenIndex506 := position, tokenIndex
						if !_rules[ruleUninomialWord]() {
							goto l503
						}
						position, tokenIndex = position506, tokenIndex506
					}
					goto l497
				l503:
					position, tokenIndex = position497, tokenIndex497
					{
						position507, tokenIndex507 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l508
						}
						position++
						goto l507
					l508:
						position, tokenIndex = position507, tokenIndex507
						if buffer[position] != rune('X') {
							goto l495
						}
						position++
					}
				l507:
					{
						position509, tokenIndex509 := position, tokenIndex
						if !_rules[ruleEND]() {
							goto l495
						}
						position, tokenIndex = position509, tokenIndex509
					}
				}
			l497:
				add(ruleHybridChar, position496)
			}
			return true
		l495:
			position, tokenIndex = position495, tokenIndex495
			return false
		},
		/* 67 GraftChimeraChar <- <'+'> */
		func() bool {
			position510, tokenIndex510 := position, tokenIndex
			{
				position511 := position
				if buffer[position] != rune('+') {
					goto l510
				}
				position++
				add(ruleGraftChimeraChar, position511)
			}
			return true
		l510:
			position, tokenIndex = position510, tokenIndex510
			return false
		},
		/* 68 ApproxNameIgnored <- <.*> */
		func() bool {
			{
				position513 := position
			l514:
				{
					position515, tokenIndex515 := position, tokenIndex
					if !matchDot() {
						goto l515
					}
					goto l514
				l515:
					position, tokenIndex = position515, tokenIndex515
				}
				add(ruleApproxNameIgnored, position513)
			}
			return true
		},
		/* 69 Approximation <- <(('s' 'p' '.' _? ('n' 'r' '.')) / ('s' 'p' '.' _? ('a' 'f' 'f' '.')) / ('m' 'o' 'n' 's' 't' '.') / '?' / ((('s' 'p' 'p') / ('n' 'r') / ('s' 'p') / ('a' 'f' 'f') / ('s' 'p' 'e' 'c' 'i' 'e' 's')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position516, tokenIndex516 := position, tokenIndex
			{
				position517 := position
				{
					position518, tokenIndex518 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l519
					}
					position++
					if buffer[position] != rune('p') {
						goto l519
					}
					position++
					if buffer[position] != rune('.') {
						goto l519
					}
					position++
					{
						position520, tokenIndex520 := position, tokenIndex
						if !_rules[rule_]() {
							goto l520
						}
						goto l521
					l520:
						position, tokenIndex = position520, tokenIndex520
					}
				l521:
					if buffer[position] != rune('n') {
						goto l519
					}
					position++
					if buffer[position] != rune('r') {
						goto l519
					}
					position++
					if buffer[position] != rune('.') {
						goto l519
					}
					position++
					goto l518
				l519:
					position, tokenIndex = position518, tokenIndex518
					if buffer[position] != rune('s') {
						goto l522
					}
					position++
					if buffer[position] != rune('p') {
						goto l522
					}
					position++
					if buffer[position] != rune('.') {
						goto l522
					}
					position++
					{
						position523, tokenIndex523 := position, tokenIndex
						if !_rules[rule_]() {
							goto l523
						}
						goto l524
					l523:
						position, tokenIndex = position523, tokenIndex523
					}
				l524:
					if buffer[position] != rune('a') {
						goto l522
					}
					position++
					if buffer[position] != rune('f') {
						goto l522
					}
					position++
					if buffer[position] != rune('f') {
						goto l522
					}
					position++
					if buffer[position] != rune('.') {
						goto l522
					}
					position++
					goto l518
				l522:
					position, tokenIndex = position518, tokenIndex518
					if buffer[position] != rune('m') {
						goto l525
					}
					position++
					if buffer[position] != rune('o') {
						goto l525
					}
					position++
					if buffer[position] != rune('n') {
						goto l525
					}
					position++
					if buffer[position] != rune('s') {
						goto l525
					}
					position++
					if buffer[position] != rune('t') {
						goto l525
					}
					position++
					if buffer[position] != rune('.') {
						goto l525
					}
					position++
					goto l518
				l525:
					position, tokenIndex = position518, tokenIndex518
					if buffer[position] != rune('?') {
						goto l526
					}
					position++
					goto l518
				l526:
					position, tokenIndex = position518, tokenIndex518
					{
						position527, tokenIndex527 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l528
						}
						position++
						if buffer[position] != rune('p') {
							goto l528
						}
						position++
						if buffer[position] != rune('p') {
							goto l528
						}
						position++
						goto l527
					l528:
						position, tokenIndex = position527, tokenIndex527
						if buffer[position] != rune('n') {
							goto l529
						}
						position++
						if buffer[position] != rune('r') {
							goto l529
						}
						position++
						goto l527
					l529:
						position, tokenIndex = position527, tokenIndex527
						if buffer[position] != rune('s') {
							goto l530
						}
						position++
						if buffer[position] != rune('p') {
							goto l530
						}
						position++
						goto l527
					l530:
						position, tokenIndex = position527, tokenIndex527
						if buffer[position] != rune('a') {
							goto l531
						}
						position++
						if buffer[position] != rune('f') {
							goto l531
						}
						position++
						if buffer[position] != rune('f') {
							goto l531
						}
						position++
						goto l527
					l531:
						position, tokenIndex = position527, tokenIndex527
						if buffer[position] != rune('s') {
							goto l516
						}
						position++
						if buffer[position] != rune('p') {
							goto l516
						}
						position++
						if buffer[position] != rune('e') {
							goto l516
						}
						position++
						if buffer[position] != rune('c') {
							goto l516
						}
						position++
						if buffer[position] != rune('i') {
							goto l516
						}
						position++
						if buffer[position] != rune('e') {
							goto l516
						}
						position++
						if buffer[position] != rune('s') {
							goto l516
						}
						position++
					}
				l527:
					{
						position532, tokenIndex532 := position, tokenIndex
						{
							position534, tokenIndex534 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l533
							}
							position, tokenIndex = position534, tokenIndex534
						}
						goto l532
					l533:
						position, tokenIndex = position532, tokenIndex532
						if buffer[position] != rune('.') {
							goto l516
						}
						position++
					}
				l532:
				}
			l518:
				add(ruleApproximation, position517)
			}
			return true
		l516:
			position, tokenIndex = position516, tokenIndex516
			return false
		},
		/* 70 Authorship <- <((AuthorshipCombo / OriginalAuthorship) &(SpaceCharEOI / ';' / ','))> */
		func() bool {
			position535, tokenIndex535 := position, tokenIndex
			{
				position536 := position
				{
					position537, tokenIndex537 := position, tokenIndex
					if !_rules[ruleAuthorshipCombo]() {
						goto l538
					}
					goto l537
				l538:
					position, tokenIndex = position537, tokenIndex537
					if !_rules[ruleOriginalAuthorship]() {
						goto l535
					}
				}
			l537:
				{
					position539, tokenIndex539 := position, tokenIndex
					{
						position540, tokenIndex540 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l541
						}
						goto l540
					l541:
						position, tokenIndex = position540, tokenIndex540
						if buffer[position] != rune(';') {
							goto l542
						}
						position++
						goto l540
					l542:
						position, tokenIndex = position540, tokenIndex540
						if buffer[position] != rune(',') {
							goto l535
						}
						position++
					}
				l540:
					position, tokenIndex = position539, tokenIndex539
				}
				add(ruleAuthorship, position536)
			}
			return true
		l535:
			position, tokenIndex = position535, tokenIndex535
			return false
		},
		/* 71 AuthorshipCombo <- <(OriginalAuthorshipComb (_? CombinationAuthorship)?)> */
		func() bool {
			position543, tokenIndex543 := position, tokenIndex
			{
				position544 := position
				if !_rules[ruleOriginalAuthorshipComb]() {
					goto l543
				}
				{
					position545, tokenIndex545 := position, tokenIndex
					{
						position547, tokenIndex547 := position, tokenIndex
						if !_rules[rule_]() {
							goto l547
						}
						goto l548
					l547:
						position, tokenIndex = position547, tokenIndex547
					}
				l548:
					if !_rules[ruleCombinationAuthorship]() {
						goto l545
					}
					goto l546
				l545:
					position, tokenIndex = position545, tokenIndex545
				}
			l546:
				add(ruleAuthorshipCombo, position544)
			}
			return true
		l543:
			position, tokenIndex = position543, tokenIndex543
			return false
		},
		/* 72 OriginalAuthorship <- <AuthorsGroup> */
		func() bool {
			position549, tokenIndex549 := position, tokenIndex
			{
				position550 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l549
				}
				add(ruleOriginalAuthorship, position550)
			}
			return true
		l549:
			position, tokenIndex = position549, tokenIndex549
			return false
		},
		/* 73 OriginalAuthorshipComb <- <(BasionymAuthorshipYearMisformed / BasionymAuthorship / BasionymAuthorshipMissingParens)> */
		func() bool {
			position551, tokenIndex551 := position, tokenIndex
			{
				position552 := position
				{
					position553, tokenIndex553 := position, tokenIndex
					if !_rules[ruleBasionymAuthorshipYearMisformed]() {
						goto l554
					}
					goto l553
				l554:
					position, tokenIndex = position553, tokenIndex553
					if !_rules[ruleBasionymAuthorship]() {
						goto l555
					}
					goto l553
				l555:
					position, tokenIndex = position553, tokenIndex553
					if !_rules[ruleBasionymAuthorshipMissingParens]() {
						goto l551
					}
				}
			l553:
				add(ruleOriginalAuthorshipComb, position552)
			}
			return true
		l551:
			position, tokenIndex = position551, tokenIndex551
			return false
		},
		/* 74 CombinationAuthorship <- <AuthorsGroup> */
		func() bool {
			position556, tokenIndex556 := position, tokenIndex
			{
				position557 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l556
				}
				add(ruleCombinationAuthorship, position557)
			}
			return true
		l556:
			position, tokenIndex = position556, tokenIndex556
			return false
		},
		/* 75 BasionymAuthorshipMissingParens <- <(MissingParensStart / MissingParensEnd)> */
		func() bool {
			position558, tokenIndex558 := position, tokenIndex
			{
				position559 := position
				{
					position560, tokenIndex560 := position, tokenIndex
					if !_rules[ruleMissingParensStart]() {
						goto l561
					}
					goto l560
				l561:
					position, tokenIndex = position560, tokenIndex560
					if !_rules[ruleMissingParensEnd]() {
						goto l558
					}
				}
			l560:
				add(ruleBasionymAuthorshipMissingParens, position559)
			}
			return true
		l558:
			position, tokenIndex = position558, tokenIndex558
			return false
		},
		/* 76 MissingParensStart <- <('(' _? AuthorsGroup)> */
		func() bool {
			position562, tokenIndex562 := position, tokenIndex
			{
				position563 := position
				if buffer[position] != rune('(') {
					goto l562
				}
				position++
				{
					position564, tokenIndex564 := position, tokenIndex
					if !_rules[rule_]() {
						goto l564
					}
					goto l565
				l564:
					position, tokenIndex = position564, tokenIndex564
				}
			l565:
				if !_rules[ruleAuthorsGroup]() {
					goto l562
				}
				add(ruleMissingParensStart, position563)
			}
			return true
		l562:
			position, tokenIndex = position562, tokenIndex562
			return false
		},
		/* 77 MissingParensEnd <- <(AuthorsGroup _? ')')> */
		func() bool {
			position566, tokenIndex566 := position, tokenIndex
			{
				position567 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l566
				}
				{
					position568, tokenIndex568 := position, tokenIndex
					if !_rules[rule_]() {
						goto l568
					}
					goto l569
				l568:
					position, tokenIndex = position568, tokenIndex568
				}
			l569:
				if buffer[position] != rune(')') {
					goto l566
				}
				position++
				add(ruleMissingParensEnd, position567)
			}
			return true
		l566:
			position, tokenIndex = position566, tokenIndex566
			return false
		},
		/* 78 BasionymAuthorshipYearMisformed <- <('(' _? AuthorsGroup _? ')' (_? ',')? _? Year)> */
		func() bool {
			position570, tokenIndex570 := position, tokenIndex
			{
				position571 := position
				if buffer[position] != rune('(') {
					goto l570
				}
				position++
				{
					position572, tokenIndex572 := position, tokenIndex
					if !_rules[rule_]() {
						goto l572
					}
					goto l573
				l572:
					position, tokenIndex = position572, tokenIndex572
				}
			l573:
				if !_rules[ruleAuthorsGroup]() {
					goto l570
				}
				{
					position574, tokenIndex574 := position, tokenIndex
					if !_rules[rule_]() {
						goto l574
					}
					goto l575
				l574:
					position, tokenIndex = position574, tokenIndex574
				}
			l575:
				if buffer[position] != rune(')') {
					goto l570
				}
				position++
				{
					position576, tokenIndex576 := position, tokenIndex
					{
						position578, tokenIndex578 := position, tokenIndex
						if !_rules[rule_]() {
							goto l578
						}
						goto l579
					l578:
						position, tokenIndex = position578, tokenIndex578
					}
				l579:
					if buffer[position] != rune(',') {
						goto l576
					}
					position++
					goto l577
				l576:
					position, tokenIndex = position576, tokenIndex576
				}
			l577:
				{
					position580, tokenIndex580 := position, tokenIndex
					if !_rules[rule_]() {
						goto l580
					}
					goto l581
				l580:
					position, tokenIndex = position580, tokenIndex580
				}
			l581:
				if !_rules[ruleYear]() {
					goto l570
				}
				add(ruleBasionymAuthorshipYearMisformed, position571)
			}
			return true
		l570:
			position, tokenIndex = position570, tokenIndex570
			return false
		},
		/* 79 BasionymAuthorship <- <(BasionymAuthorship1 / BasionymAuthorship2Parens)> */
		func() bool {
			position582, tokenIndex582 := position, tokenIndex
			{
				position583 := position
				{
					position584, tokenIndex584 := position, tokenIndex
					if !_rules[ruleBasionymAuthorship1]() {
						goto l585
					}
					goto l584
				l585:
					position, tokenIndex = position584, tokenIndex584
					if !_rules[ruleBasionymAuthorship2Parens]() {
						goto l582
					}
				}
			l584:
				add(ruleBasionymAuthorship, position583)
			}
			return true
		l582:
			position, tokenIndex = position582, tokenIndex582
			return false
		},
		/* 80 BasionymAuthorship1 <- <('(' _? AuthorsGroup _? ')')> */
		func() bool {
			position586, tokenIndex586 := position, tokenIndex
			{
				position587 := position
				if buffer[position] != rune('(') {
					goto l586
				}
				position++
				{
					position588, tokenIndex588 := position, tokenIndex
					if !_rules[rule_]() {
						goto l588
					}
					goto l589
				l588:
					position, tokenIndex = position588, tokenIndex588
				}
			l589:
				if !_rules[ruleAuthorsGroup]() {
					goto l586
				}
				{
					position590, tokenIndex590 := position, tokenIndex
					if !_rules[rule_]() {
						goto l590
					}
					goto l591
				l590:
					position, tokenIndex = position590, tokenIndex590
				}
			l591:
				if buffer[position] != rune(')') {
					goto l586
				}
				position++
				add(ruleBasionymAuthorship1, position587)
			}
			return true
		l586:
			position, tokenIndex = position586, tokenIndex586
			return false
		},
		/* 81 BasionymAuthorship2Parens <- <('(' _? '(' _? AuthorsGroup _? ')' _? ')')> */
		func() bool {
			position592, tokenIndex592 := position, tokenIndex
			{
				position593 := position
				if buffer[position] != rune('(') {
					goto l592
				}
				position++
				{
					position594, tokenIndex594 := position, tokenIndex
					if !_rules[rule_]() {
						goto l594
					}
					goto l595
				l594:
					position, tokenIndex = position594, tokenIndex594
				}
			l595:
				if buffer[position] != rune('(') {
					goto l592
				}
				position++
				{
					position596, tokenIndex596 := position, tokenIndex
					if !_rules[rule_]() {
						goto l596
					}
					goto l597
				l596:
					position, tokenIndex = position596, tokenIndex596
				}
			l597:
				if !_rules[ruleAuthorsGroup]() {
					goto l592
				}
				{
					position598, tokenIndex598 := position, tokenIndex
					if !_rules[rule_]() {
						goto l598
					}
					goto l599
				l598:
					position, tokenIndex = position598, tokenIndex598
				}
			l599:
				if buffer[position] != rune(')') {
					goto l592
				}
				position++
				{
					position600, tokenIndex600 := position, tokenIndex
					if !_rules[rule_]() {
						goto l600
					}
					goto l601
				l600:
					position, tokenIndex = position600, tokenIndex600
				}
			l601:
				if buffer[position] != rune(')') {
					goto l592
				}
				position++
				add(ruleBasionymAuthorship2Parens, position593)
			}
			return true
		l592:
			position, tokenIndex = position592, tokenIndex592
			return false
		},
		/* 82 AuthorsGroup <- <(AuthorsTeam (_ (AuthorEmend / AuthorEx) AuthorsTeam)?)> */
		func() bool {
			position602, tokenIndex602 := position, tokenIndex
			{
				position603 := position
				if !_rules[ruleAuthorsTeam]() {
					goto l602
				}
				{
					position604, tokenIndex604 := position, tokenIndex
					if !_rules[rule_]() {
						goto l604
					}
					{
						position606, tokenIndex606 := position, tokenIndex
						if !_rules[ruleAuthorEmend]() {
							goto l607
						}
						goto l606
					l607:
						position, tokenIndex = position606, tokenIndex606
						if !_rules[ruleAuthorEx]() {
							goto l604
						}
					}
				l606:
					if !_rules[ruleAuthorsTeam]() {
						goto l604
					}
					goto l605
				l604:
					position, tokenIndex = position604, tokenIndex604
				}
			l605:
				add(ruleAuthorsGroup, position603)
			}
			return true
		l602:
			position, tokenIndex = position602, tokenIndex602
			return false
		},
		/* 83 AuthorsTeam <- <(Author (AuthorSep Author)* (_? ','? _? Year)?)> */
		func() bool {
			position608, tokenIndex608 := position, tokenIndex
			{
				position609 := position
				if !_rules[ruleAuthor]() {
					goto l608
				}
			l610:
				{
					position611, tokenIndex611 := position, tokenIndex
					if !_rules[ruleAuthorSep]() {
						goto l611
					}
					if !_rules[ruleAuthor]() {
						goto l611
					}
					goto l610
				l611:
					position, tokenIndex = position611, tokenIndex611
				}
				{
					position612, tokenIndex612 := position, tokenIndex
					{
						position614, tokenIndex614 := position, tokenIndex
						if !_rules[rule_]() {
							goto l614
						}
						goto l615
					l614:
						position, tokenIndex = position614, tokenIndex614
					}
				l615:
					{
						position616, tokenIndex616 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l616
						}
						position++
						goto l617
					l616:
						position, tokenIndex = position616, tokenIndex616
					}
				l617:
					{
						position618, tokenIndex618 := position, tokenIndex
						if !_rules[rule_]() {
							goto l618
						}
						goto l619
					l618:
						position, tokenIndex = position618, tokenIndex618
					}
				l619:
					if !_rules[ruleYear]() {
						goto l612
					}
					goto l613
				l612:
					position, tokenIndex = position612, tokenIndex612
				}
			l613:
				add(ruleAuthorsTeam, position609)
			}
			return true
		l608:
			position, tokenIndex = position608, tokenIndex608
			return false
		},
		/* 84 AuthorSep <- <(AuthorSep1 / AuthorSep2)> */
		func() bool {
			position620, tokenIndex620 := position, tokenIndex
			{
				position621 := position
				{
					position622, tokenIndex622 := position, tokenIndex
					if !_rules[ruleAuthorSep1]() {
						goto l623
					}
					goto l622
				l623:
					position, tokenIndex = position622, tokenIndex622
					if !_rules[ruleAuthorSep2]() {
						goto l620
					}
				}
			l622:
				add(ruleAuthorSep, position621)
			}
			return true
		l620:
			position, tokenIndex = position620, tokenIndex620
			return false
		},
		/* 85 AuthorSep1 <- <(_? (',' _)? ('&' / AuthorSepSpanish / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd')) _?)> */
		func() bool {
			position624, tokenIndex624 := position, tokenIndex
			{
				position625 := position
				{
					position626, tokenIndex626 := position, tokenIndex
					if !_rules[rule_]() {
						goto l626
					}
					goto l627
				l626:
					position, tokenIndex = position626, tokenIndex626
				}
			l627:
				{
					position628, tokenIndex628 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l628
					}
					position++
					if !_rules[rule_]() {
						goto l628
					}
					goto l629
				l628:
					position, tokenIndex = position628, tokenIndex628
				}
			l629:
				{
					position630, tokenIndex630 := position, tokenIndex
					if buffer[position] != rune('&') {
						goto l631
					}
					position++
					goto l630
				l631:
					position, tokenIndex = position630, tokenIndex630
					if !_rules[ruleAuthorSepSpanish]() {
						goto l632
					}
					goto l630
				l632:
					position, tokenIndex = position630, tokenIndex630
					if buffer[position] != rune('e') {
						goto l633
					}
					position++
					if buffer[position] != rune('t') {
						goto l633
					}
					position++
					goto l630
				l633:
					position, tokenIndex = position630, tokenIndex630
					if buffer[position] != rune('a') {
						goto l634
					}
					position++
					if buffer[position] != rune('n') {
						goto l634
					}
					position++
					if buffer[position] != rune('d') {
						goto l634
					}
					position++
					goto l630
				l634:
					position, tokenIndex = position630, tokenIndex630
					if buffer[position] != rune('a') {
						goto l624
					}
					position++
					if buffer[position] != rune('p') {
						goto l624
					}
					position++
					if buffer[position] != rune('u') {
						goto l624
					}
					position++
					if buffer[position] != rune('d') {
						goto l624
					}
					position++
				}
			l630:
				{
					position635, tokenIndex635 := position, tokenIndex
					if !_rules[rule_]() {
						goto l635
					}
					goto l636
				l635:
					position, tokenIndex = position635, tokenIndex635
				}
			l636:
				add(ruleAuthorSep1, position625)
			}
			return true
		l624:
			position, tokenIndex = position624, tokenIndex624
			return false
		},
		/* 86 AuthorSep2 <- <(_? ',' _?)> */
		func() bool {
			position637, tokenIndex637 := position, tokenIndex
			{
				position638 := position
				{
					position639, tokenIndex639 := position, tokenIndex
					if !_rules[rule_]() {
						goto l639
					}
					goto l640
				l639:
					position, tokenIndex = position639, tokenIndex639
				}
			l640:
				if buffer[position] != rune(',') {
					goto l637
				}
				position++
				{
					position641, tokenIndex641 := position, tokenIndex
					if !_rules[rule_]() {
						goto l641
					}
					goto l642
				l641:
					position, tokenIndex = position641, tokenIndex641
				}
			l642:
				add(ruleAuthorSep2, position638)
			}
			return true
		l637:
			position, tokenIndex = position637, tokenIndex637
			return false
		},
		/* 87 AuthorSepSpanish <- <(_? 'y' _?)> */
		func() bool {
			position643, tokenIndex643 := position, tokenIndex
			{
				position644 := position
				{
					position645, tokenIndex645 := position, tokenIndex
					if !_rules[rule_]() {
						goto l645
					}
					goto l646
				l645:
					position, tokenIndex = position645, tokenIndex645
				}
			l646:
				if buffer[position] != rune('y') {
					goto l643
				}
				position++
				{
					position647, tokenIndex647 := position, tokenIndex
					if !_rules[rule_]() {
						goto l647
					}
					goto l648
				l647:
					position, tokenIndex = position647, tokenIndex647
				}
			l648:
				add(ruleAuthorSepSpanish, position644)
			}
			return true
		l643:
			position, tokenIndex = position643, tokenIndex643
			return false
		},
		/* 88 AuthorEx <- <((('e' 'x' '.'?) / ('m' 's' _ ('i' 'n')) / ('i' 'n')) _)> */
		func() bool {
			position649, tokenIndex649 := position, tokenIndex
			{
				position650 := position
				{
					position651, tokenIndex651 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l652
					}
					position++
					if buffer[position] != rune('x') {
						goto l652
					}
					position++
					{
						position653, tokenIndex653 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l653
						}
						position++
						goto l654
					l653:
						position, tokenIndex = position653, tokenIndex653
					}
				l654:
					goto l651
				l652:
					position, tokenIndex = position651, tokenIndex651
					if buffer[position] != rune('m') {
						goto l655
					}
					position++
					if buffer[position] != rune('s') {
						goto l655
					}
					position++
					if !_rules[rule_]() {
						goto l655
					}
					if buffer[position] != rune('i') {
						goto l655
					}
					position++
					if buffer[position] != rune('n') {
						goto l655
					}
					position++
					goto l651
				l655:
					position, tokenIndex = position651, tokenIndex651
					if buffer[position] != rune('i') {
						goto l649
					}
					position++
					if buffer[position] != rune('n') {
						goto l649
					}
					position++
				}
			l651:
				if !_rules[rule_]() {
					goto l649
				}
				add(ruleAuthorEx, position650)
			}
			return true
		l649:
			position, tokenIndex = position649, tokenIndex649
			return false
		},
		/* 89 AuthorEmend <- <('e' 'm' 'e' 'n' 'd' '.'? _)> */
		func() bool {
			position656, tokenIndex656 := position, tokenIndex
			{
				position657 := position
				if buffer[position] != rune('e') {
					goto l656
				}
				position++
				if buffer[position] != rune('m') {
					goto l656
				}
				position++
				if buffer[position] != rune('e') {
					goto l656
				}
				position++
				if buffer[position] != rune('n') {
					goto l656
				}
				position++
				if buffer[position] != rune('d') {
					goto l656
				}
				position++
				{
					position658, tokenIndex658 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l658
					}
					position++
					goto l659
				l658:
					position, tokenIndex = position658, tokenIndex658
				}
			l659:
				if !_rules[rule_]() {
					goto l656
				}
				add(ruleAuthorEmend, position657)
			}
			return true
		l656:
			position, tokenIndex = position656, tokenIndex656
			return false
		},
		/* 90 Author <- <((Author0 / Author1 / Author2 / UnknownAuthor) (_ AuthorEtAl)?)> */
		func() bool {
			position660, tokenIndex660 := position, tokenIndex
			{
				position661 := position
				{
					position662, tokenIndex662 := position, tokenIndex
					if !_rules[ruleAuthor0]() {
						goto l663
					}
					goto l662
				l663:
					position, tokenIndex = position662, tokenIndex662
					if !_rules[ruleAuthor1]() {
						goto l664
					}
					goto l662
				l664:
					position, tokenIndex = position662, tokenIndex662
					if !_rules[ruleAuthor2]() {
						goto l665
					}
					goto l662
				l665:
					position, tokenIndex = position662, tokenIndex662
					if !_rules[ruleUnknownAuthor]() {
						goto l660
					}
				}
			l662:
				{
					position666, tokenIndex666 := position, tokenIndex
					if !_rules[rule_]() {
						goto l666
					}
					if !_rules[ruleAuthorEtAl]() {
						goto l666
					}
					goto l667
				l666:
					position, tokenIndex = position666, tokenIndex666
				}
			l667:
				add(ruleAuthor, position661)
			}
			return true
		l660:
			position, tokenIndex = position660, tokenIndex660
			return false
		},
		/* 91 Author0 <- <(Author2 FiliusFNoSpace)> */
		func() bool {
			position668, tokenIndex668 := position, tokenIndex
			{
				position669 := position
				if !_rules[ruleAuthor2]() {
					goto l668
				}
				if !_rules[ruleFiliusFNoSpace]() {
					goto l668
				}
				add(ruleAuthor0, position669)
			}
			return true
		l668:
			position, tokenIndex = position668, tokenIndex668
			return false
		},
		/* 92 Author1 <- <(Author2 _? (Filius / AuthorSuffix))> */
		func() bool {
			position670, tokenIndex670 := position, tokenIndex
			{
				position671 := position
				if !_rules[ruleAuthor2]() {
					goto l670
				}
				{
					position672, tokenIndex672 := position, tokenIndex
					if !_rules[rule_]() {
						goto l672
					}
					goto l673
				l672:
					position, tokenIndex = position672, tokenIndex672
				}
			l673:
				{
					position674, tokenIndex674 := position, tokenIndex
					if !_rules[ruleFilius]() {
						goto l675
					}
					goto l674
				l675:
					position, tokenIndex = position674, tokenIndex674
					if !_rules[ruleAuthorSuffix]() {
						goto l670
					}
				}
			l674:
				add(ruleAuthor1, position671)
			}
			return true
		l670:
			position, tokenIndex = position670, tokenIndex670
			return false
		},
		/* 93 Author2 <- <(AuthorWord (_? AuthorWord)*)> */
		func() bool {
			position676, tokenIndex676 := position, tokenIndex
			{
				position677 := position
				if !_rules[ruleAuthorWord]() {
					goto l676
				}
			l678:
				{
					position679, tokenIndex679 := position, tokenIndex
					{
						position680, tokenIndex680 := position, tokenIndex
						if !_rules[rule_]() {
							goto l680
						}
						goto l681
					l680:
						position, tokenIndex = position680, tokenIndex680
					}
				l681:
					if !_rules[ruleAuthorWord]() {
						goto l679
					}
					goto l678
				l679:
					position, tokenIndex = position679, tokenIndex679
				}
				add(ruleAuthor2, position677)
			}
			return true
		l676:
			position, tokenIndex = position676, tokenIndex676
			return false
		},
		/* 94 UnknownAuthor <- <('?' / ((('a' 'u' 'c' 't') / ('a' 'n' 'o' 'n')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position682, tokenIndex682 := position, tokenIndex
			{
				position683 := position
				{
					position684, tokenIndex684 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l685
					}
					position++
					goto l684
				l685:
					position, tokenIndex = position684, tokenIndex684
					{
						position686, tokenIndex686 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l687
						}
						position++
						if buffer[position] != rune('u') {
							goto l687
						}
						position++
						if buffer[position] != rune('c') {
							goto l687
						}
						position++
						if buffer[position] != rune('t') {
							goto l687
						}
						position++
						goto l686
					l687:
						position, tokenIndex = position686, tokenIndex686
						if buffer[position] != rune('a') {
							goto l682
						}
						position++
						if buffer[position] != rune('n') {
							goto l682
						}
						position++
						if buffer[position] != rune('o') {
							goto l682
						}
						position++
						if buffer[position] != rune('n') {
							goto l682
						}
						position++
					}
				l686:
					{
						position688, tokenIndex688 := position, tokenIndex
						{
							position690, tokenIndex690 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l689
							}
							position, tokenIndex = position690, tokenIndex690
						}
						goto l688
					l689:
						position, tokenIndex = position688, tokenIndex688
						if buffer[position] != rune('.') {
							goto l682
						}
						position++
					}
				l688:
				}
			l684:
				add(ruleUnknownAuthor, position683)
			}
			return true
		l682:
			position, tokenIndex = position682, tokenIndex682
			return false
		},
		/* 95 AuthorWord <- <(!(HybridChar / (('b' / 'B') ('o' / 'O') ('l' / 'L') ('d' / 'D') ':')) (AuthorDashInitials / AuthorWord2 / AuthorWord3 / AuthorPrefix))> */
		func() bool {
			position691, tokenIndex691 := position, tokenIndex
			{
				position692 := position
				{
					position693, tokenIndex693 := position, tokenIndex
					{
						position694, tokenIndex694 := position, tokenIndex
						if !_rules[ruleHybridChar]() {
							goto l695
						}
						goto l694
					l695:
						position, tokenIndex = position694, tokenIndex694
						{
							position696, tokenIndex696 := position, tokenIndex
							if buffer[position] != rune('b') {
								goto l697
							}
							position++
							goto l696
						l697:
							position, tokenIndex = position696, tokenIndex696
							if buffer[position] != rune('B') {
								goto l693
							}
							position++
						}
					l696:
						{
							position698, tokenIndex698 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l699
							}
							position++
							goto l698
						l699:
							position, tokenIndex = position698, tokenIndex698
							if buffer[position] != rune('O') {
								goto l693
							}
							position++
						}
					l698:
						{
							position700, tokenIndex700 := position, tokenIndex
							if buffer[position] != rune('l') {
								goto l701
							}
							position++
							goto l700
						l701:
							position, tokenIndex = position700, tokenIndex700
							if buffer[position] != rune('L') {
								goto l693
							}
							position++
						}
					l700:
						{
							position702, tokenIndex702 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l703
							}
							position++
							goto l702
						l703:
							position, tokenIndex = position702, tokenIndex702
							if buffer[position] != rune('D') {
								goto l693
							}
							position++
						}
					l702:
						if buffer[position] != rune(':') {
							goto l693
						}
						position++
					}
				l694:
					goto l691
				l693:
					position, tokenIndex = position693, tokenIndex693
				}
				{
					position704, tokenIndex704 := position, tokenIndex
					if !_rules[ruleAuthorDashInitials]() {
						goto l705
					}
					goto l704
				l705:
					position, tokenIndex = position704, tokenIndex704
					if !_rules[ruleAuthorWord2]() {
						goto l706
					}
					goto l704
				l706:
					position, tokenIndex = position704, tokenIndex704
					if !_rules[ruleAuthorWord3]() {
						goto l707
					}
					goto l704
				l707:
					position, tokenIndex = position704, tokenIndex704
					if !_rules[ruleAuthorPrefix]() {
						goto l691
					}
				}
			l704:
				add(ruleAuthorWord, position692)
			}
			return true
		l691:
			position, tokenIndex = position691, tokenIndex691
			return false
		},
		/* 96 AuthorEtAl <- <(('a' 'r' 'g' '.') / ('e' 't' ' ' 'a' 'l' '.' '{' '?' '}') / ((('e' 't') / '&') (' ' 'a' 'l') '.'?))> */
		func() bool {
			position708, tokenIndex708 := position, tokenIndex
			{
				position709 := position
				{
					position710, tokenIndex710 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l711
					}
					position++
					if buffer[position] != rune('r') {
						goto l711
					}
					position++
					if buffer[position] != rune('g') {
						goto l711
					}
					position++
					if buffer[position] != rune('.') {
						goto l711
					}
					position++
					goto l710
				l711:
					position, tokenIndex = position710, tokenIndex710
					if buffer[position] != rune('e') {
						goto l712
					}
					position++
					if buffer[position] != rune('t') {
						goto l712
					}
					position++
					if buffer[position] != rune(' ') {
						goto l712
					}
					position++
					if buffer[position] != rune('a') {
						goto l712
					}
					position++
					if buffer[position] != rune('l') {
						goto l712
					}
					position++
					if buffer[position] != rune('.') {
						goto l712
					}
					position++
					if buffer[position] != rune('{') {
						goto l712
					}
					position++
					if buffer[position] != rune('?') {
						goto l712
					}
					position++
					if buffer[position] != rune('}') {
						goto l712
					}
					position++
					goto l710
				l712:
					position, tokenIndex = position710, tokenIndex710
					{
						position713, tokenIndex713 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l714
						}
						position++
						if buffer[position] != rune('t') {
							goto l714
						}
						position++
						goto l713
					l714:
						position, tokenIndex = position713, tokenIndex713
						if buffer[position] != rune('&') {
							goto l708
						}
						position++
					}
				l713:
					if buffer[position] != rune(' ') {
						goto l708
					}
					position++
					if buffer[position] != rune('a') {
						goto l708
					}
					position++
					if buffer[position] != rune('l') {
						goto l708
					}
					position++
					{
						position715, tokenIndex715 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l715
						}
						position++
						goto l716
					l715:
						position, tokenIndex = position715, tokenIndex715
					}
				l716:
				}
			l710:
				add(ruleAuthorEtAl, position709)
			}
			return true
		l708:
			position, tokenIndex = position708, tokenIndex708
			return false
		},
		/* 97 AuthorWord2 <- <(AuthorWord3 Dash AuthorWordSoft)> */
		func() bool {
			position717, tokenIndex717 := position, tokenIndex
			{
				position718 := position
				if !_rules[ruleAuthorWord3]() {
					goto l717
				}
				if !_rules[ruleDash]() {
					goto l717
				}
				if !_rules[ruleAuthorWordSoft]() {
					goto l717
				}
				add(ruleAuthorWord2, position718)
			}
			return true
		l717:
			position, tokenIndex = position717, tokenIndex717
			return false
		},
		/* 98 AuthorWord3 <- <(AuthorPrefixGlued? (AllCapsAuthorWord / CapAuthorWord) '.'?)> */
		func() bool {
			position719, tokenIndex719 := position, tokenIndex
			{
				position720 := position
				{
					position721, tokenIndex721 := position, tokenIndex
					if !_rules[ruleAuthorPrefixGlued]() {
						goto l721
					}
					goto l722
				l721:
					position, tokenIndex = position721, tokenIndex721
				}
			l722:
				{
					position723, tokenIndex723 := position, tokenIndex
					if !_rules[ruleAllCapsAuthorWord]() {
						goto l724
					}
					goto l723
				l724:
					position, tokenIndex = position723, tokenIndex723
					if !_rules[ruleCapAuthorWord]() {
						goto l719
					}
				}
			l723:
				{
					position725, tokenIndex725 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l725
					}
					position++
					goto l726
				l725:
					position, tokenIndex = position725, tokenIndex725
				}
			l726:
				add(ruleAuthorWord3, position720)
			}
			return true
		l719:
			position, tokenIndex = position719, tokenIndex719
			return false
		},
		/* 99 AuthorDashInitials <- <(AuthorUpperChar '.'? Dash AuthorUpperChar '.'?)> */
		func() bool {
			position727, tokenIndex727 := position, tokenIndex
			{
				position728 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l727
				}
				{
					position729, tokenIndex729 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l729
					}
					position++
					goto l730
				l729:
					position, tokenIndex = position729, tokenIndex729
				}
			l730:
				if !_rules[ruleDash]() {
					goto l727
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l727
				}
				{
					position731, tokenIndex731 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l731
					}
					position++
					goto l732
				l731:
					position, tokenIndex = position731, tokenIndex731
				}
			l732:
				add(ruleAuthorDashInitials, position728)
			}
			return true
		l727:
			position, tokenIndex = position727, tokenIndex727
			return false
		},
		/* 100 AuthorWordSoft <- <(((AuthorUpperChar (AuthorUpperChar+ / AuthorLowerChar+)) / AuthorLowerChar+) '.'?)> */
		func() bool {
			position733, tokenIndex733 := position, tokenIndex
			{
				position734 := position
				{
					position735, tokenIndex735 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l736
					}
					{
						position737, tokenIndex737 := position, tokenIndex
						if !_rules[ruleAuthorUpperChar]() {
							goto l738
						}
					l739:
						{
							position740, tokenIndex740 := position, tokenIndex
							if !_rules[ruleAuthorUpperChar]() {
								goto l740
							}
							goto l739
						l740:
							position, tokenIndex = position740, tokenIndex740
						}
						goto l737
					l738:
						position, tokenIndex = position737, tokenIndex737
						if !_rules[ruleAuthorLowerChar]() {
							goto l736
						}
					l741:
						{
							position742, tokenIndex742 := position, tokenIndex
							if !_rules[ruleAuthorLowerChar]() {
								goto l742
							}
							goto l741
						l742:
							position, tokenIndex = position742, tokenIndex742
						}
					}
				l737:
					goto l735
				l736:
					position, tokenIndex = position735, tokenIndex735
					if !_rules[ruleAuthorLowerChar]() {
						goto l733
					}
				l743:
					{
						position744, tokenIndex744 := position, tokenIndex
						if !_rules[ruleAuthorLowerChar]() {
							goto l744
						}
						goto l743
					l744:
						position, tokenIndex = position744, tokenIndex744
					}
				}
			l735:
				{
					position745, tokenIndex745 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l745
					}
					position++
					goto l746
				l745:
					position, tokenIndex = position745, tokenIndex745
				}
			l746:
				add(ruleAuthorWordSoft, position734)
			}
			return true
		l733:
			position, tokenIndex = position733, tokenIndex733
			return false
		},
		/* 101 CapAuthorWord <- <(AuthorUpperChar AuthorLowerChar*)> */
		func() bool {
			position747, tokenIndex747 := position, tokenIndex
			{
				position748 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l747
				}
			l749:
				{
					position750, tokenIndex750 := position, tokenIndex
					if !_rules[ruleAuthorLowerChar]() {
						goto l750
					}
					goto l749
				l750:
					position, tokenIndex = position750, tokenIndex750
				}
				add(ruleCapAuthorWord, position748)
			}
			return true
		l747:
			position, tokenIndex = position747, tokenIndex747
			return false
		},
		/* 102 AllCapsAuthorWord <- <(AuthorUpperChar AuthorUpperChar+)> */
		func() bool {
			position751, tokenIndex751 := position, tokenIndex
			{
				position752 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l751
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l751
				}
			l753:
				{
					position754, tokenIndex754 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l754
					}
					goto l753
				l754:
					position, tokenIndex = position754, tokenIndex754
				}
				add(ruleAllCapsAuthorWord, position752)
			}
			return true
		l751:
			position, tokenIndex = position751, tokenIndex751
			return false
		},
		/* 103 Filius <- <(FiliusF / ('f' 'i' 'l' '.') / ('f' 'i' 'l' 'i' 'u' 's'))> */
		func() bool {
			position755, tokenIndex755 := position, tokenIndex
			{
				position756 := position
				{
					position757, tokenIndex757 := position, tokenIndex
					if !_rules[ruleFiliusF]() {
						goto l758
					}
					goto l757
				l758:
					position, tokenIndex = position757, tokenIndex757
					if buffer[position] != rune('f') {
						goto l759
					}
					position++
					if buffer[position] != rune('i') {
						goto l759
					}
					position++
					if buffer[position] != rune('l') {
						goto l759
					}
					position++
					if buffer[position] != rune('.') {
						goto l759
					}
					position++
					goto l757
				l759:
					position, tokenIndex = position757, tokenIndex757
					if buffer[position] != rune('f') {
						goto l755
					}
					position++
					if buffer[position] != rune('i') {
						goto l755
					}
					position++
					if buffer[position] != rune('l') {
						goto l755
					}
					position++
					if buffer[position] != rune('i') {
						goto l755
					}
					position++
					if buffer[position] != rune('u') {
						goto l755
					}
					position++
					if buffer[position] != rune('s') {
						goto l755
					}
					position++
				}
			l757:
				add(ruleFilius, position756)
			}
			return true
		l755:
			position, tokenIndex = position755, tokenIndex755
			return false
		},
		/* 104 FiliusF <- <('f' '.' !(_ Word))> */
		func() bool {
			position760, tokenIndex760 := position, tokenIndex
			{
				position761 := position
				if buffer[position] != rune('f') {
					goto l760
				}
				position++
				if buffer[position] != rune('.') {
					goto l760
				}
				position++
				{
					position762, tokenIndex762 := position, tokenIndex
					if !_rules[rule_]() {
						goto l762
					}
					if !_rules[ruleWord]() {
						goto l762
					}
					goto l760
				l762:
					position, tokenIndex = position762, tokenIndex762
				}
				add(ruleFiliusF, position761)
			}
			return true
		l760:
			position, tokenIndex = position760, tokenIndex760
			return false
		},
		/* 105 FiliusFNoSpace <- <('f' '.')> */
		func() bool {
			position763, tokenIndex763 := position, tokenIndex
			{
				position764 := position
				if buffer[position] != rune('f') {
					goto l763
				}
				position++
				if buffer[position] != rune('.') {
					goto l763
				}
				position++
				add(ruleFiliusFNoSpace, position764)
			}
			return true
		l763:
			position, tokenIndex = position763, tokenIndex763
			return false
		},
		/* 106 AuthorSuffix <- <(('b' 'i' 's') / ('t' 'e' 'r'))> */
		func() bool {
			position765, tokenIndex765 := position, tokenIndex
			{
				position766 := position
				{
					position767, tokenIndex767 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l768
					}
					position++
					if buffer[position] != rune('i') {
						goto l768
					}
					position++
					if buffer[position] != rune('s') {
						goto l768
					}
					position++
					goto l767
				l768:
					position, tokenIndex = position767, tokenIndex767
					if buffer[position] != rune('t') {
						goto l765
					}
					position++
					if buffer[position] != rune('e') {
						goto l765
					}
					position++
					if buffer[position] != rune('r') {
						goto l765
					}
					position++
				}
			l767:
				add(ruleAuthorSuffix, position766)
			}
			return true
		l765:
			position, tokenIndex = position765, tokenIndex765
			return false
		},
		/* 107 AuthorPrefixGlued <- <(('d' / 'O' / 'L' / ('M' 'c') / 'M') Apostrophe)> */
		func() bool {
			position769, tokenIndex769 := position, tokenIndex
			{
				position770 := position
				{
					position771, tokenIndex771 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l772
					}
					position++
					goto l771
				l772:
					position, tokenIndex = position771, tokenIndex771
					if buffer[position] != rune('O') {
						goto l773
					}
					position++
					goto l771
				l773:
					position, tokenIndex = position771, tokenIndex771
					if buffer[position] != rune('L') {
						goto l774
					}
					position++
					goto l771
				l774:
					position, tokenIndex = position771, tokenIndex771
					if buffer[position] != rune('M') {
						goto l775
					}
					position++
					if buffer[position] != rune('c') {
						goto l775
					}
					position++
					goto l771
				l775:
					position, tokenIndex = position771, tokenIndex771
					if buffer[position] != rune('M') {
						goto l769
					}
					position++
				}
			l771:
				if !_rules[ruleApostrophe]() {
					goto l769
				}
				add(ruleAuthorPrefixGlued, position770)
			}
			return true
		l769:
			position, tokenIndex = position769, tokenIndex769
			return false
		},
		/* 108 AuthorPrefix <- <(AuthorPrefix1 / AuthorPrefix2)> */
		func() bool {
			position776, tokenIndex776 := position, tokenIndex
			{
				position777 := position
				{
					position778, tokenIndex778 := position, tokenIndex
					if !_rules[ruleAuthorPrefix1]() {
						goto l779
					}
					goto l778
				l779:
					position, tokenIndex = position778, tokenIndex778
					if !_rules[ruleAuthorPrefix2]() {
						goto l776
					}
				}
			l778:
				add(ruleAuthorPrefix, position777)
			}
			return true
		l776:
			position, tokenIndex = position776, tokenIndex776
			return false
		},
		/* 109 AuthorPrefix2 <- <(('v' '.' (_? ('d' '.'))?) / (Apostrophe 't'))> */
		func() bool {
			position780, tokenIndex780 := position, tokenIndex
			{
				position781 := position
				{
					position782, tokenIndex782 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l783
					}
					position++
					if buffer[position] != rune('.') {
						goto l783
					}
					position++
					{
						position784, tokenIndex784 := position, tokenIndex
						{
							position786, tokenIndex786 := position, tokenIndex
							if !_rules[rule_]() {
								goto l786
							}
							goto l787
						l786:
							position, tokenIndex = position786, tokenIndex786
						}
					l787:
						if buffer[position] != rune('d') {
							goto l784
						}
						position++
						if buffer[position] != rune('.') {
							goto l784
						}
						position++
						goto l785
					l784:
						position, tokenIndex = position784, tokenIndex784
					}
				l785:
					goto l782
				l783:
					position, tokenIndex = position782, tokenIndex782
					if !_rules[ruleApostrophe]() {
						goto l780
					}
					if buffer[position] != rune('t') {
						goto l780
					}
					position++
				}
			l782:
				add(ruleAuthorPrefix2, position781)
			}
			return true
		l780:
			position, tokenIndex = position780, tokenIndex780
			return false
		},
		/* 110 AuthorPrefix1 <- <((('a' 'b') / ('a' 'f') / ('b' 'i' 's') / ('d' 'a') / ('d' 'e' 'r') / ('d' 'e' 's') / ('d' 'e' 'n') / ('d' 'e' 'l' 'l' 'a') / ('d' 'e' 'l' 'a') / ('d' 'e' 'l' 'l' 'e') / ('d' 'e' 'l') / ('d' 'e' ' ' 'l' 'o' 's') / ('d' 'e') / ('d' 'i') / ('d' 'o' 's') / ('d' 'u') / ('d' 'o') / ('e' 'l') / ('l' 'a') / ('l' 'e') / ('t' 'e' 'n') / ('t' 'e' 'r') / ('v' 'a' 'n') / ('d' Apostrophe) / ('i' 'n' Apostrophe 't') / ('z' 'u' 'r') / ('z' 'u') / ('v' 'o' 'n' (_ (('d' '.') / ('d' 'e' 'm')))?) / ('v' (_ 'd')?)) &_)> */
		func() bool {
			position788, tokenIndex788 := position, tokenIndex
			{
				position789 := position
				{
					position790, tokenIndex790 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l791
					}
					position++
					if buffer[position] != rune('b') {
						goto l791
					}
					position++
					goto l790
				l791:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('a') {
						goto l792
					}
					position++
					if buffer[position] != rune('f') {
						goto l792
					}
					position++
					goto l790
				l792:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('b') {
						goto l793
					}
					position++
					if buffer[position] != rune('i') {
						goto l793
					}
					position++
					if buffer[position] != rune('s') {
						goto l793
					}
					position++
					goto l790
				l793:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('d') {
						goto l794
					}
					position++
					if buffer[position] != rune('a') {
						goto l794
					}
					position++
					goto l790
				l794:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('d') {
						goto l795
					}
					position++
					if buffer[position] != rune('e') {
						goto l795
					}
					position++
					if buffer[position] != rune('r') {
						goto l795
					}
					position++
					goto l790
				l795:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('d') {
						goto l796
					}
					position++
					if buffer[position] != rune('e') {
						goto l796
					}
					position++
					if buffer[position] != rune('s') {
						goto l796
					}
					position++
					goto l790
				l796:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('d') {
						goto l797
					}
					position++
					if buffer[position] != rune('e') {
						goto l797
					}
					position++
					if buffer[position] != rune('n') {
						goto l797
					}
					position++
					goto l790
				l797:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('d') {
						goto l798
					}
					position++
					if buffer[position] != rune('e') {
						goto l798
					}
					position++
					if buffer[position] != rune('l') {
						goto l798
					}
					position++
					if buffer[position] != rune('l') {
						goto l798
					}
					position++
					if buffer[position] != rune('a') {
						goto l798
					}
					position++
					goto l790
				l798:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('d') {
						goto l799
					}
					position++
					if buffer[position] != rune('e') {
						goto l799
					}
					position++
					if buffer[position] != rune('l') {
						goto l799
					}
					position++
					if buffer[position] != rune('a') {
						goto l799
					}
					position++
					goto l790
				l799:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('d') {
						goto l800
					}
					position++
					if buffer[position] != rune('e') {
						goto l800
					}
					position++
					if buffer[position] != rune('l') {
						goto l800
					}
					position++
					if buffer[position] != rune('l') {
						goto l800
					}
					position++
					if buffer[position] != rune('e') {
						goto l800
					}
					position++
					goto l790
				l800:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('d') {
						goto l801
					}
					position++
					if buffer[position] != rune('e') {
						goto l801
					}
					position++
					if buffer[position] != rune('l') {
						goto l801
					}
					position++
					goto l790
				l801:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('d') {
						goto l802
					}
					position++
					if buffer[position] != rune('e') {
						goto l802
					}
					position++
					if buffer[position] != rune(' ') {
						goto l802
					}
					position++
					if buffer[position] != rune('l') {
						goto l802
					}
					position++
					if buffer[position] != rune('o') {
						goto l802
					}
					position++
					if buffer[position] != rune('s') {
						goto l802
					}
					position++
					goto l790
				l802:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('d') {
						goto l803
					}
					position++
					if buffer[position] != rune('e') {
						goto l803
					}
					position++
					goto l790
				l803:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('d') {
						goto l804
					}
					position++
					if buffer[position] != rune('i') {
						goto l804
					}
					position++
					goto l790
				l804:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('d') {
						goto l805
					}
					position++
					if buffer[position] != rune('o') {
						goto l805
					}
					position++
					if buffer[position] != rune('s') {
						goto l805
					}
					position++
					goto l790
				l805:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('d') {
						goto l806
					}
					position++
					if buffer[position] != rune('u') {
						goto l806
					}
					position++
					goto l790
				l806:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('d') {
						goto l807
					}
					position++
					if buffer[position] != rune('o') {
						goto l807
					}
					position++
					goto l790
				l807:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('e') {
						goto l808
					}
					position++
					if buffer[position] != rune('l') {
						goto l808
					}
					position++
					goto l790
				l808:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('l') {
						goto l809
					}
					position++
					if buffer[position] != rune('a') {
						goto l809
					}
					position++
					goto l790
				l809:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('l') {
						goto l810
					}
					position++
					if buffer[position] != rune('e') {
						goto l810
					}
					position++
					goto l790
				l810:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('t') {
						goto l811
					}
					position++
					if buffer[position] != rune('e') {
						goto l811
					}
					position++
					if buffer[position] != rune('n') {
						goto l811
					}
					position++
					goto l790
				l811:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('t') {
						goto l812
					}
					position++
					if buffer[position] != rune('e') {
						goto l812
					}
					position++
					if buffer[position] != rune('r') {
						goto l812
					}
					position++
					goto l790
				l812:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('v') {
						goto l813
					}
					position++
					if buffer[position] != rune('a') {
						goto l813
					}
					position++
					if buffer[position] != rune('n') {
						goto l813
					}
					position++
					goto l790
				l813:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('d') {
						goto l814
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l814
					}
					goto l790
				l814:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('i') {
						goto l815
					}
					position++
					if buffer[position] != rune('n') {
						goto l815
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l815
					}
					if buffer[position] != rune('t') {
						goto l815
					}
					position++
					goto l790
				l815:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('z') {
						goto l816
					}
					position++
					if buffer[position] != rune('u') {
						goto l816
					}
					position++
					if buffer[position] != rune('r') {
						goto l816
					}
					position++
					goto l790
				l816:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('z') {
						goto l817
					}
					position++
					if buffer[position] != rune('u') {
						goto l817
					}
					position++
					goto l790
				l817:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('v') {
						goto l818
					}
					position++
					if buffer[position] != rune('o') {
						goto l818
					}
					position++
					if buffer[position] != rune('n') {
						goto l818
					}
					position++
					{
						position819, tokenIndex819 := position, tokenIndex
						if !_rules[rule_]() {
							goto l819
						}
						{
							position821, tokenIndex821 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l822
							}
							position++
							if buffer[position] != rune('.') {
								goto l822
							}
							position++
							goto l821
						l822:
							position, tokenIndex = position821, tokenIndex821
							if buffer[position] != rune('d') {
								goto l819
							}
							position++
							if buffer[position] != rune('e') {
								goto l819
							}
							position++
							if buffer[position] != rune('m') {
								goto l819
							}
							position++
						}
					l821:
						goto l820
					l819:
						position, tokenIndex = position819, tokenIndex819
					}
				l820:
					goto l790
				l818:
					position, tokenIndex = position790, tokenIndex790
					if buffer[position] != rune('v') {
						goto l788
					}
					position++
					{
						position823, tokenIndex823 := position, tokenIndex
						if !_rules[rule_]() {
							goto l823
						}
						if buffer[position] != rune('d') {
							goto l823
						}
						position++
						goto l824
					l823:
						position, tokenIndex = position823, tokenIndex823
					}
				l824:
				}
			l790:
				{
					position825, tokenIndex825 := position, tokenIndex
					if !_rules[rule_]() {
						goto l788
					}
					position, tokenIndex = position825, tokenIndex825
				}
				add(ruleAuthorPrefix1, position789)
			}
			return true
		l788:
			position, tokenIndex = position788, tokenIndex788
			return false
		},
		/* 111 AuthorUpperChar <- <(UpperASCII / MiscodedChar / ('À' / 'Á' / 'Â' / 'Ã' / 'Ä' / 'Å' / 'Æ' / 'Ç' / 'È' / 'É' / 'Ê' / 'Ë' / 'Ì' / 'Í' / 'Î' / 'Ï' / 'Ð' / 'Ñ' / 'Ò' / 'Ó' / 'Ô' / 'Õ' / 'Ö' / 'Ø' / 'Ù' / 'Ú' / 'Û' / 'Ü' / 'Ý' / 'Ć' / 'Č' / 'Ď' / 'İ' / 'Ķ' / 'Ĺ' / 'ĺ' / 'Ľ' / 'ľ' / 'Ł' / 'ł' / 'Ņ' / 'Ō' / 'Ő' / 'Œ' / 'Ř' / 'Ś' / 'Ŝ' / 'Ş' / 'Š' / 'Ÿ' / 'Ź' / 'Ż' / 'Ž' / 'ƒ' / 'Ǿ' / 'Ș' / 'Ț'))> */
		func() bool {
			position826, tokenIndex826 := position, tokenIndex
			{
				position827 := position
				{
					position828, tokenIndex828 := position, tokenIndex
					if !_rules[ruleUpperASCII]() {
						goto l829
					}
					goto l828
				l829:
					position, tokenIndex = position828, tokenIndex828
					if !_rules[ruleMiscodedChar]() {
						goto l830
					}
					goto l828
				l830:
					position, tokenIndex = position828, tokenIndex828
					{
						position831, tokenIndex831 := position, tokenIndex
						if buffer[position] != rune('À') {
							goto l832
						}
						position++
						goto l831
					l832:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Á') {
							goto l833
						}
						position++
						goto l831
					l833:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Â') {
							goto l834
						}
						position++
						goto l831
					l834:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ã') {
							goto l835
						}
						position++
						goto l831
					l835:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ä') {
							goto l836
						}
						position++
						goto l831
					l836:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Å') {
							goto l837
						}
						position++
						goto l831
					l837:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Æ') {
							goto l838
						}
						position++
						goto l831
					l838:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ç') {
							goto l839
						}
						position++
						goto l831
					l839:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('È') {
							goto l840
						}
						position++
						goto l831
					l840:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('É') {
							goto l841
						}
						position++
						goto l831
					l841:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ê') {
							goto l842
						}
						position++
						goto l831
					l842:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ë') {
							goto l843
						}
						position++
						goto l831
					l843:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ì') {
							goto l844
						}
						position++
						goto l831
					l844:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Í') {
							goto l845
						}
						position++
						goto l831
					l845:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Î') {
							goto l846
						}
						position++
						goto l831
					l846:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ï') {
							goto l847
						}
						position++
						goto l831
					l847:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ð') {
							goto l848
						}
						position++
						goto l831
					l848:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ñ') {
							goto l849
						}
						position++
						goto l831
					l849:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ò') {
							goto l850
						}
						position++
						goto l831
					l850:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ó') {
							goto l851
						}
						position++
						goto l831
					l851:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ô') {
							goto l852
						}
						position++
						goto l831
					l852:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Õ') {
							goto l853
						}
						position++
						goto l831
					l853:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ö') {
							goto l854
						}
						position++
						goto l831
					l854:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ø') {
							goto l855
						}
						position++
						goto l831
					l855:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ù') {
							goto l856
						}
						position++
						goto l831
					l856:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ú') {
							goto l857
						}
						position++
						goto l831
					l857:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Û') {
							goto l858
						}
						position++
						goto l831
					l858:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ü') {
							goto l859
						}
						position++
						goto l831
					l859:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ý') {
							goto l860
						}
						position++
						goto l831
					l860:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ć') {
							goto l861
						}
						position++
						goto l831
					l861:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Č') {
							goto l862
						}
						position++
						goto l831
					l862:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ď') {
							goto l863
						}
						position++
						goto l831
					l863:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('İ') {
							goto l864
						}
						position++
						goto l831
					l864:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ķ') {
							goto l865
						}
						position++
						goto l831
					l865:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ĺ') {
							goto l866
						}
						position++
						goto l831
					l866:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('ĺ') {
							goto l867
						}
						position++
						goto l831
					l867:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ľ') {
							goto l868
						}
						position++
						goto l831
					l868:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('ľ') {
							goto l869
						}
						position++
						goto l831
					l869:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ł') {
							goto l870
						}
						position++
						goto l831
					l870:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('ł') {
							goto l871
						}
						position++
						goto l831
					l871:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ņ') {
							goto l872
						}
						position++
						goto l831
					l872:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ō') {
							goto l873
						}
						position++
						goto l831
					l873:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ő') {
							goto l874
						}
						position++
						goto l831
					l874:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Œ') {
							goto l875
						}
						position++
						goto l831
					l875:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ř') {
							goto l876
						}
						position++
						goto l831
					l876:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ś') {
							goto l877
						}
						position++
						goto l831
					l877:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ŝ') {
							goto l878
						}
						position++
						goto l831
					l878:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ş') {
							goto l879
						}
						position++
						goto l831
					l879:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Š') {
							goto l880
						}
						position++
						goto l831
					l880:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ÿ') {
							goto l881
						}
						position++
						goto l831
					l881:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ź') {
							goto l882
						}
						position++
						goto l831
					l882:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ż') {
							goto l883
						}
						position++
						goto l831
					l883:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ž') {
							goto l884
						}
						position++
						goto l831
					l884:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('ƒ') {
							goto l885
						}
						position++
						goto l831
					l885:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ǿ') {
							goto l886
						}
						position++
						goto l831
					l886:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ș') {
							goto l887
						}
						position++
						goto l831
					l887:
						position, tokenIndex = position831, tokenIndex831
						if buffer[position] != rune('Ț') {
							goto l826
						}
						position++
					}
				l831:
				}
			l828:
				add(ruleAuthorUpperChar, position827)
			}
			return true
		l826:
			position, tokenIndex = position826, tokenIndex826
			return false
		},
		/* 112 AuthorLowerChar <- <(LowerASCII / MiscodedChar / Apostrophe / ('à' / 'á' / 'â' / 'ã' / 'ä' / 'å' / 'æ' / 'ç' / 'è' / 'é' / 'ê' / 'ë' / 'ì' / 'í' / 'î' / 'ï' / 'ð' / 'ñ' / 'ò' / 'ó' / 'ó' / 'ô' / 'õ' / 'ö' / 'ø' / 'ù' / 'ú' / 'û' / 'ü' / 'ý' / 'ÿ' / 'ā' / 'ă' / 'ą' / 'ć' / 'ĉ' / 'č' / 'ď' / 'đ' / 'ē' / 'ĕ' / 'ė' / 'ę' / 'ě' / 'ğ' / 'ī' / 'ĭ' / 'İ' / 'ı' / 'ĺ' / 'ľ' / 'ł' / 'ń' / 'ņ' / 'ň' / 'ŏ' / 'ő' / 'œ' / 'ŕ' / 'ř' / 'ś' / 'ş' / 'š' / 'ţ' / 'ť' / 'ũ' / 'ū' / 'ŭ' / 'ů' / 'ű' / 'ź' / 'ż' / 'ž' / 'ſ' / 'ǎ' / 'ǔ' / 'ǧ' / 'ș' / 'ț' / 'ȳ' / 'ß'))> */
		func() bool {
			position888, tokenIndex888 := position, tokenIndex
			{
				position889 := position
				{
					position890, tokenIndex890 := position, tokenIndex
					if !_rules[ruleLowerASCII]() {
						goto l891
					}
					goto l890
				l891:
					position, tokenIndex = position890, tokenIndex890
					if !_rules[ruleMiscodedChar]() {
						goto l892
					}
					goto l890
				l892:
					position, tokenIndex = position890, tokenIndex890
					if !_rules[ruleApostrophe]() {
						goto l893
					}
					goto l890
				l893:
					position, tokenIndex = position890, tokenIndex890
					{
						position894, tokenIndex894 := position, tokenIndex
						if buffer[position] != rune('à') {
							goto l895
						}
						position++
						goto l894
					l895:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('á') {
							goto l896
						}
						position++
						goto l894
					l896:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('â') {
							goto l897
						}
						position++
						goto l894
					l897:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ã') {
							goto l898
						}
						position++
						goto l894
					l898:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ä') {
							goto l899
						}
						position++
						goto l894
					l899:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('å') {
							goto l900
						}
						position++
						goto l894
					l900:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('æ') {
							goto l901
						}
						position++
						goto l894
					l901:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ç') {
							goto l902
						}
						position++
						goto l894
					l902:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('è') {
							goto l903
						}
						position++
						goto l894
					l903:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('é') {
							goto l904
						}
						position++
						goto l894
					l904:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ê') {
							goto l905
						}
						position++
						goto l894
					l905:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ë') {
							goto l906
						}
						position++
						goto l894
					l906:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ì') {
							goto l907
						}
						position++
						goto l894
					l907:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('í') {
							goto l908
						}
						position++
						goto l894
					l908:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('î') {
							goto l909
						}
						position++
						goto l894
					l909:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ï') {
							goto l910
						}
						position++
						goto l894
					l910:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ð') {
							goto l911
						}
						position++
						goto l894
					l911:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ñ') {
							goto l912
						}
						position++
						goto l894
					l912:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ò') {
							goto l913
						}
						position++
						goto l894
					l913:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ó') {
							goto l914
						}
						position++
						goto l894
					l914:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ó') {
							goto l915
						}
						position++
						goto l894
					l915:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ô') {
							goto l916
						}
						position++
						goto l894
					l916:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('õ') {
							goto l917
						}
						position++
						goto l894
					l917:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ö') {
							goto l918
						}
						position++
						goto l894
					l918:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ø') {
							goto l919
						}
						position++
						goto l894
					l919:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ù') {
							goto l920
						}
						position++
						goto l894
					l920:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ú') {
							goto l921
						}
						position++
						goto l894
					l921:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('û') {
							goto l922
						}
						position++
						goto l894
					l922:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ü') {
							goto l923
						}
						position++
						goto l894
					l923:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ý') {
							goto l924
						}
						position++
						goto l894
					l924:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ÿ') {
							goto l925
						}
						position++
						goto l894
					l925:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ā') {
							goto l926
						}
						position++
						goto l894
					l926:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ă') {
							goto l927
						}
						position++
						goto l894
					l927:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ą') {
							goto l928
						}
						position++
						goto l894
					l928:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ć') {
							goto l929
						}
						position++
						goto l894
					l929:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ĉ') {
							goto l930
						}
						position++
						goto l894
					l930:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('č') {
							goto l931
						}
						position++
						goto l894
					l931:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ď') {
							goto l932
						}
						position++
						goto l894
					l932:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('đ') {
							goto l933
						}
						position++
						goto l894
					l933:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ē') {
							goto l934
						}
						position++
						goto l894
					l934:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ĕ') {
							goto l935
						}
						position++
						goto l894
					l935:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ė') {
							goto l936
						}
						position++
						goto l894
					l936:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ę') {
							goto l937
						}
						position++
						goto l894
					l937:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ě') {
							goto l938
						}
						position++
						goto l894
					l938:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ğ') {
							goto l939
						}
						position++
						goto l894
					l939:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ī') {
							goto l940
						}
						position++
						goto l894
					l940:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ĭ') {
							goto l941
						}
						position++
						goto l894
					l941:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('İ') {
							goto l942
						}
						position++
						goto l894
					l942:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ı') {
							goto l943
						}
						position++
						goto l894
					l943:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ĺ') {
							goto l944
						}
						position++
						goto l894
					l944:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ľ') {
							goto l945
						}
						position++
						goto l894
					l945:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ł') {
							goto l946
						}
						position++
						goto l894
					l946:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ń') {
							goto l947
						}
						position++
						goto l894
					l947:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ņ') {
							goto l948
						}
						position++
						goto l894
					l948:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ň') {
							goto l949
						}
						position++
						goto l894
					l949:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ŏ') {
							goto l950
						}
						position++
						goto l894
					l950:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ő') {
							goto l951
						}
						position++
						goto l894
					l951:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('œ') {
							goto l952
						}
						position++
						goto l894
					l952:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ŕ') {
							goto l953
						}
						position++
						goto l894
					l953:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ř') {
							goto l954
						}
						position++
						goto l894
					l954:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ś') {
							goto l955
						}
						position++
						goto l894
					l955:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ş') {
							goto l956
						}
						position++
						goto l894
					l956:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('š') {
							goto l957
						}
						position++
						goto l894
					l957:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ţ') {
							goto l958
						}
						position++
						goto l894
					l958:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ť') {
							goto l959
						}
						position++
						goto l894
					l959:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ũ') {
							goto l960
						}
						position++
						goto l894
					l960:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ū') {
							goto l961
						}
						position++
						goto l894
					l961:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ŭ') {
							goto l962
						}
						position++
						goto l894
					l962:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ů') {
							goto l963
						}
						position++
						goto l894
					l963:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ű') {
							goto l964
						}
						position++
						goto l894
					l964:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ź') {
							goto l965
						}
						position++
						goto l894
					l965:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ż') {
							goto l966
						}
						position++
						goto l894
					l966:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ž') {
							goto l967
						}
						position++
						goto l894
					l967:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ſ') {
							goto l968
						}
						position++
						goto l894
					l968:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ǎ') {
							goto l969
						}
						position++
						goto l894
					l969:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ǔ') {
							goto l970
						}
						position++
						goto l894
					l970:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ǧ') {
							goto l971
						}
						position++
						goto l894
					l971:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ș') {
							goto l972
						}
						position++
						goto l894
					l972:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ț') {
							goto l973
						}
						position++
						goto l894
					l973:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ȳ') {
							goto l974
						}
						position++
						goto l894
					l974:
						position, tokenIndex = position894, tokenIndex894
						if buffer[position] != rune('ß') {
							goto l888
						}
						position++
					}
				l894:
				}
			l890:
				add(ruleAuthorLowerChar, position889)
			}
			return true
		l888:
			position, tokenIndex = position888, tokenIndex888
			return false
		},
		/* 113 Year <- <(YearRange / YearApprox / YearWithParens / YearWithPage / YearWithDot / YearWithChar / YearNum)> */
		func() bool {
			position975, tokenIndex975 := position, tokenIndex
			{
				position976 := position
				{
					position977, tokenIndex977 := position, tokenIndex
					if !_rules[ruleYearRange]() {
						goto l978
					}
					goto l977
				l978:
					position, tokenIndex = position977, tokenIndex977
					if !_rules[ruleYearApprox]() {
						goto l979
					}
					goto l977
				l979:
					position, tokenIndex = position977, tokenIndex977
					if !_rules[ruleYearWithParens]() {
						goto l980
					}
					goto l977
				l980:
					position, tokenIndex = position977, tokenIndex977
					if !_rules[ruleYearWithPage]() {
						goto l981
					}
					goto l977
				l981:
					position, tokenIndex = position977, tokenIndex977
					if !_rules[ruleYearWithDot]() {
						goto l982
					}
					goto l977
				l982:
					position, tokenIndex = position977, tokenIndex977
					if !_rules[ruleYearWithChar]() {
						goto l983
					}
					goto l977
				l983:
					position, tokenIndex = position977, tokenIndex977
					if !_rules[ruleYearNum]() {
						goto l975
					}
				}
			l977:
				add(ruleYear, position976)
			}
			return true
		l975:
			position, tokenIndex = position975, tokenIndex975
			return false
		},
		/* 114 YearRange <- <(YearNum (Dash / Slash) (Nums+ ('a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'l' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z' / '?')*))> */
		func() bool {
			position984, tokenIndex984 := position, tokenIndex
			{
				position985 := position
				if !_rules[ruleYearNum]() {
					goto l984
				}
				{
					position986, tokenIndex986 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l987
					}
					goto l986
				l987:
					position, tokenIndex = position986, tokenIndex986
					if !_rules[ruleSlash]() {
						goto l984
					}
				}
			l986:
				if !_rules[ruleNums]() {
					goto l984
				}
			l988:
				{
					position989, tokenIndex989 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l989
					}
					goto l988
				l989:
					position, tokenIndex = position989, tokenIndex989
				}
			l990:
				{
					position991, tokenIndex991 := position, tokenIndex
					{
						position992, tokenIndex992 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l993
						}
						position++
						goto l992
					l993:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('b') {
							goto l994
						}
						position++
						goto l992
					l994:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('c') {
							goto l995
						}
						position++
						goto l992
					l995:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('d') {
							goto l996
						}
						position++
						goto l992
					l996:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('e') {
							goto l997
						}
						position++
						goto l992
					l997:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('f') {
							goto l998
						}
						position++
						goto l992
					l998:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('g') {
							goto l999
						}
						position++
						goto l992
					l999:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('h') {
							goto l1000
						}
						position++
						goto l992
					l1000:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('i') {
							goto l1001
						}
						position++
						goto l992
					l1001:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('j') {
							goto l1002
						}
						position++
						goto l992
					l1002:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('k') {
							goto l1003
						}
						position++
						goto l992
					l1003:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('l') {
							goto l1004
						}
						position++
						goto l992
					l1004:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('m') {
							goto l1005
						}
						position++
						goto l992
					l1005:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('n') {
							goto l1006
						}
						position++
						goto l992
					l1006:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('o') {
							goto l1007
						}
						position++
						goto l992
					l1007:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('p') {
							goto l1008
						}
						position++
						goto l992
					l1008:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('q') {
							goto l1009
						}
						position++
						goto l992
					l1009:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('r') {
							goto l1010
						}
						position++
						goto l992
					l1010:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('s') {
							goto l1011
						}
						position++
						goto l992
					l1011:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('t') {
							goto l1012
						}
						position++
						goto l992
					l1012:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('u') {
							goto l1013
						}
						position++
						goto l992
					l1013:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('v') {
							goto l1014
						}
						position++
						goto l992
					l1014:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('w') {
							goto l1015
						}
						position++
						goto l992
					l1015:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('x') {
							goto l1016
						}
						position++
						goto l992
					l1016:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('y') {
							goto l1017
						}
						position++
						goto l992
					l1017:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('z') {
							goto l1018
						}
						position++
						goto l992
					l1018:
						position, tokenIndex = position992, tokenIndex992
						if buffer[position] != rune('?') {
							goto l991
						}
						position++
					}
				l992:
					goto l990
				l991:
					position, tokenIndex = position991, tokenIndex991
				}
				add(ruleYearRange, position985)
			}
			return true
		l984:
			position, tokenIndex = position984, tokenIndex984
			return false
		},
		/* 115 YearWithDot <- <(YearNum '.')> */
		func() bool {
			position1019, tokenIndex1019 := position, tokenIndex
			{
				position1020 := position
				if !_rules[ruleYearNum]() {
					goto l1019
				}
				if buffer[position] != rune('.') {
					goto l1019
				}
				position++
				add(ruleYearWithDot, position1020)
			}
			return true
		l1019:
			position, tokenIndex = position1019, tokenIndex1019
			return false
		},
		/* 116 YearApprox <- <('[' _? YearNum _? ']')> */
		func() bool {
			position1021, tokenIndex1021 := position, tokenIndex
			{
				position1022 := position
				if buffer[position] != rune('[') {
					goto l1021
				}
				position++
				{
					position1023, tokenIndex1023 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1023
					}
					goto l1024
				l1023:
					position, tokenIndex = position1023, tokenIndex1023
				}
			l1024:
				if !_rules[ruleYearNum]() {
					goto l1021
				}
				{
					position1025, tokenIndex1025 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1025
					}
					goto l1026
				l1025:
					position, tokenIndex = position1025, tokenIndex1025
				}
			l1026:
				if buffer[position] != rune(']') {
					goto l1021
				}
				position++
				add(ruleYearApprox, position1022)
			}
			return true
		l1021:
			position, tokenIndex = position1021, tokenIndex1021
			return false
		},
		/* 117 YearWithPage <- <((YearWithChar / YearNum) _? ':' _? Nums+)> */
		func() bool {
			position1027, tokenIndex1027 := position, tokenIndex
			{
				position1028 := position
				{
					position1029, tokenIndex1029 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l1030
					}
					goto l1029
				l1030:
					position, tokenIndex = position1029, tokenIndex1029
					if !_rules[ruleYearNum]() {
						goto l1027
					}
				}
			l1029:
				{
					position1031, tokenIndex1031 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1031
					}
					goto l1032
				l1031:
					position, tokenIndex = position1031, tokenIndex1031
				}
			l1032:
				if buffer[position] != rune(':') {
					goto l1027
				}
				position++
				{
					position1033, tokenIndex1033 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1033
					}
					goto l1034
				l1033:
					position, tokenIndex = position1033, tokenIndex1033
				}
			l1034:
				if !_rules[ruleNums]() {
					goto l1027
				}
			l1035:
				{
					position1036, tokenIndex1036 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1036
					}
					goto l1035
				l1036:
					position, tokenIndex = position1036, tokenIndex1036
				}
				add(ruleYearWithPage, position1028)
			}
			return true
		l1027:
			position, tokenIndex = position1027, tokenIndex1027
			return false
		},
		/* 118 YearWithParens <- <('(' (YearWithChar / YearNum) ')')> */
		func() bool {
			position1037, tokenIndex1037 := position, tokenIndex
			{
				position1038 := position
				if buffer[position] != rune('(') {
					goto l1037
				}
				position++
				{
					position1039, tokenIndex1039 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l1040
					}
					goto l1039
				l1040:
					position, tokenIndex = position1039, tokenIndex1039
					if !_rules[ruleYearNum]() {
						goto l1037
					}
				}
			l1039:
				if buffer[position] != rune(')') {
					goto l1037
				}
				position++
				add(ruleYearWithParens, position1038)
			}
			return true
		l1037:
			position, tokenIndex = position1037, tokenIndex1037
			return false
		},
		/* 119 YearWithChar <- <(YearNum LowerASCII)> */
		func() bool {
			position1041, tokenIndex1041 := position, tokenIndex
			{
				position1042 := position
				if !_rules[ruleYearNum]() {
					goto l1041
				}
				if !_rules[ruleLowerASCII]() {
					goto l1041
				}
				add(ruleYearWithChar, position1042)
			}
			return true
		l1041:
			position, tokenIndex = position1041, tokenIndex1041
			return false
		},
		/* 120 YearNum <- <(('1' / '2') ('0' / '7' / '8' / '9') Nums (Nums / '?') '?'*)> */
		func() bool {
			position1043, tokenIndex1043 := position, tokenIndex
			{
				position1044 := position
				{
					position1045, tokenIndex1045 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l1046
					}
					position++
					goto l1045
				l1046:
					position, tokenIndex = position1045, tokenIndex1045
					if buffer[position] != rune('2') {
						goto l1043
					}
					position++
				}
			l1045:
				{
					position1047, tokenIndex1047 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l1048
					}
					position++
					goto l1047
				l1048:
					position, tokenIndex = position1047, tokenIndex1047
					if buffer[position] != rune('7') {
						goto l1049
					}
					position++
					goto l1047
				l1049:
					position, tokenIndex = position1047, tokenIndex1047
					if buffer[position] != rune('8') {
						goto l1050
					}
					position++
					goto l1047
				l1050:
					position, tokenIndex = position1047, tokenIndex1047
					if buffer[position] != rune('9') {
						goto l1043
					}
					position++
				}
			l1047:
				if !_rules[ruleNums]() {
					goto l1043
				}
				{
					position1051, tokenIndex1051 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1052
					}
					goto l1051
				l1052:
					position, tokenIndex = position1051, tokenIndex1051
					if buffer[position] != rune('?') {
						goto l1043
					}
					position++
				}
			l1051:
			l1053:
				{
					position1054, tokenIndex1054 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l1054
					}
					position++
					goto l1053
				l1054:
					position, tokenIndex = position1054, tokenIndex1054
				}
				add(ruleYearNum, position1044)
			}
			return true
		l1043:
			position, tokenIndex = position1043, tokenIndex1043
			return false
		},
		/* 121 NameUpperChar <- <(UpperChar / UpperCharExtended)> */
		func() bool {
			position1055, tokenIndex1055 := position, tokenIndex
			{
				position1056 := position
				{
					position1057, tokenIndex1057 := position, tokenIndex
					if !_rules[ruleUpperChar]() {
						goto l1058
					}
					goto l1057
				l1058:
					position, tokenIndex = position1057, tokenIndex1057
					if !_rules[ruleUpperCharExtended]() {
						goto l1055
					}
				}
			l1057:
				add(ruleNameUpperChar, position1056)
			}
			return true
		l1055:
			position, tokenIndex = position1055, tokenIndex1055
			return false
		},
		/* 122 UpperCharExtended <- <('Æ' / 'Œ' / 'Ö')> */
		func() bool {
			position1059, tokenIndex1059 := position, tokenIndex
			{
				position1060 := position
				{
					position1061, tokenIndex1061 := position, tokenIndex
					if buffer[position] != rune('Æ') {
						goto l1062
					}
					position++
					goto l1061
				l1062:
					position, tokenIndex = position1061, tokenIndex1061
					if buffer[position] != rune('Œ') {
						goto l1063
					}
					position++
					goto l1061
				l1063:
					position, tokenIndex = position1061, tokenIndex1061
					if buffer[position] != rune('Ö') {
						goto l1059
					}
					position++
				}
			l1061:
				add(ruleUpperCharExtended, position1060)
			}
			return true
		l1059:
			position, tokenIndex = position1059, tokenIndex1059
			return false
		},
		/* 123 UpperChar <- <UpperASCII> */
		func() bool {
			position1064, tokenIndex1064 := position, tokenIndex
			{
				position1065 := position
				if !_rules[ruleUpperASCII]() {
					goto l1064
				}
				add(ruleUpperChar, position1065)
			}
			return true
		l1064:
			position, tokenIndex = position1064, tokenIndex1064
			return false
		},
		/* 124 NameLowerChar <- <(LowerChar / LowerCharExtended / MiscodedChar)> */
		func() bool {
			position1066, tokenIndex1066 := position, tokenIndex
			{
				position1067 := position
				{
					position1068, tokenIndex1068 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l1069
					}
					goto l1068
				l1069:
					position, tokenIndex = position1068, tokenIndex1068
					if !_rules[ruleLowerCharExtended]() {
						goto l1070
					}
					goto l1068
				l1070:
					position, tokenIndex = position1068, tokenIndex1068
					if !_rules[ruleMiscodedChar]() {
						goto l1066
					}
				}
			l1068:
				add(ruleNameLowerChar, position1067)
			}
			return true
		l1066:
			position, tokenIndex = position1066, tokenIndex1066
			return false
		},
		/* 125 MiscodedChar <- <'�'> */
		func() bool {
			position1071, tokenIndex1071 := position, tokenIndex
			{
				position1072 := position
				if buffer[position] != rune('�') {
					goto l1071
				}
				position++
				add(ruleMiscodedChar, position1072)
			}
			return true
		l1071:
			position, tokenIndex = position1071, tokenIndex1071
			return false
		},
		/* 126 LowerCharExtended <- <('æ' / 'œ' / 'à' / 'â' / 'å' / 'ã' / 'ä' / 'á' / 'ç' / 'č' / 'é' / 'è' / 'ë' / 'í' / 'ì' / 'ï' / 'ň' / 'ñ' / 'ñ' / 'ó' / 'ò' / 'ô' / 'ø' / 'õ' / 'ö' / 'ú' / 'ù' / 'ü' / 'ŕ' / 'ř' / 'ŗ' / 'ſ' / 'š' / 'š' / 'ş' / 'ß' / 'ž')> */
		func() bool {
			position1073, tokenIndex1073 := position, tokenIndex
			{
				position1074 := position
				{
					position1075, tokenIndex1075 := position, tokenIndex
					if buffer[position] != rune('æ') {
						goto l1076
					}
					position++
					goto l1075
				l1076:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('œ') {
						goto l1077
					}
					position++
					goto l1075
				l1077:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('à') {
						goto l1078
					}
					position++
					goto l1075
				l1078:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('â') {
						goto l1079
					}
					position++
					goto l1075
				l1079:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('å') {
						goto l1080
					}
					position++
					goto l1075
				l1080:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ã') {
						goto l1081
					}
					position++
					goto l1075
				l1081:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ä') {
						goto l1082
					}
					position++
					goto l1075
				l1082:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('á') {
						goto l1083
					}
					position++
					goto l1075
				l1083:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ç') {
						goto l1084
					}
					position++
					goto l1075
				l1084:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('č') {
						goto l1085
					}
					position++
					goto l1075
				l1085:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('é') {
						goto l1086
					}
					position++
					goto l1075
				l1086:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('è') {
						goto l1087
					}
					position++
					goto l1075
				l1087:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ë') {
						goto l1088
					}
					position++
					goto l1075
				l1088:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('í') {
						goto l1089
					}
					position++
					goto l1075
				l1089:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ì') {
						goto l1090
					}
					position++
					goto l1075
				l1090:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ï') {
						goto l1091
					}
					position++
					goto l1075
				l1091:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ň') {
						goto l1092
					}
					position++
					goto l1075
				l1092:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ñ') {
						goto l1093
					}
					position++
					goto l1075
				l1093:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ñ') {
						goto l1094
					}
					position++
					goto l1075
				l1094:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ó') {
						goto l1095
					}
					position++
					goto l1075
				l1095:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ò') {
						goto l1096
					}
					position++
					goto l1075
				l1096:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ô') {
						goto l1097
					}
					position++
					goto l1075
				l1097:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ø') {
						goto l1098
					}
					position++
					goto l1075
				l1098:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('õ') {
						goto l1099
					}
					position++
					goto l1075
				l1099:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ö') {
						goto l1100
					}
					position++
					goto l1075
				l1100:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ú') {
						goto l1101
					}
					position++
					goto l1075
				l1101:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ù') {
						goto l1102
					}
					position++
					goto l1075
				l1102:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ü') {
						goto l1103
					}
					position++
					goto l1075
				l1103:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ŕ') {
						goto l1104
					}
					position++
					goto l1075
				l1104:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ř') {
						goto l1105
					}
					position++
					goto l1075
				l1105:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ŗ') {
						goto l1106
					}
					position++
					goto l1075
				l1106:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ſ') {
						goto l1107
					}
					position++
					goto l1075
				l1107:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('š') {
						goto l1108
					}
					position++
					goto l1075
				l1108:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('š') {
						goto l1109
					}
					position++
					goto l1075
				l1109:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ş') {
						goto l1110
					}
					position++
					goto l1075
				l1110:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ß') {
						goto l1111
					}
					position++
					goto l1075
				l1111:
					position, tokenIndex = position1075, tokenIndex1075
					if buffer[position] != rune('ž') {
						goto l1073
					}
					position++
				}
			l1075:
				add(ruleLowerCharExtended, position1074)
			}
			return true
		l1073:
			position, tokenIndex = position1073, tokenIndex1073
			return false
		},
		/* 127 LowerChar <- <LowerASCII> */
		func() bool {
			position1112, tokenIndex1112 := position, tokenIndex
			{
				position1113 := position
				if !_rules[ruleLowerASCII]() {
					goto l1112
				}
				add(ruleLowerChar, position1113)
			}
			return true
		l1112:
			position, tokenIndex = position1112, tokenIndex1112
			return false
		},
		/* 128 SpaceCharEOI <- <(_ / !.)> */
		func() bool {
			position1114, tokenIndex1114 := position, tokenIndex
			{
				position1115 := position
				{
					position1116, tokenIndex1116 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1117
					}
					goto l1116
				l1117:
					position, tokenIndex = position1116, tokenIndex1116
					{
						position1118, tokenIndex1118 := position, tokenIndex
						if !matchDot() {
							goto l1118
						}
						goto l1114
					l1118:
						position, tokenIndex = position1118, tokenIndex1118
					}
				}
			l1116:
				add(ruleSpaceCharEOI, position1115)
			}
			return true
		l1114:
			position, tokenIndex = position1114, tokenIndex1114
			return false
		},
		/* 129 Nums <- <[0-9]> */
		func() bool {
			position1119, tokenIndex1119 := position, tokenIndex
			{
				position1120 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l1119
				}
				position++
				add(ruleNums, position1120)
			}
			return true
		l1119:
			position, tokenIndex = position1119, tokenIndex1119
			return false
		},
		/* 130 LowerGreek <- <[α-ω]> */
		func() bool {
			position1121, tokenIndex1121 := position, tokenIndex
			{
				position1122 := position
				if c := buffer[position]; c < rune('α') || c > rune('ω') {
					goto l1121
				}
				position++
				add(ruleLowerGreek, position1122)
			}
			return true
		l1121:
			position, tokenIndex = position1121, tokenIndex1121
			return false
		},
		/* 131 LowerASCII <- <[a-z]> */
		func() bool {
			position1123, tokenIndex1123 := position, tokenIndex
			{
				position1124 := position
				if c := buffer[position]; c < rune('a') || c > rune('z') {
					goto l1123
				}
				position++
				add(ruleLowerASCII, position1124)
			}
			return true
		l1123:
			position, tokenIndex = position1123, tokenIndex1123
			return false
		},
		/* 132 UpperASCII <- <[A-Z]> */
		func() bool {
			position1125, tokenIndex1125 := position, tokenIndex
			{
				position1126 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l1125
				}
				position++
				add(ruleUpperASCII, position1126)
			}
			return true
		l1125:
			position, tokenIndex = position1125, tokenIndex1125
			return false
		},
		/* 133 Apostrophe <- <(ApostrOther / ApostrASCII)> */
		func() bool {
			position1127, tokenIndex1127 := position, tokenIndex
			{
				position1128 := position
				{
					position1129, tokenIndex1129 := position, tokenIndex
					if !_rules[ruleApostrOther]() {
						goto l1130
					}
					goto l1129
				l1130:
					position, tokenIndex = position1129, tokenIndex1129
					if !_rules[ruleApostrASCII]() {
						goto l1127
					}
				}
			l1129:
				add(ruleApostrophe, position1128)
			}
			return true
		l1127:
			position, tokenIndex = position1127, tokenIndex1127
			return false
		},
		/* 134 ApostrASCII <- <'\''> */
		func() bool {
			position1131, tokenIndex1131 := position, tokenIndex
			{
				position1132 := position
				if buffer[position] != rune('\'') {
					goto l1131
				}
				position++
				add(ruleApostrASCII, position1132)
			}
			return true
		l1131:
			position, tokenIndex = position1131, tokenIndex1131
			return false
		},
		/* 135 ApostrOther <- <('‘' / '’' / '`' / '´')> */
		func() bool {
			position1133, tokenIndex1133 := position, tokenIndex
			{
				position1134 := position
				{
					position1135, tokenIndex1135 := position, tokenIndex
					if buffer[position] != rune('‘') {
						goto l1136
					}
					position++
					goto l1135
				l1136:
					position, tokenIndex = position1135, tokenIndex1135
					if buffer[position] != rune('’') {
						goto l1137
					}
					position++
					goto l1135
				l1137:
					position, tokenIndex = position1135, tokenIndex1135
					if buffer[position] != rune('`') {
						goto l1138
					}
					position++
					goto l1135
				l1138:
					position, tokenIndex = position1135, tokenIndex1135
					if buffer[position] != rune('´') {
						goto l1133
					}
					position++
				}
			l1135:
				add(ruleApostrOther, position1134)
			}
			return true
		l1133:
			position, tokenIndex = position1133, tokenIndex1133
			return false
		},
		/* 136 Dash <- <'-'> */
		func() bool {
			position1139, tokenIndex1139 := position, tokenIndex
			{
				position1140 := position
				if buffer[position] != rune('-') {
					goto l1139
				}
				position++
				add(ruleDash, position1140)
			}
			return true
		l1139:
			position, tokenIndex = position1139, tokenIndex1139
			return false
		},
		/* 137 Slash <- <'/'> */
		func() bool {
			position1141, tokenIndex1141 := position, tokenIndex
			{
				position1142 := position
				if buffer[position] != rune('/') {
					goto l1141
				}
				position++
				add(ruleSlash, position1142)
			}
			return true
		l1141:
			position, tokenIndex = position1141, tokenIndex1141
			return false
		},
		/* 138 _ <- <(MultipleSpace / SingleSpace)> */
		func() bool {
			position1143, tokenIndex1143 := position, tokenIndex
			{
				position1144 := position
				{
					position1145, tokenIndex1145 := position, tokenIndex
					if !_rules[ruleMultipleSpace]() {
						goto l1146
					}
					goto l1145
				l1146:
					position, tokenIndex = position1145, tokenIndex1145
					if !_rules[ruleSingleSpace]() {
						goto l1143
					}
				}
			l1145:
				add(rule_, position1144)
			}
			return true
		l1143:
			position, tokenIndex = position1143, tokenIndex1143
			return false
		},
		/* 139 MultipleSpace <- <(SingleSpace SingleSpace+)> */
		func() bool {
			position1147, tokenIndex1147 := position, tokenIndex
			{
				position1148 := position
				if !_rules[ruleSingleSpace]() {
					goto l1147
				}
				if !_rules[ruleSingleSpace]() {
					goto l1147
				}
			l1149:
				{
					position1150, tokenIndex1150 := position, tokenIndex
					if !_rules[ruleSingleSpace]() {
						goto l1150
					}
					goto l1149
				l1150:
					position, tokenIndex = position1150, tokenIndex1150
				}
				add(ruleMultipleSpace, position1148)
			}
			return true
		l1147:
			position, tokenIndex = position1147, tokenIndex1147
			return false
		},
		/* 140 SingleSpace <- <(' ' / OtherSpace)> */
		func() bool {
			position1151, tokenIndex1151 := position, tokenIndex
			{
				position1152 := position
				{
					position1153, tokenIndex1153 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l1154
					}
					position++
					goto l1153
				l1154:
					position, tokenIndex = position1153, tokenIndex1153
					if !_rules[ruleOtherSpace]() {
						goto l1151
					}
				}
			l1153:
				add(ruleSingleSpace, position1152)
			}
			return true
		l1151:
			position, tokenIndex = position1151, tokenIndex1151
			return false
		},
		/* 141 OtherSpace <- <('\u3000' / '\u00a0' / '\t' / '\r' / '\n' / '\f' / '\v')> */
		func() bool {
			position1155, tokenIndex1155 := position, tokenIndex
			{
				position1156 := position
				{
					position1157, tokenIndex1157 := position, tokenIndex
					if buffer[position] != rune('\u3000') {
						goto l1158
					}
					position++
					goto l1157
				l1158:
					position, tokenIndex = position1157, tokenIndex1157
					if buffer[position] != rune('\u00a0') {
						goto l1159
					}
					position++
					goto l1157
				l1159:
					position, tokenIndex = position1157, tokenIndex1157
					if buffer[position] != rune('\t') {
						goto l1160
					}
					position++
					goto l1157
				l1160:
					position, tokenIndex = position1157, tokenIndex1157
					if buffer[position] != rune('\r') {
						goto l1161
					}
					position++
					goto l1157
				l1161:
					position, tokenIndex = position1157, tokenIndex1157
					if buffer[position] != rune('\n') {
						goto l1162
					}
					position++
					goto l1157
				l1162:
					position, tokenIndex = position1157, tokenIndex1157
					if buffer[position] != rune('\f') {
						goto l1163
					}
					position++
					goto l1157
				l1163:
					position, tokenIndex = position1157, tokenIndex1157
					if buffer[position] != rune('\v') {
						goto l1155
					}
					position++
				}
			l1157:
				add(ruleOtherSpace, position1156)
			}
			return true
		l1155:
			position, tokenIndex = position1155, tokenIndex1155
			return false
		},
		/* 142 END <- <!.> */
		func() bool {
			position1164, tokenIndex1164 := position, tokenIndex
			{
				position1165 := position
				{
					position1166, tokenIndex1166 := position, tokenIndex
					if !matchDot() {
						goto l1166
					}
					goto l1164
				l1166:
					position, tokenIndex = position1166, tokenIndex1166
				}
				add(ruleEND, position1165)
			}
			return true
		l1164:
			position, tokenIndex = position1164, tokenIndex1164
			return false
		},
	}
	p.rules = _rules
	return nil
}
