package parser

// Code generated by peg grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleSciName
	ruleTail
	ruleName
	ruleHybridFormula
	ruleHybridFormulaFull
	ruleHybridFormulaPart
	ruleNamedHybrid
	ruleNamedSpeciesHybrid
	ruleNamedGenusHybrid
	ruleGraftChimeraFormula
	ruleGraftChimeraFormulaFull
	ruleGraftChimeraFormulaPart
	ruleNamedGenusGraftChimera
	ruleCandidatusName
	ruleCandidatus
	ruleSingleName
	ruleNameUninomial
	ruleNameApprox
	ruleNameComp
	ruleNameSpecies
	ruleGenusWord
	ruleInfraspGroup
	ruleInfraspEpithet
	ruleCultivarWordGroup
	ruleCultivar
	ruleRankCultivar
	ruleNotHybridChar
	ruleCultivarRecursive
	ruleCultivarApostrophe
	ruleSpeciesEpithet
	ruleComparison
	ruleRank
	ruleRankNotho
	ruleRankOtherUncommon
	ruleRankOther
	ruleRankVar
	ruleRankForma
	ruleRankSsp
	ruleRankAgamo
	ruleSubgenusOrSuperspecies
	ruleSubgenus
	ruleSubgenus2
	ruleSubgenus1
	ruleUninomialCombo
	ruleUninomialCombo1
	ruleUninomialCombo2
	ruleRankUninomial
	ruleRankUninomialPlain
	ruleRankUninomialNotho
	ruleUninomial
	ruleUninomialWord
	ruleAbbrSubgenus
	ruleAbbrGenus
	ruleCapWord
	ruleCapWord1
	ruleCapWordWithDash
	ruleWordAfterDash
	ruleUpperAfterDash
	ruleLowerAfterDash
	ruleTwoLetterGenus
	ruleWord
	ruleWord1
	ruleWordStartsWithDigit
	ruleWord2
	ruleWordApostr
	ruleWord4
	ruleDotPrefix
	ruleMultiDashedWord
	ruleHybridChar
	ruleGraftChimeraChar
	ruleApproxNameIgnored
	ruleApproximation
	ruleAuthorship
	ruleAuthorshipCombo
	ruleOriginalAuthorship
	ruleOriginalAuthorshipComb
	ruleCombinationAuthorship
	ruleBasionymAuthorshipMissingParens
	ruleMissingParensStart
	ruleMissingParensEnd
	ruleBasionymAuthorshipYearMisformed
	ruleBasionymAuthorship
	ruleBasionymAuthorship1
	ruleBasionymAuthorship2Parens
	ruleAuthorsGroup
	ruleAuthorsTeam
	ruleAuthorSep
	ruleAuthorSep1
	ruleAuthorSep2
	ruleAuthorSepSpanish
	ruleAuthorEx
	ruleAuthorEmend
	ruleAuthor
	ruleAuthor0
	ruleAuthor1
	ruleAuthor2
	ruleUnknownAuthor
	ruleAuthorWord
	ruleAuthorEtAl
	ruleAuthorWord1
	ruleAuthorWord2
	ruleAuthorWord3
	ruleAuthorDashInitials
	ruleAuthorInitial
	ruleAuthorWordSoft
	ruleCapAuthorWord
	ruleAllCapsAuthorWord
	ruleFilius
	ruleFiliusF
	ruleFiliusFNoSpace
	ruleAuthorSuffix
	ruleAuthorPrefixGlued
	ruleAuthorPrefix
	ruleAuthorPrefix2
	ruleAuthorPrefix1
	ruleAuthorUpperChar
	ruleAuthorLowerChar
	ruleYear
	ruleYearRange
	ruleYearWithDot
	ruleYearApprox
	ruleYearWithPage
	ruleYearWithParens
	ruleYearWithChar
	ruleYearNum
	ruleNameUpperChar
	ruleUpperCharExtended
	ruleUpperChar
	ruleNameLowerChar
	ruleMiscodedChar
	ruleLowerCharExtended
	ruleLowerChar
	ruleSpaceCharEOI
	ruleNums
	ruleLowerGreek
	ruleLowerASCII
	ruleUpperASCII
	ruleApostrophe
	ruleApostrASCII
	ruleApostrOther
	ruleDash
	ruleSlash
	rule_
	ruleMultipleSpace
	ruleSingleSpace
	ruleOtherSpace
	ruleEND
)

var rul3s = [...]string{
	"Unknown",
	"SciName",
	"Tail",
	"Name",
	"HybridFormula",
	"HybridFormulaFull",
	"HybridFormulaPart",
	"NamedHybrid",
	"NamedSpeciesHybrid",
	"NamedGenusHybrid",
	"GraftChimeraFormula",
	"GraftChimeraFormulaFull",
	"GraftChimeraFormulaPart",
	"NamedGenusGraftChimera",
	"CandidatusName",
	"Candidatus",
	"SingleName",
	"NameUninomial",
	"NameApprox",
	"NameComp",
	"NameSpecies",
	"GenusWord",
	"InfraspGroup",
	"InfraspEpithet",
	"CultivarWordGroup",
	"Cultivar",
	"RankCultivar",
	"NotHybridChar",
	"CultivarRecursive",
	"CultivarApostrophe",
	"SpeciesEpithet",
	"Comparison",
	"Rank",
	"RankNotho",
	"RankOtherUncommon",
	"RankOther",
	"RankVar",
	"RankForma",
	"RankSsp",
	"RankAgamo",
	"SubgenusOrSuperspecies",
	"Subgenus",
	"Subgenus2",
	"Subgenus1",
	"UninomialCombo",
	"UninomialCombo1",
	"UninomialCombo2",
	"RankUninomial",
	"RankUninomialPlain",
	"RankUninomialNotho",
	"Uninomial",
	"UninomialWord",
	"AbbrSubgenus",
	"AbbrGenus",
	"CapWord",
	"CapWord1",
	"CapWordWithDash",
	"WordAfterDash",
	"UpperAfterDash",
	"LowerAfterDash",
	"TwoLetterGenus",
	"Word",
	"Word1",
	"WordStartsWithDigit",
	"Word2",
	"WordApostr",
	"Word4",
	"DotPrefix",
	"MultiDashedWord",
	"HybridChar",
	"GraftChimeraChar",
	"ApproxNameIgnored",
	"Approximation",
	"Authorship",
	"AuthorshipCombo",
	"OriginalAuthorship",
	"OriginalAuthorshipComb",
	"CombinationAuthorship",
	"BasionymAuthorshipMissingParens",
	"MissingParensStart",
	"MissingParensEnd",
	"BasionymAuthorshipYearMisformed",
	"BasionymAuthorship",
	"BasionymAuthorship1",
	"BasionymAuthorship2Parens",
	"AuthorsGroup",
	"AuthorsTeam",
	"AuthorSep",
	"AuthorSep1",
	"AuthorSep2",
	"AuthorSepSpanish",
	"AuthorEx",
	"AuthorEmend",
	"Author",
	"Author0",
	"Author1",
	"Author2",
	"UnknownAuthor",
	"AuthorWord",
	"AuthorEtAl",
	"AuthorWord1",
	"AuthorWord2",
	"AuthorWord3",
	"AuthorDashInitials",
	"AuthorInitial",
	"AuthorWordSoft",
	"CapAuthorWord",
	"AllCapsAuthorWord",
	"Filius",
	"FiliusF",
	"FiliusFNoSpace",
	"AuthorSuffix",
	"AuthorPrefixGlued",
	"AuthorPrefix",
	"AuthorPrefix2",
	"AuthorPrefix1",
	"AuthorUpperChar",
	"AuthorLowerChar",
	"Year",
	"YearRange",
	"YearWithDot",
	"YearApprox",
	"YearWithPage",
	"YearWithParens",
	"YearWithChar",
	"YearNum",
	"NameUpperChar",
	"UpperCharExtended",
	"UpperChar",
	"NameLowerChar",
	"MiscodedChar",
	"LowerCharExtended",
	"LowerChar",
	"SpaceCharEOI",
	"Nums",
	"LowerGreek",
	"LowerASCII",
	"UpperASCII",
	"Apostrophe",
	"ApostrASCII",
	"ApostrOther",
	"Dash",
	"Slash",
	"_",
	"MultipleSpace",
	"SingleSpace",
	"OtherSpace",
	"END",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Engine struct {
	baseEngine

	Buffer string
	buffer []rune
	rules  [148]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Engine) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Engine) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Engine
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Engine) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Engine) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Engine) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Engine) error {
	return func(p *Engine) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Engine) error {
	return func(p *Engine) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Engine) Init(options ...func(*Engine) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 SciName <- <(_? Name Tail END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[rule_]() {
						goto l2
					}
					goto l3
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
			l3:
				if !_rules[ruleName]() {
					goto l0
				}
				if !_rules[ruleTail]() {
					goto l0
				}
				if !_rules[ruleEND]() {
					goto l0
				}
				add(ruleSciName, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Tail <- <((_ / ';' / ',') .*)?> */
		func() bool {
			{
				position5 := position
				{
					position6, tokenIndex6 := position, tokenIndex
					{
						position8, tokenIndex8 := position, tokenIndex
						if !_rules[rule_]() {
							goto l9
						}
						goto l8
					l9:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(';') {
							goto l10
						}
						position++
						goto l8
					l10:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(',') {
							goto l6
						}
						position++
					}
				l8:
				l11:
					{
						position12, tokenIndex12 := position, tokenIndex
						if !matchDot() {
							goto l12
						}
						goto l11
					l12:
						position, tokenIndex = position12, tokenIndex12
					}
					goto l7
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
			l7:
				add(ruleTail, position5)
			}
			return true
		},
		/* 2 Name <- <(NamedGenusGraftChimera / GraftChimeraFormula / NamedHybrid / HybridFormula / CandidatusName / SingleName)> */
		func() bool {
			position13, tokenIndex13 := position, tokenIndex
			{
				position14 := position
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleNamedGenusGraftChimera]() {
						goto l16
					}
					goto l15
				l16:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleGraftChimeraFormula]() {
						goto l17
					}
					goto l15
				l17:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleNamedHybrid]() {
						goto l18
					}
					goto l15
				l18:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleHybridFormula]() {
						goto l19
					}
					goto l15
				l19:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleCandidatusName]() {
						goto l20
					}
					goto l15
				l20:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleSingleName]() {
						goto l13
					}
				}
			l15:
				add(ruleName, position14)
			}
			return true
		l13:
			position, tokenIndex = position13, tokenIndex13
			return false
		},
		/* 3 HybridFormula <- <(SingleName (_ (HybridFormulaPart / HybridFormulaFull))+)> */
		func() bool {
			position21, tokenIndex21 := position, tokenIndex
			{
				position22 := position
				if !_rules[ruleSingleName]() {
					goto l21
				}
				if !_rules[rule_]() {
					goto l21
				}
				{
					position25, tokenIndex25 := position, tokenIndex
					if !_rules[ruleHybridFormulaPart]() {
						goto l26
					}
					goto l25
				l26:
					position, tokenIndex = position25, tokenIndex25
					if !_rules[ruleHybridFormulaFull]() {
						goto l21
					}
				}
			l25:
			l23:
				{
					position24, tokenIndex24 := position, tokenIndex
					if !_rules[rule_]() {
						goto l24
					}
					{
						position27, tokenIndex27 := position, tokenIndex
						if !_rules[ruleHybridFormulaPart]() {
							goto l28
						}
						goto l27
					l28:
						position, tokenIndex = position27, tokenIndex27
						if !_rules[ruleHybridFormulaFull]() {
							goto l24
						}
					}
				l27:
					goto l23
				l24:
					position, tokenIndex = position24, tokenIndex24
				}
				add(ruleHybridFormula, position22)
			}
			return true
		l21:
			position, tokenIndex = position21, tokenIndex21
			return false
		},
		/* 4 HybridFormulaFull <- <(HybridChar (_ SingleName)?)> */
		func() bool {
			position29, tokenIndex29 := position, tokenIndex
			{
				position30 := position
				if !_rules[ruleHybridChar]() {
					goto l29
				}
				{
					position31, tokenIndex31 := position, tokenIndex
					if !_rules[rule_]() {
						goto l31
					}
					if !_rules[ruleSingleName]() {
						goto l31
					}
					goto l32
				l31:
					position, tokenIndex = position31, tokenIndex31
				}
			l32:
				add(ruleHybridFormulaFull, position30)
			}
			return true
		l29:
			position, tokenIndex = position29, tokenIndex29
			return false
		},
		/* 5 HybridFormulaPart <- <(HybridChar _ SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position33, tokenIndex33 := position, tokenIndex
			{
				position34 := position
				if !_rules[ruleHybridChar]() {
					goto l33
				}
				if !_rules[rule_]() {
					goto l33
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l33
				}
				{
					position35, tokenIndex35 := position, tokenIndex
					if !_rules[rule_]() {
						goto l35
					}
					if !_rules[ruleInfraspGroup]() {
						goto l35
					}
					goto l36
				l35:
					position, tokenIndex = position35, tokenIndex35
				}
			l36:
				add(ruleHybridFormulaPart, position34)
			}
			return true
		l33:
			position, tokenIndex = position33, tokenIndex33
			return false
		},
		/* 6 NamedHybrid <- <(NamedGenusHybrid / NamedSpeciesHybrid)> */
		func() bool {
			position37, tokenIndex37 := position, tokenIndex
			{
				position38 := position
				{
					position39, tokenIndex39 := position, tokenIndex
					if !_rules[ruleNamedGenusHybrid]() {
						goto l40
					}
					goto l39
				l40:
					position, tokenIndex = position39, tokenIndex39
					if !_rules[ruleNamedSpeciesHybrid]() {
						goto l37
					}
				}
			l39:
				add(ruleNamedHybrid, position38)
			}
			return true
		l37:
			position, tokenIndex = position37, tokenIndex37
			return false
		},
		/* 7 NamedSpeciesHybrid <- <(GenusWord (_ Subgenus)? (_ Comparison)? _ HybridChar _? SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position41, tokenIndex41 := position, tokenIndex
			{
				position42 := position
				if !_rules[ruleGenusWord]() {
					goto l41
				}
				{
					position43, tokenIndex43 := position, tokenIndex
					if !_rules[rule_]() {
						goto l43
					}
					if !_rules[ruleSubgenus]() {
						goto l43
					}
					goto l44
				l43:
					position, tokenIndex = position43, tokenIndex43
				}
			l44:
				{
					position45, tokenIndex45 := position, tokenIndex
					if !_rules[rule_]() {
						goto l45
					}
					if !_rules[ruleComparison]() {
						goto l45
					}
					goto l46
				l45:
					position, tokenIndex = position45, tokenIndex45
				}
			l46:
				if !_rules[rule_]() {
					goto l41
				}
				if !_rules[ruleHybridChar]() {
					goto l41
				}
				{
					position47, tokenIndex47 := position, tokenIndex
					if !_rules[rule_]() {
						goto l47
					}
					goto l48
				l47:
					position, tokenIndex = position47, tokenIndex47
				}
			l48:
				if !_rules[ruleSpeciesEpithet]() {
					goto l41
				}
				{
					position49, tokenIndex49 := position, tokenIndex
					if !_rules[rule_]() {
						goto l49
					}
					if !_rules[ruleInfraspGroup]() {
						goto l49
					}
					goto l50
				l49:
					position, tokenIndex = position49, tokenIndex49
				}
			l50:
				add(ruleNamedSpeciesHybrid, position42)
			}
			return true
		l41:
			position, tokenIndex = position41, tokenIndex41
			return false
		},
		/* 8 NamedGenusHybrid <- <(HybridChar _? SingleName)> */
		func() bool {
			position51, tokenIndex51 := position, tokenIndex
			{
				position52 := position
				if !_rules[ruleHybridChar]() {
					goto l51
				}
				{
					position53, tokenIndex53 := position, tokenIndex
					if !_rules[rule_]() {
						goto l53
					}
					goto l54
				l53:
					position, tokenIndex = position53, tokenIndex53
				}
			l54:
				if !_rules[ruleSingleName]() {
					goto l51
				}
				add(ruleNamedGenusHybrid, position52)
			}
			return true
		l51:
			position, tokenIndex = position51, tokenIndex51
			return false
		},
		/* 9 GraftChimeraFormula <- <(SingleName (_ (GraftChimeraFormulaPart / GraftChimeraFormulaFull))+)> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				if !_rules[ruleSingleName]() {
					goto l55
				}
				if !_rules[rule_]() {
					goto l55
				}
				{
					position59, tokenIndex59 := position, tokenIndex
					if !_rules[ruleGraftChimeraFormulaPart]() {
						goto l60
					}
					goto l59
				l60:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleGraftChimeraFormulaFull]() {
						goto l55
					}
				}
			l59:
			l57:
				{
					position58, tokenIndex58 := position, tokenIndex
					if !_rules[rule_]() {
						goto l58
					}
					{
						position61, tokenIndex61 := position, tokenIndex
						if !_rules[ruleGraftChimeraFormulaPart]() {
							goto l62
						}
						goto l61
					l62:
						position, tokenIndex = position61, tokenIndex61
						if !_rules[ruleGraftChimeraFormulaFull]() {
							goto l58
						}
					}
				l61:
					goto l57
				l58:
					position, tokenIndex = position58, tokenIndex58
				}
				add(ruleGraftChimeraFormula, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
		/* 10 GraftChimeraFormulaFull <- <(GraftChimeraChar (_ SingleName)?)> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l63
				}
				{
					position65, tokenIndex65 := position, tokenIndex
					if !_rules[rule_]() {
						goto l65
					}
					if !_rules[ruleSingleName]() {
						goto l65
					}
					goto l66
				l65:
					position, tokenIndex = position65, tokenIndex65
				}
			l66:
				add(ruleGraftChimeraFormulaFull, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 11 GraftChimeraFormulaPart <- <(GraftChimeraChar _ SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position67, tokenIndex67 := position, tokenIndex
			{
				position68 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l67
				}
				if !_rules[rule_]() {
					goto l67
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l67
				}
				{
					position69, tokenIndex69 := position, tokenIndex
					if !_rules[rule_]() {
						goto l69
					}
					if !_rules[ruleInfraspGroup]() {
						goto l69
					}
					goto l70
				l69:
					position, tokenIndex = position69, tokenIndex69
				}
			l70:
				add(ruleGraftChimeraFormulaPart, position68)
			}
			return true
		l67:
			position, tokenIndex = position67, tokenIndex67
			return false
		},
		/* 12 NamedGenusGraftChimera <- <(GraftChimeraChar _? SingleName)> */
		func() bool {
			position71, tokenIndex71 := position, tokenIndex
			{
				position72 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l71
				}
				{
					position73, tokenIndex73 := position, tokenIndex
					if !_rules[rule_]() {
						goto l73
					}
					goto l74
				l73:
					position, tokenIndex = position73, tokenIndex73
				}
			l74:
				if !_rules[ruleSingleName]() {
					goto l71
				}
				add(ruleNamedGenusGraftChimera, position72)
			}
			return true
		l71:
			position, tokenIndex = position71, tokenIndex71
			return false
		},
		/* 13 CandidatusName <- <(Candidatus _ SingleName)> */
		func() bool {
			position75, tokenIndex75 := position, tokenIndex
			{
				position76 := position
				if !_rules[ruleCandidatus]() {
					goto l75
				}
				if !_rules[rule_]() {
					goto l75
				}
				if !_rules[ruleSingleName]() {
					goto l75
				}
				add(ruleCandidatusName, position76)
			}
			return true
		l75:
			position, tokenIndex = position75, tokenIndex75
			return false
		},
		/* 14 Candidatus <- <('C' 'a' 'n' 'd' 'i' 'd' 'a' 't' 'u' 's')> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				if buffer[position] != rune('C') {
					goto l77
				}
				position++
				if buffer[position] != rune('a') {
					goto l77
				}
				position++
				if buffer[position] != rune('n') {
					goto l77
				}
				position++
				if buffer[position] != rune('d') {
					goto l77
				}
				position++
				if buffer[position] != rune('i') {
					goto l77
				}
				position++
				if buffer[position] != rune('d') {
					goto l77
				}
				position++
				if buffer[position] != rune('a') {
					goto l77
				}
				position++
				if buffer[position] != rune('t') {
					goto l77
				}
				position++
				if buffer[position] != rune('u') {
					goto l77
				}
				position++
				if buffer[position] != rune('s') {
					goto l77
				}
				position++
				add(ruleCandidatus, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 15 SingleName <- <(NameComp / NameApprox / NameSpecies / NameUninomial)> */
		func() bool {
			position79, tokenIndex79 := position, tokenIndex
			{
				position80 := position
				{
					position81, tokenIndex81 := position, tokenIndex
					if !_rules[ruleNameComp]() {
						goto l82
					}
					goto l81
				l82:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameApprox]() {
						goto l83
					}
					goto l81
				l83:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameSpecies]() {
						goto l84
					}
					goto l81
				l84:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameUninomial]() {
						goto l79
					}
				}
			l81:
				add(ruleSingleName, position80)
			}
			return true
		l79:
			position, tokenIndex = position79, tokenIndex79
			return false
		},
		/* 16 NameUninomial <- <((UninomialCombo / Uninomial) (_ CultivarWordGroup)?)> */
		func() bool {
			position85, tokenIndex85 := position, tokenIndex
			{
				position86 := position
				{
					position87, tokenIndex87 := position, tokenIndex
					if !_rules[ruleUninomialCombo]() {
						goto l88
					}
					goto l87
				l88:
					position, tokenIndex = position87, tokenIndex87
					if !_rules[ruleUninomial]() {
						goto l85
					}
				}
			l87:
				{
					position89, tokenIndex89 := position, tokenIndex
					if !_rules[rule_]() {
						goto l89
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l89
					}
					goto l90
				l89:
					position, tokenIndex = position89, tokenIndex89
				}
			l90:
				add(ruleNameUninomial, position86)
			}
			return true
		l85:
			position, tokenIndex = position85, tokenIndex85
			return false
		},
		/* 17 NameApprox <- <(GenusWord (_ SpeciesEpithet)? _ Approximation ApproxNameIgnored)> */
		func() bool {
			position91, tokenIndex91 := position, tokenIndex
			{
				position92 := position
				if !_rules[ruleGenusWord]() {
					goto l91
				}
				{
					position93, tokenIndex93 := position, tokenIndex
					if !_rules[rule_]() {
						goto l93
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l93
					}
					goto l94
				l93:
					position, tokenIndex = position93, tokenIndex93
				}
			l94:
				if !_rules[rule_]() {
					goto l91
				}
				if !_rules[ruleApproximation]() {
					goto l91
				}
				if !_rules[ruleApproxNameIgnored]() {
					goto l91
				}
				add(ruleNameApprox, position92)
			}
			return true
		l91:
			position, tokenIndex = position91, tokenIndex91
			return false
		},
		/* 18 NameComp <- <(GenusWord _ Comparison (_ SpeciesEpithet)?)> */
		func() bool {
			position95, tokenIndex95 := position, tokenIndex
			{
				position96 := position
				if !_rules[ruleGenusWord]() {
					goto l95
				}
				if !_rules[rule_]() {
					goto l95
				}
				if !_rules[ruleComparison]() {
					goto l95
				}
				{
					position97, tokenIndex97 := position, tokenIndex
					if !_rules[rule_]() {
						goto l97
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l97
					}
					goto l98
				l97:
					position, tokenIndex = position97, tokenIndex97
				}
			l98:
				add(ruleNameComp, position96)
			}
			return true
		l95:
			position, tokenIndex = position95, tokenIndex95
			return false
		},
		/* 19 NameSpecies <- <(GenusWord (_? (Subgenus / SubgenusOrSuperspecies))? _ SpeciesEpithet (_ InfraspGroup)? (_ CultivarWordGroup)?)> */
		func() bool {
			position99, tokenIndex99 := position, tokenIndex
			{
				position100 := position
				if !_rules[ruleGenusWord]() {
					goto l99
				}
				{
					position101, tokenIndex101 := position, tokenIndex
					{
						position103, tokenIndex103 := position, tokenIndex
						if !_rules[rule_]() {
							goto l103
						}
						goto l104
					l103:
						position, tokenIndex = position103, tokenIndex103
					}
				l104:
					{
						position105, tokenIndex105 := position, tokenIndex
						if !_rules[ruleSubgenus]() {
							goto l106
						}
						goto l105
					l106:
						position, tokenIndex = position105, tokenIndex105
						if !_rules[ruleSubgenusOrSuperspecies]() {
							goto l101
						}
					}
				l105:
					goto l102
				l101:
					position, tokenIndex = position101, tokenIndex101
				}
			l102:
				if !_rules[rule_]() {
					goto l99
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l99
				}
				{
					position107, tokenIndex107 := position, tokenIndex
					if !_rules[rule_]() {
						goto l107
					}
					if !_rules[ruleInfraspGroup]() {
						goto l107
					}
					goto l108
				l107:
					position, tokenIndex = position107, tokenIndex107
				}
			l108:
				{
					position109, tokenIndex109 := position, tokenIndex
					if !_rules[rule_]() {
						goto l109
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l109
					}
					goto l110
				l109:
					position, tokenIndex = position109, tokenIndex109
				}
			l110:
				add(ruleNameSpecies, position100)
			}
			return true
		l99:
			position, tokenIndex = position99, tokenIndex99
			return false
		},
		/* 20 GenusWord <- <((AbbrGenus / UninomialWord) !(_ AuthorWord))> */
		func() bool {
			position111, tokenIndex111 := position, tokenIndex
			{
				position112 := position
				{
					position113, tokenIndex113 := position, tokenIndex
					if !_rules[ruleAbbrGenus]() {
						goto l114
					}
					goto l113
				l114:
					position, tokenIndex = position113, tokenIndex113
					if !_rules[ruleUninomialWord]() {
						goto l111
					}
				}
			l113:
				{
					position115, tokenIndex115 := position, tokenIndex
					if !_rules[rule_]() {
						goto l115
					}
					if !_rules[ruleAuthorWord]() {
						goto l115
					}
					goto l111
				l115:
					position, tokenIndex = position115, tokenIndex115
				}
				add(ruleGenusWord, position112)
			}
			return true
		l111:
			position, tokenIndex = position111, tokenIndex111
			return false
		},
		/* 21 InfraspGroup <- <(InfraspEpithet (_ InfraspEpithet)? (_ InfraspEpithet)?)> */
		func() bool {
			position116, tokenIndex116 := position, tokenIndex
			{
				position117 := position
				if !_rules[ruleInfraspEpithet]() {
					goto l116
				}
				{
					position118, tokenIndex118 := position, tokenIndex
					if !_rules[rule_]() {
						goto l118
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l118
					}
					goto l119
				l118:
					position, tokenIndex = position118, tokenIndex118
				}
			l119:
				{
					position120, tokenIndex120 := position, tokenIndex
					if !_rules[rule_]() {
						goto l120
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l120
					}
					goto l121
				l120:
					position, tokenIndex = position120, tokenIndex120
				}
			l121:
				add(ruleInfraspGroup, position117)
			}
			return true
		l116:
			position, tokenIndex = position116, tokenIndex116
			return false
		},
		/* 22 InfraspEpithet <- <((Rank _?)? !AuthorEx Word (_? Authorship)?)> */
		func() bool {
			position122, tokenIndex122 := position, tokenIndex
			{
				position123 := position
				{
					position124, tokenIndex124 := position, tokenIndex
					if !_rules[ruleRank]() {
						goto l124
					}
					{
						position126, tokenIndex126 := position, tokenIndex
						if !_rules[rule_]() {
							goto l126
						}
						goto l127
					l126:
						position, tokenIndex = position126, tokenIndex126
					}
				l127:
					goto l125
				l124:
					position, tokenIndex = position124, tokenIndex124
				}
			l125:
				{
					position128, tokenIndex128 := position, tokenIndex
					if !_rules[ruleAuthorEx]() {
						goto l128
					}
					goto l122
				l128:
					position, tokenIndex = position128, tokenIndex128
				}
				if !_rules[ruleWord]() {
					goto l122
				}
				{
					position129, tokenIndex129 := position, tokenIndex
					{
						position131, tokenIndex131 := position, tokenIndex
						if !_rules[rule_]() {
							goto l131
						}
						goto l132
					l131:
						position, tokenIndex = position131, tokenIndex131
					}
				l132:
					if !_rules[ruleAuthorship]() {
						goto l129
					}
					goto l130
				l129:
					position, tokenIndex = position129, tokenIndex129
				}
			l130:
				add(ruleInfraspEpithet, position123)
			}
			return true
		l122:
			position, tokenIndex = position122, tokenIndex122
			return false
		},
		/* 23 CultivarWordGroup <- <(((RankCultivar _)? CultivarApostrophe CultivarRecursive CultivarApostrophe) / (RankCultivar _ Cultivar))> */
		func() bool {
			position133, tokenIndex133 := position, tokenIndex
			{
				position134 := position
				{
					position135, tokenIndex135 := position, tokenIndex
					{
						position137, tokenIndex137 := position, tokenIndex
						if !_rules[ruleRankCultivar]() {
							goto l137
						}
						if !_rules[rule_]() {
							goto l137
						}
						goto l138
					l137:
						position, tokenIndex = position137, tokenIndex137
					}
				l138:
					if !_rules[ruleCultivarApostrophe]() {
						goto l136
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l136
					}
					if !_rules[ruleCultivarApostrophe]() {
						goto l136
					}
					goto l135
				l136:
					position, tokenIndex = position135, tokenIndex135
					if !_rules[ruleRankCultivar]() {
						goto l133
					}
					if !_rules[rule_]() {
						goto l133
					}
					if !_rules[ruleCultivar]() {
						goto l133
					}
				}
			l135:
				add(ruleCultivarWordGroup, position134)
			}
			return true
		l133:
			position, tokenIndex = position133, tokenIndex133
			return false
		},
		/* 24 Cultivar <- <NotHybridChar+> */
		func() bool {
			position139, tokenIndex139 := position, tokenIndex
			{
				position140 := position
				if !_rules[ruleNotHybridChar]() {
					goto l139
				}
			l141:
				{
					position142, tokenIndex142 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l142
					}
					goto l141
				l142:
					position, tokenIndex = position142, tokenIndex142
				}
				add(ruleCultivar, position140)
			}
			return true
		l139:
			position, tokenIndex = position139, tokenIndex139
			return false
		},
		/* 25 RankCultivar <- <('c' 'v' '.'?)> */
		func() bool {
			position143, tokenIndex143 := position, tokenIndex
			{
				position144 := position
				if buffer[position] != rune('c') {
					goto l143
				}
				position++
				if buffer[position] != rune('v') {
					goto l143
				}
				position++
				{
					position145, tokenIndex145 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l145
					}
					position++
					goto l146
				l145:
					position, tokenIndex = position145, tokenIndex145
				}
			l146:
				add(ruleRankCultivar, position144)
			}
			return true
		l143:
			position, tokenIndex = position143, tokenIndex143
			return false
		},
		/* 26 NotHybridChar <- <(!(_ HybridChar) .)> */
		func() bool {
			position147, tokenIndex147 := position, tokenIndex
			{
				position148 := position
				{
					position149, tokenIndex149 := position, tokenIndex
					if !_rules[rule_]() {
						goto l149
					}
					if !_rules[ruleHybridChar]() {
						goto l149
					}
					goto l147
				l149:
					position, tokenIndex = position149, tokenIndex149
				}
				if !matchDot() {
					goto l147
				}
				add(ruleNotHybridChar, position148)
			}
			return true
		l147:
			position, tokenIndex = position147, tokenIndex147
			return false
		},
		/* 27 CultivarRecursive <- <((NotHybridChar CultivarRecursive) / &CultivarApostrophe)> */
		func() bool {
			position150, tokenIndex150 := position, tokenIndex
			{
				position151 := position
				{
					position152, tokenIndex152 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l153
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l153
					}
					goto l152
				l153:
					position, tokenIndex = position152, tokenIndex152
					{
						position154, tokenIndex154 := position, tokenIndex
						if !_rules[ruleCultivarApostrophe]() {
							goto l150
						}
						position, tokenIndex = position154, tokenIndex154
					}
				}
			l152:
				add(ruleCultivarRecursive, position151)
			}
			return true
		l150:
			position, tokenIndex = position150, tokenIndex150
			return false
		},
		/* 28 CultivarApostrophe <- <('\'' / '‘' / '’' / '"' / '“' / '”')> */
		func() bool {
			position155, tokenIndex155 := position, tokenIndex
			{
				position156 := position
				{
					position157, tokenIndex157 := position, tokenIndex
					if buffer[position] != rune('\'') {
						goto l158
					}
					position++
					goto l157
				l158:
					position, tokenIndex = position157, tokenIndex157
					if buffer[position] != rune('‘') {
						goto l159
					}
					position++
					goto l157
				l159:
					position, tokenIndex = position157, tokenIndex157
					if buffer[position] != rune('’') {
						goto l160
					}
					position++
					goto l157
				l160:
					position, tokenIndex = position157, tokenIndex157
					if buffer[position] != rune('"') {
						goto l161
					}
					position++
					goto l157
				l161:
					position, tokenIndex = position157, tokenIndex157
					if buffer[position] != rune('“') {
						goto l162
					}
					position++
					goto l157
				l162:
					position, tokenIndex = position157, tokenIndex157
					if buffer[position] != rune('”') {
						goto l155
					}
					position++
				}
			l157:
				add(ruleCultivarApostrophe, position156)
			}
			return true
		l155:
			position, tokenIndex = position155, tokenIndex155
			return false
		},
		/* 29 SpeciesEpithet <- <(!AuthorEx Word (_? Authorship)?)> */
		func() bool {
			position163, tokenIndex163 := position, tokenIndex
			{
				position164 := position
				{
					position165, tokenIndex165 := position, tokenIndex
					if !_rules[ruleAuthorEx]() {
						goto l165
					}
					goto l163
				l165:
					position, tokenIndex = position165, tokenIndex165
				}
				if !_rules[ruleWord]() {
					goto l163
				}
				{
					position166, tokenIndex166 := position, tokenIndex
					{
						position168, tokenIndex168 := position, tokenIndex
						if !_rules[rule_]() {
							goto l168
						}
						goto l169
					l168:
						position, tokenIndex = position168, tokenIndex168
					}
				l169:
					if !_rules[ruleAuthorship]() {
						goto l166
					}
					goto l167
				l166:
					position, tokenIndex = position166, tokenIndex166
				}
			l167:
				add(ruleSpeciesEpithet, position164)
			}
			return true
		l163:
			position, tokenIndex = position163, tokenIndex163
			return false
		},
		/* 30 Comparison <- <('c' 'f' '.'? &SpaceCharEOI)> */
		func() bool {
			position170, tokenIndex170 := position, tokenIndex
			{
				position171 := position
				if buffer[position] != rune('c') {
					goto l170
				}
				position++
				if buffer[position] != rune('f') {
					goto l170
				}
				position++
				{
					position172, tokenIndex172 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l172
					}
					position++
					goto l173
				l172:
					position, tokenIndex = position172, tokenIndex172
				}
			l173:
				{
					position174, tokenIndex174 := position, tokenIndex
					if !_rules[ruleSpaceCharEOI]() {
						goto l170
					}
					position, tokenIndex = position174, tokenIndex174
				}
				add(ruleComparison, position171)
			}
			return true
		l170:
			position, tokenIndex = position170, tokenIndex170
			return false
		},
		/* 31 Rank <- <((RankForma / RankVar / RankSsp / RankOther / RankOtherUncommon / RankAgamo / RankNotho) (_? LowerGreek ('.' / &SpaceCharEOI))?)> */
		func() bool {
			position175, tokenIndex175 := position, tokenIndex
			{
				position176 := position
				{
					position177, tokenIndex177 := position, tokenIndex
					if !_rules[ruleRankForma]() {
						goto l178
					}
					goto l177
				l178:
					position, tokenIndex = position177, tokenIndex177
					if !_rules[ruleRankVar]() {
						goto l179
					}
					goto l177
				l179:
					position, tokenIndex = position177, tokenIndex177
					if !_rules[ruleRankSsp]() {
						goto l180
					}
					goto l177
				l180:
					position, tokenIndex = position177, tokenIndex177
					if !_rules[ruleRankOther]() {
						goto l181
					}
					goto l177
				l181:
					position, tokenIndex = position177, tokenIndex177
					if !_rules[ruleRankOtherUncommon]() {
						goto l182
					}
					goto l177
				l182:
					position, tokenIndex = position177, tokenIndex177
					if !_rules[ruleRankAgamo]() {
						goto l183
					}
					goto l177
				l183:
					position, tokenIndex = position177, tokenIndex177
					if !_rules[ruleRankNotho]() {
						goto l175
					}
				}
			l177:
				{
					position184, tokenIndex184 := position, tokenIndex
					{
						position186, tokenIndex186 := position, tokenIndex
						if !_rules[rule_]() {
							goto l186
						}
						goto l187
					l186:
						position, tokenIndex = position186, tokenIndex186
					}
				l187:
					if !_rules[ruleLowerGreek]() {
						goto l184
					}
					{
						position188, tokenIndex188 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l189
						}
						position++
						goto l188
					l189:
						position, tokenIndex = position188, tokenIndex188
						{
							position190, tokenIndex190 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l184
							}
							position, tokenIndex = position190, tokenIndex190
						}
					}
				l188:
					goto l185
				l184:
					position, tokenIndex = position184, tokenIndex184
				}
			l185:
				add(ruleRank, position176)
			}
			return true
		l175:
			position, tokenIndex = position175, tokenIndex175
			return false
		},
		/* 32 RankNotho <- <((('n' 'o' 't' 'h' 'o' (('v' 'a' 'r') / ('f' 'o') / 'f' / ('s' 'u' 'b' 's' 'p') / ('s' 's' 'p') / ('s' 'p') / ('m' 'o' 'r' 't' 'h') / ('s' 'u' 'p' 's' 'p') / ('s' 'u'))) / ('n' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position191, tokenIndex191 := position, tokenIndex
			{
				position192 := position
				{
					position193, tokenIndex193 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l194
					}
					position++
					if buffer[position] != rune('o') {
						goto l194
					}
					position++
					if buffer[position] != rune('t') {
						goto l194
					}
					position++
					if buffer[position] != rune('h') {
						goto l194
					}
					position++
					if buffer[position] != rune('o') {
						goto l194
					}
					position++
					{
						position195, tokenIndex195 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l196
						}
						position++
						if buffer[position] != rune('a') {
							goto l196
						}
						position++
						if buffer[position] != rune('r') {
							goto l196
						}
						position++
						goto l195
					l196:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('f') {
							goto l197
						}
						position++
						if buffer[position] != rune('o') {
							goto l197
						}
						position++
						goto l195
					l197:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('f') {
							goto l198
						}
						position++
						goto l195
					l198:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('s') {
							goto l199
						}
						position++
						if buffer[position] != rune('u') {
							goto l199
						}
						position++
						if buffer[position] != rune('b') {
							goto l199
						}
						position++
						if buffer[position] != rune('s') {
							goto l199
						}
						position++
						if buffer[position] != rune('p') {
							goto l199
						}
						position++
						goto l195
					l199:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('s') {
							goto l200
						}
						position++
						if buffer[position] != rune('s') {
							goto l200
						}
						position++
						if buffer[position] != rune('p') {
							goto l200
						}
						position++
						goto l195
					l200:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('s') {
							goto l201
						}
						position++
						if buffer[position] != rune('p') {
							goto l201
						}
						position++
						goto l195
					l201:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('m') {
							goto l202
						}
						position++
						if buffer[position] != rune('o') {
							goto l202
						}
						position++
						if buffer[position] != rune('r') {
							goto l202
						}
						position++
						if buffer[position] != rune('t') {
							goto l202
						}
						position++
						if buffer[position] != rune('h') {
							goto l202
						}
						position++
						goto l195
					l202:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('s') {
							goto l203
						}
						position++
						if buffer[position] != rune('u') {
							goto l203
						}
						position++
						if buffer[position] != rune('p') {
							goto l203
						}
						position++
						if buffer[position] != rune('s') {
							goto l203
						}
						position++
						if buffer[position] != rune('p') {
							goto l203
						}
						position++
						goto l195
					l203:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('s') {
							goto l194
						}
						position++
						if buffer[position] != rune('u') {
							goto l194
						}
						position++
					}
				l195:
					goto l193
				l194:
					position, tokenIndex = position193, tokenIndex193
					if buffer[position] != rune('n') {
						goto l191
					}
					position++
					if buffer[position] != rune('v') {
						goto l191
					}
					position++
					if buffer[position] != rune('a') {
						goto l191
					}
					position++
					if buffer[position] != rune('r') {
						goto l191
					}
					position++
				}
			l193:
				{
					position204, tokenIndex204 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l205
					}
					position++
					goto l204
				l205:
					position, tokenIndex = position204, tokenIndex204
					{
						position206, tokenIndex206 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l191
						}
						position, tokenIndex = position206, tokenIndex206
					}
				}
			l204:
				add(ruleRankNotho, position192)
			}
			return true
		l191:
			position, tokenIndex = position191, tokenIndex191
			return false
		},
		/* 33 RankOtherUncommon <- <(('*' / ('n' 'a' 't' 'i' 'o') / ('n' 'a' 't' '.') / ('n' 'a' 't') / ('f' '.' 's' 'p') / 'α' / ('β' 'β') / 'β' / 'γ' / 'δ' / 'ε' / 'φ' / 'θ' / 'μ' / ('a' '.') / ('b' '.') / ('c' '.') / ('d' '.') / ('e' '.') / ('g' '.') / ('k' '.') / ('m' 'u' 't' '.')) &SpaceCharEOI)> */
		func() bool {
			position207, tokenIndex207 := position, tokenIndex
			{
				position208 := position
				{
					position209, tokenIndex209 := position, tokenIndex
					if buffer[position] != rune('*') {
						goto l210
					}
					position++
					goto l209
				l210:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('n') {
						goto l211
					}
					position++
					if buffer[position] != rune('a') {
						goto l211
					}
					position++
					if buffer[position] != rune('t') {
						goto l211
					}
					position++
					if buffer[position] != rune('i') {
						goto l211
					}
					position++
					if buffer[position] != rune('o') {
						goto l211
					}
					position++
					goto l209
				l211:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('n') {
						goto l212
					}
					position++
					if buffer[position] != rune('a') {
						goto l212
					}
					position++
					if buffer[position] != rune('t') {
						goto l212
					}
					position++
					if buffer[position] != rune('.') {
						goto l212
					}
					position++
					goto l209
				l212:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('n') {
						goto l213
					}
					position++
					if buffer[position] != rune('a') {
						goto l213
					}
					position++
					if buffer[position] != rune('t') {
						goto l213
					}
					position++
					goto l209
				l213:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('f') {
						goto l214
					}
					position++
					if buffer[position] != rune('.') {
						goto l214
					}
					position++
					if buffer[position] != rune('s') {
						goto l214
					}
					position++
					if buffer[position] != rune('p') {
						goto l214
					}
					position++
					goto l209
				l214:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('α') {
						goto l215
					}
					position++
					goto l209
				l215:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('β') {
						goto l216
					}
					position++
					if buffer[position] != rune('β') {
						goto l216
					}
					position++
					goto l209
				l216:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('β') {
						goto l217
					}
					position++
					goto l209
				l217:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('γ') {
						goto l218
					}
					position++
					goto l209
				l218:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('δ') {
						goto l219
					}
					position++
					goto l209
				l219:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('ε') {
						goto l220
					}
					position++
					goto l209
				l220:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('φ') {
						goto l221
					}
					position++
					goto l209
				l221:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('θ') {
						goto l222
					}
					position++
					goto l209
				l222:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('μ') {
						goto l223
					}
					position++
					goto l209
				l223:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('a') {
						goto l224
					}
					position++
					if buffer[position] != rune('.') {
						goto l224
					}
					position++
					goto l209
				l224:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('b') {
						goto l225
					}
					position++
					if buffer[position] != rune('.') {
						goto l225
					}
					position++
					goto l209
				l225:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('c') {
						goto l226
					}
					position++
					if buffer[position] != rune('.') {
						goto l226
					}
					position++
					goto l209
				l226:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('d') {
						goto l227
					}
					position++
					if buffer[position] != rune('.') {
						goto l227
					}
					position++
					goto l209
				l227:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('e') {
						goto l228
					}
					position++
					if buffer[position] != rune('.') {
						goto l228
					}
					position++
					goto l209
				l228:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('g') {
						goto l229
					}
					position++
					if buffer[position] != rune('.') {
						goto l229
					}
					position++
					goto l209
				l229:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('k') {
						goto l230
					}
					position++
					if buffer[position] != rune('.') {
						goto l230
					}
					position++
					goto l209
				l230:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('m') {
						goto l207
					}
					position++
					if buffer[position] != rune('u') {
						goto l207
					}
					position++
					if buffer[position] != rune('t') {
						goto l207
					}
					position++
					if buffer[position] != rune('.') {
						goto l207
					}
					position++
				}
			l209:
				{
					position231, tokenIndex231 := position, tokenIndex
					if !_rules[ruleSpaceCharEOI]() {
						goto l207
					}
					position, tokenIndex = position231, tokenIndex231
				}
				add(ruleRankOtherUncommon, position208)
			}
			return true
		l207:
			position, tokenIndex = position207, tokenIndex207
			return false
		},
		/* 34 RankOther <- <((('m' 'o' 'r' 'p' 'h') / ('c' 'o' 'n' 'v' 'a' 'r') / ('p' 's' 'e' 'u' 'd' 'o' 'v' 'a' 'r') / ('s' 'e' 'c' 't') / ('s' 'e' 'r') / ('s' 'u' 'b' 'v' 'a' 'r') / ('s' 'u' 'b' 'f') / ('r' 'a' 'c' 'e') / ('p' 'v') / ('p' 'a' 't' 'h' 'o' 'v' 'a' 'r') / ('a' 'b' '.' (_? ('n' '.'))?) / ('s' 't')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position232, tokenIndex232 := position, tokenIndex
			{
				position233 := position
				{
					position234, tokenIndex234 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l235
					}
					position++
					if buffer[position] != rune('o') {
						goto l235
					}
					position++
					if buffer[position] != rune('r') {
						goto l235
					}
					position++
					if buffer[position] != rune('p') {
						goto l235
					}
					position++
					if buffer[position] != rune('h') {
						goto l235
					}
					position++
					goto l234
				l235:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('c') {
						goto l236
					}
					position++
					if buffer[position] != rune('o') {
						goto l236
					}
					position++
					if buffer[position] != rune('n') {
						goto l236
					}
					position++
					if buffer[position] != rune('v') {
						goto l236
					}
					position++
					if buffer[position] != rune('a') {
						goto l236
					}
					position++
					if buffer[position] != rune('r') {
						goto l236
					}
					position++
					goto l234
				l236:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('p') {
						goto l237
					}
					position++
					if buffer[position] != rune('s') {
						goto l237
					}
					position++
					if buffer[position] != rune('e') {
						goto l237
					}
					position++
					if buffer[position] != rune('u') {
						goto l237
					}
					position++
					if buffer[position] != rune('d') {
						goto l237
					}
					position++
					if buffer[position] != rune('o') {
						goto l237
					}
					position++
					if buffer[position] != rune('v') {
						goto l237
					}
					position++
					if buffer[position] != rune('a') {
						goto l237
					}
					position++
					if buffer[position] != rune('r') {
						goto l237
					}
					position++
					goto l234
				l237:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('s') {
						goto l238
					}
					position++
					if buffer[position] != rune('e') {
						goto l238
					}
					position++
					if buffer[position] != rune('c') {
						goto l238
					}
					position++
					if buffer[position] != rune('t') {
						goto l238
					}
					position++
					goto l234
				l238:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('s') {
						goto l239
					}
					position++
					if buffer[position] != rune('e') {
						goto l239
					}
					position++
					if buffer[position] != rune('r') {
						goto l239
					}
					position++
					goto l234
				l239:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('s') {
						goto l240
					}
					position++
					if buffer[position] != rune('u') {
						goto l240
					}
					position++
					if buffer[position] != rune('b') {
						goto l240
					}
					position++
					if buffer[position] != rune('v') {
						goto l240
					}
					position++
					if buffer[position] != rune('a') {
						goto l240
					}
					position++
					if buffer[position] != rune('r') {
						goto l240
					}
					position++
					goto l234
				l240:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('s') {
						goto l241
					}
					position++
					if buffer[position] != rune('u') {
						goto l241
					}
					position++
					if buffer[position] != rune('b') {
						goto l241
					}
					position++
					if buffer[position] != rune('f') {
						goto l241
					}
					position++
					goto l234
				l241:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('r') {
						goto l242
					}
					position++
					if buffer[position] != rune('a') {
						goto l242
					}
					position++
					if buffer[position] != rune('c') {
						goto l242
					}
					position++
					if buffer[position] != rune('e') {
						goto l242
					}
					position++
					goto l234
				l242:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('p') {
						goto l243
					}
					position++
					if buffer[position] != rune('v') {
						goto l243
					}
					position++
					goto l234
				l243:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('p') {
						goto l244
					}
					position++
					if buffer[position] != rune('a') {
						goto l244
					}
					position++
					if buffer[position] != rune('t') {
						goto l244
					}
					position++
					if buffer[position] != rune('h') {
						goto l244
					}
					position++
					if buffer[position] != rune('o') {
						goto l244
					}
					position++
					if buffer[position] != rune('v') {
						goto l244
					}
					position++
					if buffer[position] != rune('a') {
						goto l244
					}
					position++
					if buffer[position] != rune('r') {
						goto l244
					}
					position++
					goto l234
				l244:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('a') {
						goto l245
					}
					position++
					if buffer[position] != rune('b') {
						goto l245
					}
					position++
					if buffer[position] != rune('.') {
						goto l245
					}
					position++
					{
						position246, tokenIndex246 := position, tokenIndex
						{
							position248, tokenIndex248 := position, tokenIndex
							if !_rules[rule_]() {
								goto l248
							}
							goto l249
						l248:
							position, tokenIndex = position248, tokenIndex248
						}
					l249:
						if buffer[position] != rune('n') {
							goto l246
						}
						position++
						if buffer[position] != rune('.') {
							goto l246
						}
						position++
						goto l247
					l246:
						position, tokenIndex = position246, tokenIndex246
					}
				l247:
					goto l234
				l245:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('s') {
						goto l232
					}
					position++
					if buffer[position] != rune('t') {
						goto l232
					}
					position++
				}
			l234:
				{
					position250, tokenIndex250 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l251
					}
					position++
					goto l250
				l251:
					position, tokenIndex = position250, tokenIndex250
					{
						position252, tokenIndex252 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l232
						}
						position, tokenIndex = position252, tokenIndex252
					}
				}
			l250:
				add(ruleRankOther, position233)
			}
			return true
		l232:
			position, tokenIndex = position232, tokenIndex232
			return false
		},
		/* 35 RankVar <- <((('v' 'a' 'r' 'i' 'e' 't' 'y') / ('[' 'v' 'a' 'r' '.' ']') / ('v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position253, tokenIndex253 := position, tokenIndex
			{
				position254 := position
				{
					position255, tokenIndex255 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l256
					}
					position++
					if buffer[position] != rune('a') {
						goto l256
					}
					position++
					if buffer[position] != rune('r') {
						goto l256
					}
					position++
					if buffer[position] != rune('i') {
						goto l256
					}
					position++
					if buffer[position] != rune('e') {
						goto l256
					}
					position++
					if buffer[position] != rune('t') {
						goto l256
					}
					position++
					if buffer[position] != rune('y') {
						goto l256
					}
					position++
					goto l255
				l256:
					position, tokenIndex = position255, tokenIndex255
					if buffer[position] != rune('[') {
						goto l257
					}
					position++
					if buffer[position] != rune('v') {
						goto l257
					}
					position++
					if buffer[position] != rune('a') {
						goto l257
					}
					position++
					if buffer[position] != rune('r') {
						goto l257
					}
					position++
					if buffer[position] != rune('.') {
						goto l257
					}
					position++
					if buffer[position] != rune(']') {
						goto l257
					}
					position++
					goto l255
				l257:
					position, tokenIndex = position255, tokenIndex255
					if buffer[position] != rune('v') {
						goto l253
					}
					position++
					if buffer[position] != rune('a') {
						goto l253
					}
					position++
					if buffer[position] != rune('r') {
						goto l253
					}
					position++
				}
			l255:
				{
					position258, tokenIndex258 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l259
					}
					position++
					goto l258
				l259:
					position, tokenIndex = position258, tokenIndex258
					{
						position260, tokenIndex260 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l253
						}
						position, tokenIndex = position260, tokenIndex260
					}
				}
			l258:
				add(ruleRankVar, position254)
			}
			return true
		l253:
			position, tokenIndex = position253, tokenIndex253
			return false
		},
		/* 36 RankForma <- <((('f' 'o' 'r' 'm' 'a') / ('f' 'm' 'a') / ('f' 'm') / ('f' 'o' 'r' 'm') / ('f' 'o') / 'f') ('.' / &SpaceCharEOI))> */
		func() bool {
			position261, tokenIndex261 := position, tokenIndex
			{
				position262 := position
				{
					position263, tokenIndex263 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l264
					}
					position++
					if buffer[position] != rune('o') {
						goto l264
					}
					position++
					if buffer[position] != rune('r') {
						goto l264
					}
					position++
					if buffer[position] != rune('m') {
						goto l264
					}
					position++
					if buffer[position] != rune('a') {
						goto l264
					}
					position++
					goto l263
				l264:
					position, tokenIndex = position263, tokenIndex263
					if buffer[position] != rune('f') {
						goto l265
					}
					position++
					if buffer[position] != rune('m') {
						goto l265
					}
					position++
					if buffer[position] != rune('a') {
						goto l265
					}
					position++
					goto l263
				l265:
					position, tokenIndex = position263, tokenIndex263
					if buffer[position] != rune('f') {
						goto l266
					}
					position++
					if buffer[position] != rune('m') {
						goto l266
					}
					position++
					goto l263
				l266:
					position, tokenIndex = position263, tokenIndex263
					if buffer[position] != rune('f') {
						goto l267
					}
					position++
					if buffer[position] != rune('o') {
						goto l267
					}
					position++
					if buffer[position] != rune('r') {
						goto l267
					}
					position++
					if buffer[position] != rune('m') {
						goto l267
					}
					position++
					goto l263
				l267:
					position, tokenIndex = position263, tokenIndex263
					if buffer[position] != rune('f') {
						goto l268
					}
					position++
					if buffer[position] != rune('o') {
						goto l268
					}
					position++
					goto l263
				l268:
					position, tokenIndex = position263, tokenIndex263
					if buffer[position] != rune('f') {
						goto l261
					}
					position++
				}
			l263:
				{
					position269, tokenIndex269 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l270
					}
					position++
					goto l269
				l270:
					position, tokenIndex = position269, tokenIndex269
					{
						position271, tokenIndex271 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l261
						}
						position, tokenIndex = position271, tokenIndex271
					}
				}
			l269:
				add(ruleRankForma, position262)
			}
			return true
		l261:
			position, tokenIndex = position261, tokenIndex261
			return false
		},
		/* 37 RankSsp <- <((('s' 's' 'p') / ('s' 'u' 'b' 's' 'p' 'e' 'c') / ('s' 'u' 'b' 's' 'p')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position272, tokenIndex272 := position, tokenIndex
			{
				position273 := position
				{
					position274, tokenIndex274 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l275
					}
					position++
					if buffer[position] != rune('s') {
						goto l275
					}
					position++
					if buffer[position] != rune('p') {
						goto l275
					}
					position++
					goto l274
				l275:
					position, tokenIndex = position274, tokenIndex274
					if buffer[position] != rune('s') {
						goto l276
					}
					position++
					if buffer[position] != rune('u') {
						goto l276
					}
					position++
					if buffer[position] != rune('b') {
						goto l276
					}
					position++
					if buffer[position] != rune('s') {
						goto l276
					}
					position++
					if buffer[position] != rune('p') {
						goto l276
					}
					position++
					if buffer[position] != rune('e') {
						goto l276
					}
					position++
					if buffer[position] != rune('c') {
						goto l276
					}
					position++
					goto l274
				l276:
					position, tokenIndex = position274, tokenIndex274
					if buffer[position] != rune('s') {
						goto l272
					}
					position++
					if buffer[position] != rune('u') {
						goto l272
					}
					position++
					if buffer[position] != rune('b') {
						goto l272
					}
					position++
					if buffer[position] != rune('s') {
						goto l272
					}
					position++
					if buffer[position] != rune('p') {
						goto l272
					}
					position++
				}
			l274:
				{
					position277, tokenIndex277 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l278
					}
					position++
					goto l277
				l278:
					position, tokenIndex = position277, tokenIndex277
					{
						position279, tokenIndex279 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l272
						}
						position, tokenIndex = position279, tokenIndex279
					}
				}
			l277:
				add(ruleRankSsp, position273)
			}
			return true
		l272:
			position, tokenIndex = position272, tokenIndex272
			return false
		},
		/* 38 RankAgamo <- <((('a' 'g' 'a' 'm' 'o' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 's' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position280, tokenIndex280 := position, tokenIndex
			{
				position281 := position
				{
					position282, tokenIndex282 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l283
					}
					position++
					if buffer[position] != rune('g') {
						goto l283
					}
					position++
					if buffer[position] != rune('a') {
						goto l283
					}
					position++
					if buffer[position] != rune('m') {
						goto l283
					}
					position++
					if buffer[position] != rune('o') {
						goto l283
					}
					position++
					if buffer[position] != rune('s') {
						goto l283
					}
					position++
					if buffer[position] != rune('p') {
						goto l283
					}
					position++
					goto l282
				l283:
					position, tokenIndex = position282, tokenIndex282
					if buffer[position] != rune('a') {
						goto l284
					}
					position++
					if buffer[position] != rune('g') {
						goto l284
					}
					position++
					if buffer[position] != rune('a') {
						goto l284
					}
					position++
					if buffer[position] != rune('m') {
						goto l284
					}
					position++
					if buffer[position] != rune('o') {
						goto l284
					}
					position++
					if buffer[position] != rune('s') {
						goto l284
					}
					position++
					if buffer[position] != rune('s') {
						goto l284
					}
					position++
					if buffer[position] != rune('p') {
						goto l284
					}
					position++
					goto l282
				l284:
					position, tokenIndex = position282, tokenIndex282
					if buffer[position] != rune('a') {
						goto l280
					}
					position++
					if buffer[position] != rune('g') {
						goto l280
					}
					position++
					if buffer[position] != rune('a') {
						goto l280
					}
					position++
					if buffer[position] != rune('m') {
						goto l280
					}
					position++
					if buffer[position] != rune('o') {
						goto l280
					}
					position++
					if buffer[position] != rune('v') {
						goto l280
					}
					position++
					if buffer[position] != rune('a') {
						goto l280
					}
					position++
					if buffer[position] != rune('r') {
						goto l280
					}
					position++
				}
			l282:
				{
					position285, tokenIndex285 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l286
					}
					position++
					goto l285
				l286:
					position, tokenIndex = position285, tokenIndex285
					{
						position287, tokenIndex287 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l280
						}
						position, tokenIndex = position287, tokenIndex287
					}
				}
			l285:
				add(ruleRankAgamo, position281)
			}
			return true
		l280:
			position, tokenIndex = position280, tokenIndex280
			return false
		},
		/* 39 SubgenusOrSuperspecies <- <('(' _? NameLowerChar+ _? ')')> */
		func() bool {
			position288, tokenIndex288 := position, tokenIndex
			{
				position289 := position
				if buffer[position] != rune('(') {
					goto l288
				}
				position++
				{
					position290, tokenIndex290 := position, tokenIndex
					if !_rules[rule_]() {
						goto l290
					}
					goto l291
				l290:
					position, tokenIndex = position290, tokenIndex290
				}
			l291:
				if !_rules[ruleNameLowerChar]() {
					goto l288
				}
			l292:
				{
					position293, tokenIndex293 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l293
					}
					goto l292
				l293:
					position, tokenIndex = position293, tokenIndex293
				}
				{
					position294, tokenIndex294 := position, tokenIndex
					if !_rules[rule_]() {
						goto l294
					}
					goto l295
				l294:
					position, tokenIndex = position294, tokenIndex294
				}
			l295:
				if buffer[position] != rune(')') {
					goto l288
				}
				position++
				add(ruleSubgenusOrSuperspecies, position289)
			}
			return true
		l288:
			position, tokenIndex = position288, tokenIndex288
			return false
		},
		/* 40 Subgenus <- <(Subgenus2 / Subgenus1)> */
		func() bool {
			position296, tokenIndex296 := position, tokenIndex
			{
				position297 := position
				{
					position298, tokenIndex298 := position, tokenIndex
					if !_rules[ruleSubgenus2]() {
						goto l299
					}
					goto l298
				l299:
					position, tokenIndex = position298, tokenIndex298
					if !_rules[ruleSubgenus1]() {
						goto l296
					}
				}
			l298:
				add(ruleSubgenus, position297)
			}
			return true
		l296:
			position, tokenIndex = position296, tokenIndex296
			return false
		},
		/* 41 Subgenus2 <- <('(' _? AbbrSubgenus _? ')' !(_? NameUpperChar))> */
		func() bool {
			position300, tokenIndex300 := position, tokenIndex
			{
				position301 := position
				if buffer[position] != rune('(') {
					goto l300
				}
				position++
				{
					position302, tokenIndex302 := position, tokenIndex
					if !_rules[rule_]() {
						goto l302
					}
					goto l303
				l302:
					position, tokenIndex = position302, tokenIndex302
				}
			l303:
				if !_rules[ruleAbbrSubgenus]() {
					goto l300
				}
				{
					position304, tokenIndex304 := position, tokenIndex
					if !_rules[rule_]() {
						goto l304
					}
					goto l305
				l304:
					position, tokenIndex = position304, tokenIndex304
				}
			l305:
				if buffer[position] != rune(')') {
					goto l300
				}
				position++
				{
					position306, tokenIndex306 := position, tokenIndex
					{
						position307, tokenIndex307 := position, tokenIndex
						if !_rules[rule_]() {
							goto l307
						}
						goto l308
					l307:
						position, tokenIndex = position307, tokenIndex307
					}
				l308:
					if !_rules[ruleNameUpperChar]() {
						goto l306
					}
					goto l300
				l306:
					position, tokenIndex = position306, tokenIndex306
				}
				add(ruleSubgenus2, position301)
			}
			return true
		l300:
			position, tokenIndex = position300, tokenIndex300
			return false
		},
		/* 42 Subgenus1 <- <('(' _? UninomialWord _? ')')> */
		func() bool {
			position309, tokenIndex309 := position, tokenIndex
			{
				position310 := position
				if buffer[position] != rune('(') {
					goto l309
				}
				position++
				{
					position311, tokenIndex311 := position, tokenIndex
					if !_rules[rule_]() {
						goto l311
					}
					goto l312
				l311:
					position, tokenIndex = position311, tokenIndex311
				}
			l312:
				if !_rules[ruleUninomialWord]() {
					goto l309
				}
				{
					position313, tokenIndex313 := position, tokenIndex
					if !_rules[rule_]() {
						goto l313
					}
					goto l314
				l313:
					position, tokenIndex = position313, tokenIndex313
				}
			l314:
				if buffer[position] != rune(')') {
					goto l309
				}
				position++
				add(ruleSubgenus1, position310)
			}
			return true
		l309:
			position, tokenIndex = position309, tokenIndex309
			return false
		},
		/* 43 UninomialCombo <- <(UninomialCombo1 / UninomialCombo2)> */
		func() bool {
			position315, tokenIndex315 := position, tokenIndex
			{
				position316 := position
				{
					position317, tokenIndex317 := position, tokenIndex
					if !_rules[ruleUninomialCombo1]() {
						goto l318
					}
					goto l317
				l318:
					position, tokenIndex = position317, tokenIndex317
					if !_rules[ruleUninomialCombo2]() {
						goto l315
					}
				}
			l317:
				add(ruleUninomialCombo, position316)
			}
			return true
		l315:
			position, tokenIndex = position315, tokenIndex315
			return false
		},
		/* 44 UninomialCombo1 <- <(UninomialWord _? Subgenus (_? Authorship)?)> */
		func() bool {
			position319, tokenIndex319 := position, tokenIndex
			{
				position320 := position
				if !_rules[ruleUninomialWord]() {
					goto l319
				}
				{
					position321, tokenIndex321 := position, tokenIndex
					if !_rules[rule_]() {
						goto l321
					}
					goto l322
				l321:
					position, tokenIndex = position321, tokenIndex321
				}
			l322:
				if !_rules[ruleSubgenus]() {
					goto l319
				}
				{
					position323, tokenIndex323 := position, tokenIndex
					{
						position325, tokenIndex325 := position, tokenIndex
						if !_rules[rule_]() {
							goto l325
						}
						goto l326
					l325:
						position, tokenIndex = position325, tokenIndex325
					}
				l326:
					if !_rules[ruleAuthorship]() {
						goto l323
					}
					goto l324
				l323:
					position, tokenIndex = position323, tokenIndex323
				}
			l324:
				add(ruleUninomialCombo1, position320)
			}
			return true
		l319:
			position, tokenIndex = position319, tokenIndex319
			return false
		},
		/* 45 UninomialCombo2 <- <(Uninomial _ RankUninomial _ Uninomial)> */
		func() bool {
			position327, tokenIndex327 := position, tokenIndex
			{
				position328 := position
				if !_rules[ruleUninomial]() {
					goto l327
				}
				if !_rules[rule_]() {
					goto l327
				}
				if !_rules[ruleRankUninomial]() {
					goto l327
				}
				if !_rules[rule_]() {
					goto l327
				}
				if !_rules[ruleUninomial]() {
					goto l327
				}
				add(ruleUninomialCombo2, position328)
			}
			return true
		l327:
			position, tokenIndex = position327, tokenIndex327
			return false
		},
		/* 46 RankUninomial <- <(RankUninomialPlain / RankUninomialNotho)> */
		func() bool {
			position329, tokenIndex329 := position, tokenIndex
			{
				position330 := position
				{
					position331, tokenIndex331 := position, tokenIndex
					if !_rules[ruleRankUninomialPlain]() {
						goto l332
					}
					goto l331
				l332:
					position, tokenIndex = position331, tokenIndex331
					if !_rules[ruleRankUninomialNotho]() {
						goto l329
					}
				}
			l331:
				add(ruleRankUninomial, position330)
			}
			return true
		l329:
			position, tokenIndex = position329, tokenIndex329
			return false
		},
		/* 47 RankUninomialPlain <- <((('s' 'e' 'c' 't') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('t' 'r' 'i' 'b') / ('s' 'u' 'b' 't' 'r' 'i' 'b') / ('s' 'u' 'b' 's' 'e' 'r') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('f' 'a' 'm') / ('s' 'u' 'b' 'f' 'a' 'm') / ('d' 'i' 'v') / ('s' 'u' 'p' 'e' 'r' 't' 'r' 'i' 'b')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position333, tokenIndex333 := position, tokenIndex
			{
				position334 := position
				{
					position335, tokenIndex335 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l336
					}
					position++
					if buffer[position] != rune('e') {
						goto l336
					}
					position++
					if buffer[position] != rune('c') {
						goto l336
					}
					position++
					if buffer[position] != rune('t') {
						goto l336
					}
					position++
					goto l335
				l336:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l337
					}
					position++
					if buffer[position] != rune('u') {
						goto l337
					}
					position++
					if buffer[position] != rune('b') {
						goto l337
					}
					position++
					if buffer[position] != rune('s') {
						goto l337
					}
					position++
					if buffer[position] != rune('e') {
						goto l337
					}
					position++
					if buffer[position] != rune('c') {
						goto l337
					}
					position++
					if buffer[position] != rune('t') {
						goto l337
					}
					position++
					goto l335
				l337:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('t') {
						goto l338
					}
					position++
					if buffer[position] != rune('r') {
						goto l338
					}
					position++
					if buffer[position] != rune('i') {
						goto l338
					}
					position++
					if buffer[position] != rune('b') {
						goto l338
					}
					position++
					goto l335
				l338:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l339
					}
					position++
					if buffer[position] != rune('u') {
						goto l339
					}
					position++
					if buffer[position] != rune('b') {
						goto l339
					}
					position++
					if buffer[position] != rune('t') {
						goto l339
					}
					position++
					if buffer[position] != rune('r') {
						goto l339
					}
					position++
					if buffer[position] != rune('i') {
						goto l339
					}
					position++
					if buffer[position] != rune('b') {
						goto l339
					}
					position++
					goto l335
				l339:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l340
					}
					position++
					if buffer[position] != rune('u') {
						goto l340
					}
					position++
					if buffer[position] != rune('b') {
						goto l340
					}
					position++
					if buffer[position] != rune('s') {
						goto l340
					}
					position++
					if buffer[position] != rune('e') {
						goto l340
					}
					position++
					if buffer[position] != rune('r') {
						goto l340
					}
					position++
					goto l335
				l340:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l341
					}
					position++
					if buffer[position] != rune('e') {
						goto l341
					}
					position++
					if buffer[position] != rune('r') {
						goto l341
					}
					position++
					goto l335
				l341:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l342
					}
					position++
					if buffer[position] != rune('u') {
						goto l342
					}
					position++
					if buffer[position] != rune('b') {
						goto l342
					}
					position++
					if buffer[position] != rune('g') {
						goto l342
					}
					position++
					if buffer[position] != rune('e') {
						goto l342
					}
					position++
					if buffer[position] != rune('n') {
						goto l342
					}
					position++
					goto l335
				l342:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l343
					}
					position++
					if buffer[position] != rune('u') {
						goto l343
					}
					position++
					if buffer[position] != rune('b') {
						goto l343
					}
					position++
					if buffer[position] != rune('g') {
						goto l343
					}
					position++
					goto l335
				l343:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('f') {
						goto l344
					}
					position++
					if buffer[position] != rune('a') {
						goto l344
					}
					position++
					if buffer[position] != rune('m') {
						goto l344
					}
					position++
					goto l335
				l344:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l345
					}
					position++
					if buffer[position] != rune('u') {
						goto l345
					}
					position++
					if buffer[position] != rune('b') {
						goto l345
					}
					position++
					if buffer[position] != rune('f') {
						goto l345
					}
					position++
					if buffer[position] != rune('a') {
						goto l345
					}
					position++
					if buffer[position] != rune('m') {
						goto l345
					}
					position++
					goto l335
				l345:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('d') {
						goto l346
					}
					position++
					if buffer[position] != rune('i') {
						goto l346
					}
					position++
					if buffer[position] != rune('v') {
						goto l346
					}
					position++
					goto l335
				l346:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l333
					}
					position++
					if buffer[position] != rune('u') {
						goto l333
					}
					position++
					if buffer[position] != rune('p') {
						goto l333
					}
					position++
					if buffer[position] != rune('e') {
						goto l333
					}
					position++
					if buffer[position] != rune('r') {
						goto l333
					}
					position++
					if buffer[position] != rune('t') {
						goto l333
					}
					position++
					if buffer[position] != rune('r') {
						goto l333
					}
					position++
					if buffer[position] != rune('i') {
						goto l333
					}
					position++
					if buffer[position] != rune('b') {
						goto l333
					}
					position++
				}
			l335:
				{
					position347, tokenIndex347 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l348
					}
					position++
					goto l347
				l348:
					position, tokenIndex = position347, tokenIndex347
					{
						position349, tokenIndex349 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l333
						}
						position, tokenIndex = position349, tokenIndex349
					}
				}
			l347:
				add(ruleRankUninomialPlain, position334)
			}
			return true
		l333:
			position, tokenIndex = position333, tokenIndex333
			return false
		},
		/* 48 RankUninomialNotho <- <('n' 'o' 't' 'h' 'o' _? (('s' 'e' 'c' 't') / ('g' 'e' 'n') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'e' 'n') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('s' 'u' 'b' 't' 'r' 'i' 'b')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position350, tokenIndex350 := position, tokenIndex
			{
				position351 := position
				if buffer[position] != rune('n') {
					goto l350
				}
				position++
				if buffer[position] != rune('o') {
					goto l350
				}
				position++
				if buffer[position] != rune('t') {
					goto l350
				}
				position++
				if buffer[position] != rune('h') {
					goto l350
				}
				position++
				if buffer[position] != rune('o') {
					goto l350
				}
				position++
				{
					position352, tokenIndex352 := position, tokenIndex
					if !_rules[rule_]() {
						goto l352
					}
					goto l353
				l352:
					position, tokenIndex = position352, tokenIndex352
				}
			l353:
				{
					position354, tokenIndex354 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l355
					}
					position++
					if buffer[position] != rune('e') {
						goto l355
					}
					position++
					if buffer[position] != rune('c') {
						goto l355
					}
					position++
					if buffer[position] != rune('t') {
						goto l355
					}
					position++
					goto l354
				l355:
					position, tokenIndex = position354, tokenIndex354
					if buffer[position] != rune('g') {
						goto l356
					}
					position++
					if buffer[position] != rune('e') {
						goto l356
					}
					position++
					if buffer[position] != rune('n') {
						goto l356
					}
					position++
					goto l354
				l356:
					position, tokenIndex = position354, tokenIndex354
					if buffer[position] != rune('s') {
						goto l357
					}
					position++
					if buffer[position] != rune('e') {
						goto l357
					}
					position++
					if buffer[position] != rune('r') {
						goto l357
					}
					position++
					goto l354
				l357:
					position, tokenIndex = position354, tokenIndex354
					if buffer[position] != rune('s') {
						goto l358
					}
					position++
					if buffer[position] != rune('u') {
						goto l358
					}
					position++
					if buffer[position] != rune('b') {
						goto l358
					}
					position++
					if buffer[position] != rune('g') {
						goto l358
					}
					position++
					if buffer[position] != rune('e') {
						goto l358
					}
					position++
					if buffer[position] != rune('e') {
						goto l358
					}
					position++
					if buffer[position] != rune('n') {
						goto l358
					}
					position++
					goto l354
				l358:
					position, tokenIndex = position354, tokenIndex354
					if buffer[position] != rune('s') {
						goto l359
					}
					position++
					if buffer[position] != rune('u') {
						goto l359
					}
					position++
					if buffer[position] != rune('b') {
						goto l359
					}
					position++
					if buffer[position] != rune('g') {
						goto l359
					}
					position++
					if buffer[position] != rune('e') {
						goto l359
					}
					position++
					if buffer[position] != rune('n') {
						goto l359
					}
					position++
					goto l354
				l359:
					position, tokenIndex = position354, tokenIndex354
					if buffer[position] != rune('s') {
						goto l360
					}
					position++
					if buffer[position] != rune('u') {
						goto l360
					}
					position++
					if buffer[position] != rune('b') {
						goto l360
					}
					position++
					if buffer[position] != rune('g') {
						goto l360
					}
					position++
					goto l354
				l360:
					position, tokenIndex = position354, tokenIndex354
					if buffer[position] != rune('s') {
						goto l361
					}
					position++
					if buffer[position] != rune('u') {
						goto l361
					}
					position++
					if buffer[position] != rune('b') {
						goto l361
					}
					position++
					if buffer[position] != rune('s') {
						goto l361
					}
					position++
					if buffer[position] != rune('e') {
						goto l361
					}
					position++
					if buffer[position] != rune('c') {
						goto l361
					}
					position++
					if buffer[position] != rune('t') {
						goto l361
					}
					position++
					goto l354
				l361:
					position, tokenIndex = position354, tokenIndex354
					if buffer[position] != rune('s') {
						goto l350
					}
					position++
					if buffer[position] != rune('u') {
						goto l350
					}
					position++
					if buffer[position] != rune('b') {
						goto l350
					}
					position++
					if buffer[position] != rune('t') {
						goto l350
					}
					position++
					if buffer[position] != rune('r') {
						goto l350
					}
					position++
					if buffer[position] != rune('i') {
						goto l350
					}
					position++
					if buffer[position] != rune('b') {
						goto l350
					}
					position++
				}
			l354:
				{
					position362, tokenIndex362 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l363
					}
					position++
					goto l362
				l363:
					position, tokenIndex = position362, tokenIndex362
					{
						position364, tokenIndex364 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l350
						}
						position, tokenIndex = position364, tokenIndex364
					}
				}
			l362:
				add(ruleRankUninomialNotho, position351)
			}
			return true
		l350:
			position, tokenIndex = position350, tokenIndex350
			return false
		},
		/* 49 Uninomial <- <(UninomialWord (_ Authorship !(_ LowerCharExtended LowerCharExtended LowerCharExtended))?)> */
		func() bool {
			position365, tokenIndex365 := position, tokenIndex
			{
				position366 := position
				if !_rules[ruleUninomialWord]() {
					goto l365
				}
				{
					position367, tokenIndex367 := position, tokenIndex
					if !_rules[rule_]() {
						goto l367
					}
					if !_rules[ruleAuthorship]() {
						goto l367
					}
					{
						position369, tokenIndex369 := position, tokenIndex
						if !_rules[rule_]() {
							goto l369
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l369
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l369
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l369
						}
						goto l367
					l369:
						position, tokenIndex = position369, tokenIndex369
					}
					goto l368
				l367:
					position, tokenIndex = position367, tokenIndex367
				}
			l368:
				add(ruleUninomial, position366)
			}
			return true
		l365:
			position, tokenIndex = position365, tokenIndex365
			return false
		},
		/* 50 UninomialWord <- <(CapWord / TwoLetterGenus)> */
		func() bool {
			position370, tokenIndex370 := position, tokenIndex
			{
				position371 := position
				{
					position372, tokenIndex372 := position, tokenIndex
					if !_rules[ruleCapWord]() {
						goto l373
					}
					goto l372
				l373:
					position, tokenIndex = position372, tokenIndex372
					if !_rules[ruleTwoLetterGenus]() {
						goto l370
					}
				}
			l372:
				add(ruleUninomialWord, position371)
			}
			return true
		l370:
			position, tokenIndex = position370, tokenIndex370
			return false
		},
		/* 51 AbbrSubgenus <- <(UpperChar LowerChar* '.')> */
		func() bool {
			position374, tokenIndex374 := position, tokenIndex
			{
				position375 := position
				if !_rules[ruleUpperChar]() {
					goto l374
				}
			l376:
				{
					position377, tokenIndex377 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l377
					}
					goto l376
				l377:
					position, tokenIndex = position377, tokenIndex377
				}
				if buffer[position] != rune('.') {
					goto l374
				}
				position++
				add(ruleAbbrSubgenus, position375)
			}
			return true
		l374:
			position, tokenIndex = position374, tokenIndex374
			return false
		},
		/* 52 AbbrGenus <- <(UpperChar LowerChar? '.')> */
		func() bool {
			position378, tokenIndex378 := position, tokenIndex
			{
				position379 := position
				if !_rules[ruleUpperChar]() {
					goto l378
				}
				{
					position380, tokenIndex380 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l380
					}
					goto l381
				l380:
					position, tokenIndex = position380, tokenIndex380
				}
			l381:
				if buffer[position] != rune('.') {
					goto l378
				}
				position++
				add(ruleAbbrGenus, position379)
			}
			return true
		l378:
			position, tokenIndex = position378, tokenIndex378
			return false
		},
		/* 53 CapWord <- <(CapWordWithDash / CapWord1)> */
		func() bool {
			position382, tokenIndex382 := position, tokenIndex
			{
				position383 := position
				{
					position384, tokenIndex384 := position, tokenIndex
					if !_rules[ruleCapWordWithDash]() {
						goto l385
					}
					goto l384
				l385:
					position, tokenIndex = position384, tokenIndex384
					if !_rules[ruleCapWord1]() {
						goto l382
					}
				}
			l384:
				add(ruleCapWord, position383)
			}
			return true
		l382:
			position, tokenIndex = position382, tokenIndex382
			return false
		},
		/* 54 CapWord1 <- <(NameUpperChar NameLowerChar NameLowerChar+ '?'?)> */
		func() bool {
			position386, tokenIndex386 := position, tokenIndex
			{
				position387 := position
				if !_rules[ruleNameUpperChar]() {
					goto l386
				}
				if !_rules[ruleNameLowerChar]() {
					goto l386
				}
				if !_rules[ruleNameLowerChar]() {
					goto l386
				}
			l388:
				{
					position389, tokenIndex389 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l389
					}
					goto l388
				l389:
					position, tokenIndex = position389, tokenIndex389
				}
				{
					position390, tokenIndex390 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l390
					}
					position++
					goto l391
				l390:
					position, tokenIndex = position390, tokenIndex390
				}
			l391:
				add(ruleCapWord1, position387)
			}
			return true
		l386:
			position, tokenIndex = position386, tokenIndex386
			return false
		},
		/* 55 CapWordWithDash <- <(CapWord1 Dash WordAfterDash (Dash WordAfterDash)?)> */
		func() bool {
			position392, tokenIndex392 := position, tokenIndex
			{
				position393 := position
				if !_rules[ruleCapWord1]() {
					goto l392
				}
				if !_rules[ruleDash]() {
					goto l392
				}
				if !_rules[ruleWordAfterDash]() {
					goto l392
				}
				{
					position394, tokenIndex394 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l394
					}
					if !_rules[ruleWordAfterDash]() {
						goto l394
					}
					goto l395
				l394:
					position, tokenIndex = position394, tokenIndex394
				}
			l395:
				add(ruleCapWordWithDash, position393)
			}
			return true
		l392:
			position, tokenIndex = position392, tokenIndex392
			return false
		},
		/* 56 WordAfterDash <- <(UpperAfterDash / LowerAfterDash)> */
		func() bool {
			position396, tokenIndex396 := position, tokenIndex
			{
				position397 := position
				{
					position398, tokenIndex398 := position, tokenIndex
					if !_rules[ruleUpperAfterDash]() {
						goto l399
					}
					goto l398
				l399:
					position, tokenIndex = position398, tokenIndex398
					if !_rules[ruleLowerAfterDash]() {
						goto l396
					}
				}
			l398:
				add(ruleWordAfterDash, position397)
			}
			return true
		l396:
			position, tokenIndex = position396, tokenIndex396
			return false
		},
		/* 57 UpperAfterDash <- <CapWord1> */
		func() bool {
			position400, tokenIndex400 := position, tokenIndex
			{
				position401 := position
				if !_rules[ruleCapWord1]() {
					goto l400
				}
				add(ruleUpperAfterDash, position401)
			}
			return true
		l400:
			position, tokenIndex = position400, tokenIndex400
			return false
		},
		/* 58 LowerAfterDash <- <Word1> */
		func() bool {
			position402, tokenIndex402 := position, tokenIndex
			{
				position403 := position
				if !_rules[ruleWord1]() {
					goto l402
				}
				add(ruleLowerAfterDash, position403)
			}
			return true
		l402:
			position, tokenIndex = position402, tokenIndex402
			return false
		},
		/* 59 TwoLetterGenus <- <(('C' 'a') / ('D' 'o') / ('E' 'a') / ('G' 'e') / ('I' 'a') / ('I' 'o') / ('I' 'x') / ('L' 'o') / ('O' 'a') / ('O' 'o') / ('N' 'u') / ('R' 'a') / ('T' 'y') / ('U' 'a') / ('A' 'a') / ('J' 'a') / ('Z' 'u') / ('L' 'a') / ('Q' 'u') / ('A' 's') / ('B' 'a'))> */
		func() bool {
			position404, tokenIndex404 := position, tokenIndex
			{
				position405 := position
				{
					position406, tokenIndex406 := position, tokenIndex
					if buffer[position] != rune('C') {
						goto l407
					}
					position++
					if buffer[position] != rune('a') {
						goto l407
					}
					position++
					goto l406
				l407:
					position, tokenIndex = position406, tokenIndex406
					if buffer[position] != rune('D') {
						goto l408
					}
					position++
					if buffer[position] != rune('o') {
						goto l408
					}
					position++
					goto l406
				l408:
					position, tokenIndex = position406, tokenIndex406
					if buffer[position] != rune('E') {
						goto l409
					}
					position++
					if buffer[position] != rune('a') {
						goto l409
					}
					position++
					goto l406
				l409:
					position, tokenIndex = position406, tokenIndex406
					if buffer[position] != rune('G') {
						goto l410
					}
					position++
					if buffer[position] != rune('e') {
						goto l410
					}
					position++
					goto l406
				l410:
					position, tokenIndex = position406, tokenIndex406
					if buffer[position] != rune('I') {
						goto l411
					}
					position++
					if buffer[position] != rune('a') {
						goto l411
					}
					position++
					goto l406
				l411:
					position, tokenIndex = position406, tokenIndex406
					if buffer[position] != rune('I') {
						goto l412
					}
					position++
					if buffer[position] != rune('o') {
						goto l412
					}
					position++
					goto l406
				l412:
					position, tokenIndex = position406, tokenIndex406
					if buffer[position] != rune('I') {
						goto l413
					}
					position++
					if buffer[position] != rune('x') {
						goto l413
					}
					position++
					goto l406
				l413:
					position, tokenIndex = position406, tokenIndex406
					if buffer[position] != rune('L') {
						goto l414
					}
					position++
					if buffer[position] != rune('o') {
						goto l414
					}
					position++
					goto l406
				l414:
					position, tokenIndex = position406, tokenIndex406
					if buffer[position] != rune('O') {
						goto l415
					}
					position++
					if buffer[position] != rune('a') {
						goto l415
					}
					position++
					goto l406
				l415:
					position, tokenIndex = position406, tokenIndex406
					if buffer[position] != rune('O') {
						goto l416
					}
					position++
					if buffer[position] != rune('o') {
						goto l416
					}
					position++
					goto l406
				l416:
					position, tokenIndex = position406, tokenIndex406
					if buffer[position] != rune('N') {
						goto l417
					}
					position++
					if buffer[position] != rune('u') {
						goto l417
					}
					position++
					goto l406
				l417:
					position, tokenIndex = position406, tokenIndex406
					if buffer[position] != rune('R') {
						goto l418
					}
					position++
					if buffer[position] != rune('a') {
						goto l418
					}
					position++
					goto l406
				l418:
					position, tokenIndex = position406, tokenIndex406
					if buffer[position] != rune('T') {
						goto l419
					}
					position++
					if buffer[position] != rune('y') {
						goto l419
					}
					position++
					goto l406
				l419:
					position, tokenIndex = position406, tokenIndex406
					if buffer[position] != rune('U') {
						goto l420
					}
					position++
					if buffer[position] != rune('a') {
						goto l420
					}
					position++
					goto l406
				l420:
					position, tokenIndex = position406, tokenIndex406
					if buffer[position] != rune('A') {
						goto l421
					}
					position++
					if buffer[position] != rune('a') {
						goto l421
					}
					position++
					goto l406
				l421:
					position, tokenIndex = position406, tokenIndex406
					if buffer[position] != rune('J') {
						goto l422
					}
					position++
					if buffer[position] != rune('a') {
						goto l422
					}
					position++
					goto l406
				l422:
					position, tokenIndex = position406, tokenIndex406
					if buffer[position] != rune('Z') {
						goto l423
					}
					position++
					if buffer[position] != rune('u') {
						goto l423
					}
					position++
					goto l406
				l423:
					position, tokenIndex = position406, tokenIndex406
					if buffer[position] != rune('L') {
						goto l424
					}
					position++
					if buffer[position] != rune('a') {
						goto l424
					}
					position++
					goto l406
				l424:
					position, tokenIndex = position406, tokenIndex406
					if buffer[position] != rune('Q') {
						goto l425
					}
					position++
					if buffer[position] != rune('u') {
						goto l425
					}
					position++
					goto l406
				l425:
					position, tokenIndex = position406, tokenIndex406
					if buffer[position] != rune('A') {
						goto l426
					}
					position++
					if buffer[position] != rune('s') {
						goto l426
					}
					position++
					goto l406
				l426:
					position, tokenIndex = position406, tokenIndex406
					if buffer[position] != rune('B') {
						goto l404
					}
					position++
					if buffer[position] != rune('a') {
						goto l404
					}
					position++
				}
			l406:
				add(ruleTwoLetterGenus, position405)
			}
			return true
		l404:
			position, tokenIndex = position404, tokenIndex404
			return false
		},
		/* 60 Word <- <(!((('e' 'x') / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd') / ('p' 'r' 'o') / ('c' 'v') / ('c' 'u' 'l' 't' 'i' 'v' 'a' 'r') / AuthorPrefix / RankUninomial / Approximation / Word4) SpaceCharEOI) (WordApostr / WordStartsWithDigit / MultiDashedWord / Word2 / Word1) &(SpaceCharEOI / '('))> */
		func() bool {
			position427, tokenIndex427 := position, tokenIndex
			{
				position428 := position
				{
					position429, tokenIndex429 := position, tokenIndex
					{
						position430, tokenIndex430 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l431
						}
						position++
						if buffer[position] != rune('x') {
							goto l431
						}
						position++
						goto l430
					l431:
						position, tokenIndex = position430, tokenIndex430
						if buffer[position] != rune('e') {
							goto l432
						}
						position++
						if buffer[position] != rune('t') {
							goto l432
						}
						position++
						goto l430
					l432:
						position, tokenIndex = position430, tokenIndex430
						if buffer[position] != rune('a') {
							goto l433
						}
						position++
						if buffer[position] != rune('n') {
							goto l433
						}
						position++
						if buffer[position] != rune('d') {
							goto l433
						}
						position++
						goto l430
					l433:
						position, tokenIndex = position430, tokenIndex430
						if buffer[position] != rune('a') {
							goto l434
						}
						position++
						if buffer[position] != rune('p') {
							goto l434
						}
						position++
						if buffer[position] != rune('u') {
							goto l434
						}
						position++
						if buffer[position] != rune('d') {
							goto l434
						}
						position++
						goto l430
					l434:
						position, tokenIndex = position430, tokenIndex430
						if buffer[position] != rune('p') {
							goto l435
						}
						position++
						if buffer[position] != rune('r') {
							goto l435
						}
						position++
						if buffer[position] != rune('o') {
							goto l435
						}
						position++
						goto l430
					l435:
						position, tokenIndex = position430, tokenIndex430
						if buffer[position] != rune('c') {
							goto l436
						}
						position++
						if buffer[position] != rune('v') {
							goto l436
						}
						position++
						goto l430
					l436:
						position, tokenIndex = position430, tokenIndex430
						if buffer[position] != rune('c') {
							goto l437
						}
						position++
						if buffer[position] != rune('u') {
							goto l437
						}
						position++
						if buffer[position] != rune('l') {
							goto l437
						}
						position++
						if buffer[position] != rune('t') {
							goto l437
						}
						position++
						if buffer[position] != rune('i') {
							goto l437
						}
						position++
						if buffer[position] != rune('v') {
							goto l437
						}
						position++
						if buffer[position] != rune('a') {
							goto l437
						}
						position++
						if buffer[position] != rune('r') {
							goto l437
						}
						position++
						goto l430
					l437:
						position, tokenIndex = position430, tokenIndex430
						if !_rules[ruleAuthorPrefix]() {
							goto l438
						}
						goto l430
					l438:
						position, tokenIndex = position430, tokenIndex430
						if !_rules[ruleRankUninomial]() {
							goto l439
						}
						goto l430
					l439:
						position, tokenIndex = position430, tokenIndex430
						if !_rules[ruleApproximation]() {
							goto l440
						}
						goto l430
					l440:
						position, tokenIndex = position430, tokenIndex430
						if !_rules[ruleWord4]() {
							goto l429
						}
					}
				l430:
					if !_rules[ruleSpaceCharEOI]() {
						goto l429
					}
					goto l427
				l429:
					position, tokenIndex = position429, tokenIndex429
				}
				{
					position441, tokenIndex441 := position, tokenIndex
					if !_rules[ruleWordApostr]() {
						goto l442
					}
					goto l441
				l442:
					position, tokenIndex = position441, tokenIndex441
					if !_rules[ruleWordStartsWithDigit]() {
						goto l443
					}
					goto l441
				l443:
					position, tokenIndex = position441, tokenIndex441
					if !_rules[ruleMultiDashedWord]() {
						goto l444
					}
					goto l441
				l444:
					position, tokenIndex = position441, tokenIndex441
					if !_rules[ruleWord2]() {
						goto l445
					}
					goto l441
				l445:
					position, tokenIndex = position441, tokenIndex441
					if !_rules[ruleWord1]() {
						goto l427
					}
				}
			l441:
				{
					position446, tokenIndex446 := position, tokenIndex
					{
						position447, tokenIndex447 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l448
						}
						goto l447
					l448:
						position, tokenIndex = position447, tokenIndex447
						if buffer[position] != rune('(') {
							goto l427
						}
						position++
					}
				l447:
					position, tokenIndex = position446, tokenIndex446
				}
				add(ruleWord, position428)
			}
			return true
		l427:
			position, tokenIndex = position427, tokenIndex427
			return false
		},
		/* 61 Word1 <- <(((DotPrefix / LowerASCII) Dash)? NameLowerChar NameLowerChar+)> */
		func() bool {
			position449, tokenIndex449 := position, tokenIndex
			{
				position450 := position
				{
					position451, tokenIndex451 := position, tokenIndex
					{
						position453, tokenIndex453 := position, tokenIndex
						if !_rules[ruleDotPrefix]() {
							goto l454
						}
						goto l453
					l454:
						position, tokenIndex = position453, tokenIndex453
						if !_rules[ruleLowerASCII]() {
							goto l451
						}
					}
				l453:
					if !_rules[ruleDash]() {
						goto l451
					}
					goto l452
				l451:
					position, tokenIndex = position451, tokenIndex451
				}
			l452:
				if !_rules[ruleNameLowerChar]() {
					goto l449
				}
				if !_rules[ruleNameLowerChar]() {
					goto l449
				}
			l455:
				{
					position456, tokenIndex456 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l456
					}
					goto l455
				l456:
					position, tokenIndex = position456, tokenIndex456
				}
				add(ruleWord1, position450)
			}
			return true
		l449:
			position, tokenIndex = position449, tokenIndex449
			return false
		},
		/* 62 WordStartsWithDigit <- <(('1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9') Nums? ('.' / Dash)? NameLowerChar NameLowerChar NameLowerChar NameLowerChar+)> */
		func() bool {
			position457, tokenIndex457 := position, tokenIndex
			{
				position458 := position
				{
					position459, tokenIndex459 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l460
					}
					position++
					goto l459
				l460:
					position, tokenIndex = position459, tokenIndex459
					if buffer[position] != rune('2') {
						goto l461
					}
					position++
					goto l459
				l461:
					position, tokenIndex = position459, tokenIndex459
					if buffer[position] != rune('3') {
						goto l462
					}
					position++
					goto l459
				l462:
					position, tokenIndex = position459, tokenIndex459
					if buffer[position] != rune('4') {
						goto l463
					}
					position++
					goto l459
				l463:
					position, tokenIndex = position459, tokenIndex459
					if buffer[position] != rune('5') {
						goto l464
					}
					position++
					goto l459
				l464:
					position, tokenIndex = position459, tokenIndex459
					if buffer[position] != rune('6') {
						goto l465
					}
					position++
					goto l459
				l465:
					position, tokenIndex = position459, tokenIndex459
					if buffer[position] != rune('7') {
						goto l466
					}
					position++
					goto l459
				l466:
					position, tokenIndex = position459, tokenIndex459
					if buffer[position] != rune('8') {
						goto l467
					}
					position++
					goto l459
				l467:
					position, tokenIndex = position459, tokenIndex459
					if buffer[position] != rune('9') {
						goto l457
					}
					position++
				}
			l459:
				{
					position468, tokenIndex468 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l468
					}
					goto l469
				l468:
					position, tokenIndex = position468, tokenIndex468
				}
			l469:
				{
					position470, tokenIndex470 := position, tokenIndex
					{
						position472, tokenIndex472 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l473
						}
						position++
						goto l472
					l473:
						position, tokenIndex = position472, tokenIndex472
						if !_rules[ruleDash]() {
							goto l470
						}
					}
				l472:
					goto l471
				l470:
					position, tokenIndex = position470, tokenIndex470
				}
			l471:
				if !_rules[ruleNameLowerChar]() {
					goto l457
				}
				if !_rules[ruleNameLowerChar]() {
					goto l457
				}
				if !_rules[ruleNameLowerChar]() {
					goto l457
				}
				if !_rules[ruleNameLowerChar]() {
					goto l457
				}
			l474:
				{
					position475, tokenIndex475 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l475
					}
					goto l474
				l475:
					position, tokenIndex = position475, tokenIndex475
				}
				add(ruleWordStartsWithDigit, position458)
			}
			return true
		l457:
			position, tokenIndex = position457, tokenIndex457
			return false
		},
		/* 63 Word2 <- <(NameLowerChar+ Dash? (WordApostr / NameLowerChar+))> */
		func() bool {
			position476, tokenIndex476 := position, tokenIndex
			{
				position477 := position
				if !_rules[ruleNameLowerChar]() {
					goto l476
				}
			l478:
				{
					position479, tokenIndex479 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l479
					}
					goto l478
				l479:
					position, tokenIndex = position479, tokenIndex479
				}
				{
					position480, tokenIndex480 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l480
					}
					goto l481
				l480:
					position, tokenIndex = position480, tokenIndex480
				}
			l481:
				{
					position482, tokenIndex482 := position, tokenIndex
					if !_rules[ruleWordApostr]() {
						goto l483
					}
					goto l482
				l483:
					position, tokenIndex = position482, tokenIndex482
					if !_rules[ruleNameLowerChar]() {
						goto l476
					}
				l484:
					{
						position485, tokenIndex485 := position, tokenIndex
						if !_rules[ruleNameLowerChar]() {
							goto l485
						}
						goto l484
					l485:
						position, tokenIndex = position485, tokenIndex485
					}
				}
			l482:
				add(ruleWord2, position477)
			}
			return true
		l476:
			position, tokenIndex = position476, tokenIndex476
			return false
		},
		/* 64 WordApostr <- <(NameLowerChar NameLowerChar* Apostrophe Word1)> */
		func() bool {
			position486, tokenIndex486 := position, tokenIndex
			{
				position487 := position
				if !_rules[ruleNameLowerChar]() {
					goto l486
				}
			l488:
				{
					position489, tokenIndex489 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l489
					}
					goto l488
				l489:
					position, tokenIndex = position489, tokenIndex489
				}
				if !_rules[ruleApostrophe]() {
					goto l486
				}
				if !_rules[ruleWord1]() {
					goto l486
				}
				add(ruleWordApostr, position487)
			}
			return true
		l486:
			position, tokenIndex = position486, tokenIndex486
			return false
		},
		/* 65 Word4 <- <(NameLowerChar+ '.' NameLowerChar)> */
		func() bool {
			position490, tokenIndex490 := position, tokenIndex
			{
				position491 := position
				if !_rules[ruleNameLowerChar]() {
					goto l490
				}
			l492:
				{
					position493, tokenIndex493 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l493
					}
					goto l492
				l493:
					position, tokenIndex = position493, tokenIndex493
				}
				if buffer[position] != rune('.') {
					goto l490
				}
				position++
				if !_rules[ruleNameLowerChar]() {
					goto l490
				}
				add(ruleWord4, position491)
			}
			return true
		l490:
			position, tokenIndex = position490, tokenIndex490
			return false
		},
		/* 66 DotPrefix <- <('s' 't' '.')> */
		func() bool {
			position494, tokenIndex494 := position, tokenIndex
			{
				position495 := position
				if buffer[position] != rune('s') {
					goto l494
				}
				position++
				if buffer[position] != rune('t') {
					goto l494
				}
				position++
				if buffer[position] != rune('.') {
					goto l494
				}
				position++
				add(ruleDotPrefix, position495)
			}
			return true
		l494:
			position, tokenIndex = position494, tokenIndex494
			return false
		},
		/* 67 MultiDashedWord <- <(NameLowerChar+ Dash NameLowerChar+ Dash NameLowerChar+ (Dash NameLowerChar+)?)> */
		func() bool {
			position496, tokenIndex496 := position, tokenIndex
			{
				position497 := position
				if !_rules[ruleNameLowerChar]() {
					goto l496
				}
			l498:
				{
					position499, tokenIndex499 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l499
					}
					goto l498
				l499:
					position, tokenIndex = position499, tokenIndex499
				}
				if !_rules[ruleDash]() {
					goto l496
				}
				if !_rules[ruleNameLowerChar]() {
					goto l496
				}
			l500:
				{
					position501, tokenIndex501 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l501
					}
					goto l500
				l501:
					position, tokenIndex = position501, tokenIndex501
				}
				if !_rules[ruleDash]() {
					goto l496
				}
				if !_rules[ruleNameLowerChar]() {
					goto l496
				}
			l502:
				{
					position503, tokenIndex503 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l503
					}
					goto l502
				l503:
					position, tokenIndex = position503, tokenIndex503
				}
				{
					position504, tokenIndex504 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l504
					}
					if !_rules[ruleNameLowerChar]() {
						goto l504
					}
				l506:
					{
						position507, tokenIndex507 := position, tokenIndex
						if !_rules[ruleNameLowerChar]() {
							goto l507
						}
						goto l506
					l507:
						position, tokenIndex = position507, tokenIndex507
					}
					goto l505
				l504:
					position, tokenIndex = position504, tokenIndex504
				}
			l505:
				add(ruleMultiDashedWord, position497)
			}
			return true
		l496:
			position, tokenIndex = position496, tokenIndex496
			return false
		},
		/* 68 HybridChar <- <('×' / (('x' / 'X') &_) / (('x' / 'X') &UninomialWord) / (('x' / 'X') &END))> */
		func() bool {
			position508, tokenIndex508 := position, tokenIndex
			{
				position509 := position
				{
					position510, tokenIndex510 := position, tokenIndex
					if buffer[position] != rune('×') {
						goto l511
					}
					position++
					goto l510
				l511:
					position, tokenIndex = position510, tokenIndex510
					{
						position513, tokenIndex513 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l514
						}
						position++
						goto l513
					l514:
						position, tokenIndex = position513, tokenIndex513
						if buffer[position] != rune('X') {
							goto l512
						}
						position++
					}
				l513:
					{
						position515, tokenIndex515 := position, tokenIndex
						if !_rules[rule_]() {
							goto l512
						}
						position, tokenIndex = position515, tokenIndex515
					}
					goto l510
				l512:
					position, tokenIndex = position510, tokenIndex510
					{
						position517, tokenIndex517 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l518
						}
						position++
						goto l517
					l518:
						position, tokenIndex = position517, tokenIndex517
						if buffer[position] != rune('X') {
							goto l516
						}
						position++
					}
				l517:
					{
						position519, tokenIndex519 := position, tokenIndex
						if !_rules[ruleUninomialWord]() {
							goto l516
						}
						position, tokenIndex = position519, tokenIndex519
					}
					goto l510
				l516:
					position, tokenIndex = position510, tokenIndex510
					{
						position520, tokenIndex520 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l521
						}
						position++
						goto l520
					l521:
						position, tokenIndex = position520, tokenIndex520
						if buffer[position] != rune('X') {
							goto l508
						}
						position++
					}
				l520:
					{
						position522, tokenIndex522 := position, tokenIndex
						if !_rules[ruleEND]() {
							goto l508
						}
						position, tokenIndex = position522, tokenIndex522
					}
				}
			l510:
				add(ruleHybridChar, position509)
			}
			return true
		l508:
			position, tokenIndex = position508, tokenIndex508
			return false
		},
		/* 69 GraftChimeraChar <- <'+'> */
		func() bool {
			position523, tokenIndex523 := position, tokenIndex
			{
				position524 := position
				if buffer[position] != rune('+') {
					goto l523
				}
				position++
				add(ruleGraftChimeraChar, position524)
			}
			return true
		l523:
			position, tokenIndex = position523, tokenIndex523
			return false
		},
		/* 70 ApproxNameIgnored <- <.*> */
		func() bool {
			{
				position526 := position
			l527:
				{
					position528, tokenIndex528 := position, tokenIndex
					if !matchDot() {
						goto l528
					}
					goto l527
				l528:
					position, tokenIndex = position528, tokenIndex528
				}
				add(ruleApproxNameIgnored, position526)
			}
			return true
		},
		/* 71 Approximation <- <(('s' 'p' '.' _? ('n' 'r' '.')) / ('s' 'p' '.' _? ('a' 'f' 'f' '.')) / ('m' 'o' 'n' 's' 't' '.') / '?' / ((('s' 'p' 'p') / ('n' 'r') / ('s' 'p') / ('a' 'f' 'f') / ('s' 'p' 'e' 'c' 'i' 'e' 's')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position529, tokenIndex529 := position, tokenIndex
			{
				position530 := position
				{
					position531, tokenIndex531 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l532
					}
					position++
					if buffer[position] != rune('p') {
						goto l532
					}
					position++
					if buffer[position] != rune('.') {
						goto l532
					}
					position++
					{
						position533, tokenIndex533 := position, tokenIndex
						if !_rules[rule_]() {
							goto l533
						}
						goto l534
					l533:
						position, tokenIndex = position533, tokenIndex533
					}
				l534:
					if buffer[position] != rune('n') {
						goto l532
					}
					position++
					if buffer[position] != rune('r') {
						goto l532
					}
					position++
					if buffer[position] != rune('.') {
						goto l532
					}
					position++
					goto l531
				l532:
					position, tokenIndex = position531, tokenIndex531
					if buffer[position] != rune('s') {
						goto l535
					}
					position++
					if buffer[position] != rune('p') {
						goto l535
					}
					position++
					if buffer[position] != rune('.') {
						goto l535
					}
					position++
					{
						position536, tokenIndex536 := position, tokenIndex
						if !_rules[rule_]() {
							goto l536
						}
						goto l537
					l536:
						position, tokenIndex = position536, tokenIndex536
					}
				l537:
					if buffer[position] != rune('a') {
						goto l535
					}
					position++
					if buffer[position] != rune('f') {
						goto l535
					}
					position++
					if buffer[position] != rune('f') {
						goto l535
					}
					position++
					if buffer[position] != rune('.') {
						goto l535
					}
					position++
					goto l531
				l535:
					position, tokenIndex = position531, tokenIndex531
					if buffer[position] != rune('m') {
						goto l538
					}
					position++
					if buffer[position] != rune('o') {
						goto l538
					}
					position++
					if buffer[position] != rune('n') {
						goto l538
					}
					position++
					if buffer[position] != rune('s') {
						goto l538
					}
					position++
					if buffer[position] != rune('t') {
						goto l538
					}
					position++
					if buffer[position] != rune('.') {
						goto l538
					}
					position++
					goto l531
				l538:
					position, tokenIndex = position531, tokenIndex531
					if buffer[position] != rune('?') {
						goto l539
					}
					position++
					goto l531
				l539:
					position, tokenIndex = position531, tokenIndex531
					{
						position540, tokenIndex540 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l541
						}
						position++
						if buffer[position] != rune('p') {
							goto l541
						}
						position++
						if buffer[position] != rune('p') {
							goto l541
						}
						position++
						goto l540
					l541:
						position, tokenIndex = position540, tokenIndex540
						if buffer[position] != rune('n') {
							goto l542
						}
						position++
						if buffer[position] != rune('r') {
							goto l542
						}
						position++
						goto l540
					l542:
						position, tokenIndex = position540, tokenIndex540
						if buffer[position] != rune('s') {
							goto l543
						}
						position++
						if buffer[position] != rune('p') {
							goto l543
						}
						position++
						goto l540
					l543:
						position, tokenIndex = position540, tokenIndex540
						if buffer[position] != rune('a') {
							goto l544
						}
						position++
						if buffer[position] != rune('f') {
							goto l544
						}
						position++
						if buffer[position] != rune('f') {
							goto l544
						}
						position++
						goto l540
					l544:
						position, tokenIndex = position540, tokenIndex540
						if buffer[position] != rune('s') {
							goto l529
						}
						position++
						if buffer[position] != rune('p') {
							goto l529
						}
						position++
						if buffer[position] != rune('e') {
							goto l529
						}
						position++
						if buffer[position] != rune('c') {
							goto l529
						}
						position++
						if buffer[position] != rune('i') {
							goto l529
						}
						position++
						if buffer[position] != rune('e') {
							goto l529
						}
						position++
						if buffer[position] != rune('s') {
							goto l529
						}
						position++
					}
				l540:
					{
						position545, tokenIndex545 := position, tokenIndex
						{
							position547, tokenIndex547 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l546
							}
							position, tokenIndex = position547, tokenIndex547
						}
						goto l545
					l546:
						position, tokenIndex = position545, tokenIndex545
						if buffer[position] != rune('.') {
							goto l529
						}
						position++
					}
				l545:
				}
			l531:
				add(ruleApproximation, position530)
			}
			return true
		l529:
			position, tokenIndex = position529, tokenIndex529
			return false
		},
		/* 72 Authorship <- <((AuthorshipCombo / OriginalAuthorship) &(SpaceCharEOI / ';' / ','))> */
		func() bool {
			position548, tokenIndex548 := position, tokenIndex
			{
				position549 := position
				{
					position550, tokenIndex550 := position, tokenIndex
					if !_rules[ruleAuthorshipCombo]() {
						goto l551
					}
					goto l550
				l551:
					position, tokenIndex = position550, tokenIndex550
					if !_rules[ruleOriginalAuthorship]() {
						goto l548
					}
				}
			l550:
				{
					position552, tokenIndex552 := position, tokenIndex
					{
						position553, tokenIndex553 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l554
						}
						goto l553
					l554:
						position, tokenIndex = position553, tokenIndex553
						if buffer[position] != rune(';') {
							goto l555
						}
						position++
						goto l553
					l555:
						position, tokenIndex = position553, tokenIndex553
						if buffer[position] != rune(',') {
							goto l548
						}
						position++
					}
				l553:
					position, tokenIndex = position552, tokenIndex552
				}
				add(ruleAuthorship, position549)
			}
			return true
		l548:
			position, tokenIndex = position548, tokenIndex548
			return false
		},
		/* 73 AuthorshipCombo <- <(OriginalAuthorshipComb (_? CombinationAuthorship)?)> */
		func() bool {
			position556, tokenIndex556 := position, tokenIndex
			{
				position557 := position
				if !_rules[ruleOriginalAuthorshipComb]() {
					goto l556
				}
				{
					position558, tokenIndex558 := position, tokenIndex
					{
						position560, tokenIndex560 := position, tokenIndex
						if !_rules[rule_]() {
							goto l560
						}
						goto l561
					l560:
						position, tokenIndex = position560, tokenIndex560
					}
				l561:
					if !_rules[ruleCombinationAuthorship]() {
						goto l558
					}
					goto l559
				l558:
					position, tokenIndex = position558, tokenIndex558
				}
			l559:
				add(ruleAuthorshipCombo, position557)
			}
			return true
		l556:
			position, tokenIndex = position556, tokenIndex556
			return false
		},
		/* 74 OriginalAuthorship <- <AuthorsGroup> */
		func() bool {
			position562, tokenIndex562 := position, tokenIndex
			{
				position563 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l562
				}
				add(ruleOriginalAuthorship, position563)
			}
			return true
		l562:
			position, tokenIndex = position562, tokenIndex562
			return false
		},
		/* 75 OriginalAuthorshipComb <- <(BasionymAuthorshipYearMisformed / BasionymAuthorship / BasionymAuthorshipMissingParens)> */
		func() bool {
			position564, tokenIndex564 := position, tokenIndex
			{
				position565 := position
				{
					position566, tokenIndex566 := position, tokenIndex
					if !_rules[ruleBasionymAuthorshipYearMisformed]() {
						goto l567
					}
					goto l566
				l567:
					position, tokenIndex = position566, tokenIndex566
					if !_rules[ruleBasionymAuthorship]() {
						goto l568
					}
					goto l566
				l568:
					position, tokenIndex = position566, tokenIndex566
					if !_rules[ruleBasionymAuthorshipMissingParens]() {
						goto l564
					}
				}
			l566:
				add(ruleOriginalAuthorshipComb, position565)
			}
			return true
		l564:
			position, tokenIndex = position564, tokenIndex564
			return false
		},
		/* 76 CombinationAuthorship <- <AuthorsGroup> */
		func() bool {
			position569, tokenIndex569 := position, tokenIndex
			{
				position570 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l569
				}
				add(ruleCombinationAuthorship, position570)
			}
			return true
		l569:
			position, tokenIndex = position569, tokenIndex569
			return false
		},
		/* 77 BasionymAuthorshipMissingParens <- <(MissingParensStart / MissingParensEnd)> */
		func() bool {
			position571, tokenIndex571 := position, tokenIndex
			{
				position572 := position
				{
					position573, tokenIndex573 := position, tokenIndex
					if !_rules[ruleMissingParensStart]() {
						goto l574
					}
					goto l573
				l574:
					position, tokenIndex = position573, tokenIndex573
					if !_rules[ruleMissingParensEnd]() {
						goto l571
					}
				}
			l573:
				add(ruleBasionymAuthorshipMissingParens, position572)
			}
			return true
		l571:
			position, tokenIndex = position571, tokenIndex571
			return false
		},
		/* 78 MissingParensStart <- <('(' _? AuthorsGroup)> */
		func() bool {
			position575, tokenIndex575 := position, tokenIndex
			{
				position576 := position
				if buffer[position] != rune('(') {
					goto l575
				}
				position++
				{
					position577, tokenIndex577 := position, tokenIndex
					if !_rules[rule_]() {
						goto l577
					}
					goto l578
				l577:
					position, tokenIndex = position577, tokenIndex577
				}
			l578:
				if !_rules[ruleAuthorsGroup]() {
					goto l575
				}
				add(ruleMissingParensStart, position576)
			}
			return true
		l575:
			position, tokenIndex = position575, tokenIndex575
			return false
		},
		/* 79 MissingParensEnd <- <(AuthorsGroup _? ')')> */
		func() bool {
			position579, tokenIndex579 := position, tokenIndex
			{
				position580 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l579
				}
				{
					position581, tokenIndex581 := position, tokenIndex
					if !_rules[rule_]() {
						goto l581
					}
					goto l582
				l581:
					position, tokenIndex = position581, tokenIndex581
				}
			l582:
				if buffer[position] != rune(')') {
					goto l579
				}
				position++
				add(ruleMissingParensEnd, position580)
			}
			return true
		l579:
			position, tokenIndex = position579, tokenIndex579
			return false
		},
		/* 80 BasionymAuthorshipYearMisformed <- <('(' _? AuthorsGroup _? ')' (_? ',')? _? Year)> */
		func() bool {
			position583, tokenIndex583 := position, tokenIndex
			{
				position584 := position
				if buffer[position] != rune('(') {
					goto l583
				}
				position++
				{
					position585, tokenIndex585 := position, tokenIndex
					if !_rules[rule_]() {
						goto l585
					}
					goto l586
				l585:
					position, tokenIndex = position585, tokenIndex585
				}
			l586:
				if !_rules[ruleAuthorsGroup]() {
					goto l583
				}
				{
					position587, tokenIndex587 := position, tokenIndex
					if !_rules[rule_]() {
						goto l587
					}
					goto l588
				l587:
					position, tokenIndex = position587, tokenIndex587
				}
			l588:
				if buffer[position] != rune(')') {
					goto l583
				}
				position++
				{
					position589, tokenIndex589 := position, tokenIndex
					{
						position591, tokenIndex591 := position, tokenIndex
						if !_rules[rule_]() {
							goto l591
						}
						goto l592
					l591:
						position, tokenIndex = position591, tokenIndex591
					}
				l592:
					if buffer[position] != rune(',') {
						goto l589
					}
					position++
					goto l590
				l589:
					position, tokenIndex = position589, tokenIndex589
				}
			l590:
				{
					position593, tokenIndex593 := position, tokenIndex
					if !_rules[rule_]() {
						goto l593
					}
					goto l594
				l593:
					position, tokenIndex = position593, tokenIndex593
				}
			l594:
				if !_rules[ruleYear]() {
					goto l583
				}
				add(ruleBasionymAuthorshipYearMisformed, position584)
			}
			return true
		l583:
			position, tokenIndex = position583, tokenIndex583
			return false
		},
		/* 81 BasionymAuthorship <- <(BasionymAuthorship1 / BasionymAuthorship2Parens)> */
		func() bool {
			position595, tokenIndex595 := position, tokenIndex
			{
				position596 := position
				{
					position597, tokenIndex597 := position, tokenIndex
					if !_rules[ruleBasionymAuthorship1]() {
						goto l598
					}
					goto l597
				l598:
					position, tokenIndex = position597, tokenIndex597
					if !_rules[ruleBasionymAuthorship2Parens]() {
						goto l595
					}
				}
			l597:
				add(ruleBasionymAuthorship, position596)
			}
			return true
		l595:
			position, tokenIndex = position595, tokenIndex595
			return false
		},
		/* 82 BasionymAuthorship1 <- <('(' _? AuthorsGroup _? ')')> */
		func() bool {
			position599, tokenIndex599 := position, tokenIndex
			{
				position600 := position
				if buffer[position] != rune('(') {
					goto l599
				}
				position++
				{
					position601, tokenIndex601 := position, tokenIndex
					if !_rules[rule_]() {
						goto l601
					}
					goto l602
				l601:
					position, tokenIndex = position601, tokenIndex601
				}
			l602:
				if !_rules[ruleAuthorsGroup]() {
					goto l599
				}
				{
					position603, tokenIndex603 := position, tokenIndex
					if !_rules[rule_]() {
						goto l603
					}
					goto l604
				l603:
					position, tokenIndex = position603, tokenIndex603
				}
			l604:
				if buffer[position] != rune(')') {
					goto l599
				}
				position++
				add(ruleBasionymAuthorship1, position600)
			}
			return true
		l599:
			position, tokenIndex = position599, tokenIndex599
			return false
		},
		/* 83 BasionymAuthorship2Parens <- <('(' _? '(' _? AuthorsGroup _? ')' _? ')')> */
		func() bool {
			position605, tokenIndex605 := position, tokenIndex
			{
				position606 := position
				if buffer[position] != rune('(') {
					goto l605
				}
				position++
				{
					position607, tokenIndex607 := position, tokenIndex
					if !_rules[rule_]() {
						goto l607
					}
					goto l608
				l607:
					position, tokenIndex = position607, tokenIndex607
				}
			l608:
				if buffer[position] != rune('(') {
					goto l605
				}
				position++
				{
					position609, tokenIndex609 := position, tokenIndex
					if !_rules[rule_]() {
						goto l609
					}
					goto l610
				l609:
					position, tokenIndex = position609, tokenIndex609
				}
			l610:
				if !_rules[ruleAuthorsGroup]() {
					goto l605
				}
				{
					position611, tokenIndex611 := position, tokenIndex
					if !_rules[rule_]() {
						goto l611
					}
					goto l612
				l611:
					position, tokenIndex = position611, tokenIndex611
				}
			l612:
				if buffer[position] != rune(')') {
					goto l605
				}
				position++
				{
					position613, tokenIndex613 := position, tokenIndex
					if !_rules[rule_]() {
						goto l613
					}
					goto l614
				l613:
					position, tokenIndex = position613, tokenIndex613
				}
			l614:
				if buffer[position] != rune(')') {
					goto l605
				}
				position++
				add(ruleBasionymAuthorship2Parens, position606)
			}
			return true
		l605:
			position, tokenIndex = position605, tokenIndex605
			return false
		},
		/* 84 AuthorsGroup <- <(AuthorsTeam (_ (AuthorEmend / AuthorEx) AuthorsTeam)?)> */
		func() bool {
			position615, tokenIndex615 := position, tokenIndex
			{
				position616 := position
				if !_rules[ruleAuthorsTeam]() {
					goto l615
				}
				{
					position617, tokenIndex617 := position, tokenIndex
					if !_rules[rule_]() {
						goto l617
					}
					{
						position619, tokenIndex619 := position, tokenIndex
						if !_rules[ruleAuthorEmend]() {
							goto l620
						}
						goto l619
					l620:
						position, tokenIndex = position619, tokenIndex619
						if !_rules[ruleAuthorEx]() {
							goto l617
						}
					}
				l619:
					if !_rules[ruleAuthorsTeam]() {
						goto l617
					}
					goto l618
				l617:
					position, tokenIndex = position617, tokenIndex617
				}
			l618:
				add(ruleAuthorsGroup, position616)
			}
			return true
		l615:
			position, tokenIndex = position615, tokenIndex615
			return false
		},
		/* 85 AuthorsTeam <- <(Author (AuthorSep Author)* (_? ','? _? Year)?)> */
		func() bool {
			position621, tokenIndex621 := position, tokenIndex
			{
				position622 := position
				if !_rules[ruleAuthor]() {
					goto l621
				}
			l623:
				{
					position624, tokenIndex624 := position, tokenIndex
					if !_rules[ruleAuthorSep]() {
						goto l624
					}
					if !_rules[ruleAuthor]() {
						goto l624
					}
					goto l623
				l624:
					position, tokenIndex = position624, tokenIndex624
				}
				{
					position625, tokenIndex625 := position, tokenIndex
					{
						position627, tokenIndex627 := position, tokenIndex
						if !_rules[rule_]() {
							goto l627
						}
						goto l628
					l627:
						position, tokenIndex = position627, tokenIndex627
					}
				l628:
					{
						position629, tokenIndex629 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l629
						}
						position++
						goto l630
					l629:
						position, tokenIndex = position629, tokenIndex629
					}
				l630:
					{
						position631, tokenIndex631 := position, tokenIndex
						if !_rules[rule_]() {
							goto l631
						}
						goto l632
					l631:
						position, tokenIndex = position631, tokenIndex631
					}
				l632:
					if !_rules[ruleYear]() {
						goto l625
					}
					goto l626
				l625:
					position, tokenIndex = position625, tokenIndex625
				}
			l626:
				add(ruleAuthorsTeam, position622)
			}
			return true
		l621:
			position, tokenIndex = position621, tokenIndex621
			return false
		},
		/* 86 AuthorSep <- <(AuthorSep1 / AuthorSep2)> */
		func() bool {
			position633, tokenIndex633 := position, tokenIndex
			{
				position634 := position
				{
					position635, tokenIndex635 := position, tokenIndex
					if !_rules[ruleAuthorSep1]() {
						goto l636
					}
					goto l635
				l636:
					position, tokenIndex = position635, tokenIndex635
					if !_rules[ruleAuthorSep2]() {
						goto l633
					}
				}
			l635:
				add(ruleAuthorSep, position634)
			}
			return true
		l633:
			position, tokenIndex = position633, tokenIndex633
			return false
		},
		/* 87 AuthorSep1 <- <(_? (',' _)? ('&' / AuthorSepSpanish / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd')) _?)> */
		func() bool {
			position637, tokenIndex637 := position, tokenIndex
			{
				position638 := position
				{
					position639, tokenIndex639 := position, tokenIndex
					if !_rules[rule_]() {
						goto l639
					}
					goto l640
				l639:
					position, tokenIndex = position639, tokenIndex639
				}
			l640:
				{
					position641, tokenIndex641 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l641
					}
					position++
					if !_rules[rule_]() {
						goto l641
					}
					goto l642
				l641:
					position, tokenIndex = position641, tokenIndex641
				}
			l642:
				{
					position643, tokenIndex643 := position, tokenIndex
					if buffer[position] != rune('&') {
						goto l644
					}
					position++
					goto l643
				l644:
					position, tokenIndex = position643, tokenIndex643
					if !_rules[ruleAuthorSepSpanish]() {
						goto l645
					}
					goto l643
				l645:
					position, tokenIndex = position643, tokenIndex643
					if buffer[position] != rune('e') {
						goto l646
					}
					position++
					if buffer[position] != rune('t') {
						goto l646
					}
					position++
					goto l643
				l646:
					position, tokenIndex = position643, tokenIndex643
					if buffer[position] != rune('a') {
						goto l647
					}
					position++
					if buffer[position] != rune('n') {
						goto l647
					}
					position++
					if buffer[position] != rune('d') {
						goto l647
					}
					position++
					goto l643
				l647:
					position, tokenIndex = position643, tokenIndex643
					if buffer[position] != rune('a') {
						goto l637
					}
					position++
					if buffer[position] != rune('p') {
						goto l637
					}
					position++
					if buffer[position] != rune('u') {
						goto l637
					}
					position++
					if buffer[position] != rune('d') {
						goto l637
					}
					position++
				}
			l643:
				{
					position648, tokenIndex648 := position, tokenIndex
					if !_rules[rule_]() {
						goto l648
					}
					goto l649
				l648:
					position, tokenIndex = position648, tokenIndex648
				}
			l649:
				add(ruleAuthorSep1, position638)
			}
			return true
		l637:
			position, tokenIndex = position637, tokenIndex637
			return false
		},
		/* 88 AuthorSep2 <- <(_? ',' _?)> */
		func() bool {
			position650, tokenIndex650 := position, tokenIndex
			{
				position651 := position
				{
					position652, tokenIndex652 := position, tokenIndex
					if !_rules[rule_]() {
						goto l652
					}
					goto l653
				l652:
					position, tokenIndex = position652, tokenIndex652
				}
			l653:
				if buffer[position] != rune(',') {
					goto l650
				}
				position++
				{
					position654, tokenIndex654 := position, tokenIndex
					if !_rules[rule_]() {
						goto l654
					}
					goto l655
				l654:
					position, tokenIndex = position654, tokenIndex654
				}
			l655:
				add(ruleAuthorSep2, position651)
			}
			return true
		l650:
			position, tokenIndex = position650, tokenIndex650
			return false
		},
		/* 89 AuthorSepSpanish <- <(_? 'y' _?)> */
		func() bool {
			position656, tokenIndex656 := position, tokenIndex
			{
				position657 := position
				{
					position658, tokenIndex658 := position, tokenIndex
					if !_rules[rule_]() {
						goto l658
					}
					goto l659
				l658:
					position, tokenIndex = position658, tokenIndex658
				}
			l659:
				if buffer[position] != rune('y') {
					goto l656
				}
				position++
				{
					position660, tokenIndex660 := position, tokenIndex
					if !_rules[rule_]() {
						goto l660
					}
					goto l661
				l660:
					position, tokenIndex = position660, tokenIndex660
				}
			l661:
				add(ruleAuthorSepSpanish, position657)
			}
			return true
		l656:
			position, tokenIndex = position656, tokenIndex656
			return false
		},
		/* 90 AuthorEx <- <((('e' 'x' '.'?) / ('m' 's' _ ('i' 'n')) / ('i' 'n')) _)> */
		func() bool {
			position662, tokenIndex662 := position, tokenIndex
			{
				position663 := position
				{
					position664, tokenIndex664 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l665
					}
					position++
					if buffer[position] != rune('x') {
						goto l665
					}
					position++
					{
						position666, tokenIndex666 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l666
						}
						position++
						goto l667
					l666:
						position, tokenIndex = position666, tokenIndex666
					}
				l667:
					goto l664
				l665:
					position, tokenIndex = position664, tokenIndex664
					if buffer[position] != rune('m') {
						goto l668
					}
					position++
					if buffer[position] != rune('s') {
						goto l668
					}
					position++
					if !_rules[rule_]() {
						goto l668
					}
					if buffer[position] != rune('i') {
						goto l668
					}
					position++
					if buffer[position] != rune('n') {
						goto l668
					}
					position++
					goto l664
				l668:
					position, tokenIndex = position664, tokenIndex664
					if buffer[position] != rune('i') {
						goto l662
					}
					position++
					if buffer[position] != rune('n') {
						goto l662
					}
					position++
				}
			l664:
				if !_rules[rule_]() {
					goto l662
				}
				add(ruleAuthorEx, position663)
			}
			return true
		l662:
			position, tokenIndex = position662, tokenIndex662
			return false
		},
		/* 91 AuthorEmend <- <('e' 'm' 'e' 'n' 'd' '.'? _)> */
		func() bool {
			position669, tokenIndex669 := position, tokenIndex
			{
				position670 := position
				if buffer[position] != rune('e') {
					goto l669
				}
				position++
				if buffer[position] != rune('m') {
					goto l669
				}
				position++
				if buffer[position] != rune('e') {
					goto l669
				}
				position++
				if buffer[position] != rune('n') {
					goto l669
				}
				position++
				if buffer[position] != rune('d') {
					goto l669
				}
				position++
				{
					position671, tokenIndex671 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l671
					}
					position++
					goto l672
				l671:
					position, tokenIndex = position671, tokenIndex671
				}
			l672:
				if !_rules[rule_]() {
					goto l669
				}
				add(ruleAuthorEmend, position670)
			}
			return true
		l669:
			position, tokenIndex = position669, tokenIndex669
			return false
		},
		/* 92 Author <- <((Author0 / Author1 / Author2 / UnknownAuthor) (_ AuthorEtAl)?)> */
		func() bool {
			position673, tokenIndex673 := position, tokenIndex
			{
				position674 := position
				{
					position675, tokenIndex675 := position, tokenIndex
					if !_rules[ruleAuthor0]() {
						goto l676
					}
					goto l675
				l676:
					position, tokenIndex = position675, tokenIndex675
					if !_rules[ruleAuthor1]() {
						goto l677
					}
					goto l675
				l677:
					position, tokenIndex = position675, tokenIndex675
					if !_rules[ruleAuthor2]() {
						goto l678
					}
					goto l675
				l678:
					position, tokenIndex = position675, tokenIndex675
					if !_rules[ruleUnknownAuthor]() {
						goto l673
					}
				}
			l675:
				{
					position679, tokenIndex679 := position, tokenIndex
					if !_rules[rule_]() {
						goto l679
					}
					if !_rules[ruleAuthorEtAl]() {
						goto l679
					}
					goto l680
				l679:
					position, tokenIndex = position679, tokenIndex679
				}
			l680:
				add(ruleAuthor, position674)
			}
			return true
		l673:
			position, tokenIndex = position673, tokenIndex673
			return false
		},
		/* 93 Author0 <- <(Author2 FiliusFNoSpace)> */
		func() bool {
			position681, tokenIndex681 := position, tokenIndex
			{
				position682 := position
				if !_rules[ruleAuthor2]() {
					goto l681
				}
				if !_rules[ruleFiliusFNoSpace]() {
					goto l681
				}
				add(ruleAuthor0, position682)
			}
			return true
		l681:
			position, tokenIndex = position681, tokenIndex681
			return false
		},
		/* 94 Author1 <- <(Author2 _? (Filius / AuthorSuffix))> */
		func() bool {
			position683, tokenIndex683 := position, tokenIndex
			{
				position684 := position
				if !_rules[ruleAuthor2]() {
					goto l683
				}
				{
					position685, tokenIndex685 := position, tokenIndex
					if !_rules[rule_]() {
						goto l685
					}
					goto l686
				l685:
					position, tokenIndex = position685, tokenIndex685
				}
			l686:
				{
					position687, tokenIndex687 := position, tokenIndex
					if !_rules[ruleFilius]() {
						goto l688
					}
					goto l687
				l688:
					position, tokenIndex = position687, tokenIndex687
					if !_rules[ruleAuthorSuffix]() {
						goto l683
					}
				}
			l687:
				add(ruleAuthor1, position684)
			}
			return true
		l683:
			position, tokenIndex = position683, tokenIndex683
			return false
		},
		/* 95 Author2 <- <(AuthorWord (_? AuthorWord)*)> */
		func() bool {
			position689, tokenIndex689 := position, tokenIndex
			{
				position690 := position
				if !_rules[ruleAuthorWord]() {
					goto l689
				}
			l691:
				{
					position692, tokenIndex692 := position, tokenIndex
					{
						position693, tokenIndex693 := position, tokenIndex
						if !_rules[rule_]() {
							goto l693
						}
						goto l694
					l693:
						position, tokenIndex = position693, tokenIndex693
					}
				l694:
					if !_rules[ruleAuthorWord]() {
						goto l692
					}
					goto l691
				l692:
					position, tokenIndex = position692, tokenIndex692
				}
				add(ruleAuthor2, position690)
			}
			return true
		l689:
			position, tokenIndex = position689, tokenIndex689
			return false
		},
		/* 96 UnknownAuthor <- <('?' / ((('a' 'u' 'c' 't') / ('a' 'n' 'o' 'n')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position695, tokenIndex695 := position, tokenIndex
			{
				position696 := position
				{
					position697, tokenIndex697 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l698
					}
					position++
					goto l697
				l698:
					position, tokenIndex = position697, tokenIndex697
					{
						position699, tokenIndex699 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l700
						}
						position++
						if buffer[position] != rune('u') {
							goto l700
						}
						position++
						if buffer[position] != rune('c') {
							goto l700
						}
						position++
						if buffer[position] != rune('t') {
							goto l700
						}
						position++
						goto l699
					l700:
						position, tokenIndex = position699, tokenIndex699
						if buffer[position] != rune('a') {
							goto l695
						}
						position++
						if buffer[position] != rune('n') {
							goto l695
						}
						position++
						if buffer[position] != rune('o') {
							goto l695
						}
						position++
						if buffer[position] != rune('n') {
							goto l695
						}
						position++
					}
				l699:
					{
						position701, tokenIndex701 := position, tokenIndex
						{
							position703, tokenIndex703 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l702
							}
							position, tokenIndex = position703, tokenIndex703
						}
						goto l701
					l702:
						position, tokenIndex = position701, tokenIndex701
						if buffer[position] != rune('.') {
							goto l695
						}
						position++
					}
				l701:
				}
			l697:
				add(ruleUnknownAuthor, position696)
			}
			return true
		l695:
			position, tokenIndex = position695, tokenIndex695
			return false
		},
		/* 97 AuthorWord <- <(!(HybridChar / (('b' / 'B') ('o' / 'O') ('l' / 'L') ('d' / 'D') ':')) (AuthorDashInitials / AuthorWord1 / AuthorWord2 / AuthorWord3 / AuthorPrefix))> */
		func() bool {
			position704, tokenIndex704 := position, tokenIndex
			{
				position705 := position
				{
					position706, tokenIndex706 := position, tokenIndex
					{
						position707, tokenIndex707 := position, tokenIndex
						if !_rules[ruleHybridChar]() {
							goto l708
						}
						goto l707
					l708:
						position, tokenIndex = position707, tokenIndex707
						{
							position709, tokenIndex709 := position, tokenIndex
							if buffer[position] != rune('b') {
								goto l710
							}
							position++
							goto l709
						l710:
							position, tokenIndex = position709, tokenIndex709
							if buffer[position] != rune('B') {
								goto l706
							}
							position++
						}
					l709:
						{
							position711, tokenIndex711 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l712
							}
							position++
							goto l711
						l712:
							position, tokenIndex = position711, tokenIndex711
							if buffer[position] != rune('O') {
								goto l706
							}
							position++
						}
					l711:
						{
							position713, tokenIndex713 := position, tokenIndex
							if buffer[position] != rune('l') {
								goto l714
							}
							position++
							goto l713
						l714:
							position, tokenIndex = position713, tokenIndex713
							if buffer[position] != rune('L') {
								goto l706
							}
							position++
						}
					l713:
						{
							position715, tokenIndex715 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l716
							}
							position++
							goto l715
						l716:
							position, tokenIndex = position715, tokenIndex715
							if buffer[position] != rune('D') {
								goto l706
							}
							position++
						}
					l715:
						if buffer[position] != rune(':') {
							goto l706
						}
						position++
					}
				l707:
					goto l704
				l706:
					position, tokenIndex = position706, tokenIndex706
				}
				{
					position717, tokenIndex717 := position, tokenIndex
					if !_rules[ruleAuthorDashInitials]() {
						goto l718
					}
					goto l717
				l718:
					position, tokenIndex = position717, tokenIndex717
					if !_rules[ruleAuthorWord1]() {
						goto l719
					}
					goto l717
				l719:
					position, tokenIndex = position717, tokenIndex717
					if !_rules[ruleAuthorWord2]() {
						goto l720
					}
					goto l717
				l720:
					position, tokenIndex = position717, tokenIndex717
					if !_rules[ruleAuthorWord3]() {
						goto l721
					}
					goto l717
				l721:
					position, tokenIndex = position717, tokenIndex717
					if !_rules[ruleAuthorPrefix]() {
						goto l704
					}
				}
			l717:
				add(ruleAuthorWord, position705)
			}
			return true
		l704:
			position, tokenIndex = position704, tokenIndex704
			return false
		},
		/* 98 AuthorEtAl <- <(('a' 'r' 'g' '.') / ('e' 't' ' ' 'a' 'l' '.' '{' '?' '}') / ((('e' 't') / '&') (' ' 'a' 'l') '.'?))> */
		func() bool {
			position722, tokenIndex722 := position, tokenIndex
			{
				position723 := position
				{
					position724, tokenIndex724 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l725
					}
					position++
					if buffer[position] != rune('r') {
						goto l725
					}
					position++
					if buffer[position] != rune('g') {
						goto l725
					}
					position++
					if buffer[position] != rune('.') {
						goto l725
					}
					position++
					goto l724
				l725:
					position, tokenIndex = position724, tokenIndex724
					if buffer[position] != rune('e') {
						goto l726
					}
					position++
					if buffer[position] != rune('t') {
						goto l726
					}
					position++
					if buffer[position] != rune(' ') {
						goto l726
					}
					position++
					if buffer[position] != rune('a') {
						goto l726
					}
					position++
					if buffer[position] != rune('l') {
						goto l726
					}
					position++
					if buffer[position] != rune('.') {
						goto l726
					}
					position++
					if buffer[position] != rune('{') {
						goto l726
					}
					position++
					if buffer[position] != rune('?') {
						goto l726
					}
					position++
					if buffer[position] != rune('}') {
						goto l726
					}
					position++
					goto l724
				l726:
					position, tokenIndex = position724, tokenIndex724
					{
						position727, tokenIndex727 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l728
						}
						position++
						if buffer[position] != rune('t') {
							goto l728
						}
						position++
						goto l727
					l728:
						position, tokenIndex = position727, tokenIndex727
						if buffer[position] != rune('&') {
							goto l722
						}
						position++
					}
				l727:
					if buffer[position] != rune(' ') {
						goto l722
					}
					position++
					if buffer[position] != rune('a') {
						goto l722
					}
					position++
					if buffer[position] != rune('l') {
						goto l722
					}
					position++
					{
						position729, tokenIndex729 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l729
						}
						position++
						goto l730
					l729:
						position, tokenIndex = position729, tokenIndex729
					}
				l730:
				}
			l724:
				add(ruleAuthorEtAl, position723)
			}
			return true
		l722:
			position, tokenIndex = position722, tokenIndex722
			return false
		},
		/* 99 AuthorWord1 <- <('d' 'u' 'P' 'o' 'n' 't')> */
		func() bool {
			position731, tokenIndex731 := position, tokenIndex
			{
				position732 := position
				if buffer[position] != rune('d') {
					goto l731
				}
				position++
				if buffer[position] != rune('u') {
					goto l731
				}
				position++
				if buffer[position] != rune('P') {
					goto l731
				}
				position++
				if buffer[position] != rune('o') {
					goto l731
				}
				position++
				if buffer[position] != rune('n') {
					goto l731
				}
				position++
				if buffer[position] != rune('t') {
					goto l731
				}
				position++
				add(ruleAuthorWord1, position732)
			}
			return true
		l731:
			position, tokenIndex = position731, tokenIndex731
			return false
		},
		/* 100 AuthorWord2 <- <(AuthorWord3 Dash (AuthorWordSoft / AuthorInitial))> */
		func() bool {
			position733, tokenIndex733 := position, tokenIndex
			{
				position734 := position
				if !_rules[ruleAuthorWord3]() {
					goto l733
				}
				if !_rules[ruleDash]() {
					goto l733
				}
				{
					position735, tokenIndex735 := position, tokenIndex
					if !_rules[ruleAuthorWordSoft]() {
						goto l736
					}
					goto l735
				l736:
					position, tokenIndex = position735, tokenIndex735
					if !_rules[ruleAuthorInitial]() {
						goto l733
					}
				}
			l735:
				add(ruleAuthorWord2, position734)
			}
			return true
		l733:
			position, tokenIndex = position733, tokenIndex733
			return false
		},
		/* 101 AuthorWord3 <- <(AuthorPrefixGlued? (AllCapsAuthorWord / CapAuthorWord) '.'?)> */
		func() bool {
			position737, tokenIndex737 := position, tokenIndex
			{
				position738 := position
				{
					position739, tokenIndex739 := position, tokenIndex
					if !_rules[ruleAuthorPrefixGlued]() {
						goto l739
					}
					goto l740
				l739:
					position, tokenIndex = position739, tokenIndex739
				}
			l740:
				{
					position741, tokenIndex741 := position, tokenIndex
					if !_rules[ruleAllCapsAuthorWord]() {
						goto l742
					}
					goto l741
				l742:
					position, tokenIndex = position741, tokenIndex741
					if !_rules[ruleCapAuthorWord]() {
						goto l737
					}
				}
			l741:
				{
					position743, tokenIndex743 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l743
					}
					position++
					goto l744
				l743:
					position, tokenIndex = position743, tokenIndex743
				}
			l744:
				add(ruleAuthorWord3, position738)
			}
			return true
		l737:
			position, tokenIndex = position737, tokenIndex737
			return false
		},
		/* 102 AuthorDashInitials <- <(AuthorUpperChar '.'? Dash AuthorUpperChar '.'?)> */
		func() bool {
			position745, tokenIndex745 := position, tokenIndex
			{
				position746 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l745
				}
				{
					position747, tokenIndex747 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l747
					}
					position++
					goto l748
				l747:
					position, tokenIndex = position747, tokenIndex747
				}
			l748:
				if !_rules[ruleDash]() {
					goto l745
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l745
				}
				{
					position749, tokenIndex749 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l749
					}
					position++
					goto l750
				l749:
					position, tokenIndex = position749, tokenIndex749
				}
			l750:
				add(ruleAuthorDashInitials, position746)
			}
			return true
		l745:
			position, tokenIndex = position745, tokenIndex745
			return false
		},
		/* 103 AuthorInitial <- <(AuthorUpperChar '.'?)> */
		func() bool {
			position751, tokenIndex751 := position, tokenIndex
			{
				position752 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l751
				}
				{
					position753, tokenIndex753 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l753
					}
					position++
					goto l754
				l753:
					position, tokenIndex = position753, tokenIndex753
				}
			l754:
				add(ruleAuthorInitial, position752)
			}
			return true
		l751:
			position, tokenIndex = position751, tokenIndex751
			return false
		},
		/* 104 AuthorWordSoft <- <(((AuthorUpperChar (AuthorUpperChar+ / AuthorLowerChar+)) / AuthorLowerChar+) '.'?)> */
		func() bool {
			position755, tokenIndex755 := position, tokenIndex
			{
				position756 := position
				{
					position757, tokenIndex757 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l758
					}
					{
						position759, tokenIndex759 := position, tokenIndex
						if !_rules[ruleAuthorUpperChar]() {
							goto l760
						}
					l761:
						{
							position762, tokenIndex762 := position, tokenIndex
							if !_rules[ruleAuthorUpperChar]() {
								goto l762
							}
							goto l761
						l762:
							position, tokenIndex = position762, tokenIndex762
						}
						goto l759
					l760:
						position, tokenIndex = position759, tokenIndex759
						if !_rules[ruleAuthorLowerChar]() {
							goto l758
						}
					l763:
						{
							position764, tokenIndex764 := position, tokenIndex
							if !_rules[ruleAuthorLowerChar]() {
								goto l764
							}
							goto l763
						l764:
							position, tokenIndex = position764, tokenIndex764
						}
					}
				l759:
					goto l757
				l758:
					position, tokenIndex = position757, tokenIndex757
					if !_rules[ruleAuthorLowerChar]() {
						goto l755
					}
				l765:
					{
						position766, tokenIndex766 := position, tokenIndex
						if !_rules[ruleAuthorLowerChar]() {
							goto l766
						}
						goto l765
					l766:
						position, tokenIndex = position766, tokenIndex766
					}
				}
			l757:
				{
					position767, tokenIndex767 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l767
					}
					position++
					goto l768
				l767:
					position, tokenIndex = position767, tokenIndex767
				}
			l768:
				add(ruleAuthorWordSoft, position756)
			}
			return true
		l755:
			position, tokenIndex = position755, tokenIndex755
			return false
		},
		/* 105 CapAuthorWord <- <(AuthorUpperChar AuthorLowerChar*)> */
		func() bool {
			position769, tokenIndex769 := position, tokenIndex
			{
				position770 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l769
				}
			l771:
				{
					position772, tokenIndex772 := position, tokenIndex
					if !_rules[ruleAuthorLowerChar]() {
						goto l772
					}
					goto l771
				l772:
					position, tokenIndex = position772, tokenIndex772
				}
				add(ruleCapAuthorWord, position770)
			}
			return true
		l769:
			position, tokenIndex = position769, tokenIndex769
			return false
		},
		/* 106 AllCapsAuthorWord <- <(AuthorUpperChar AuthorUpperChar+)> */
		func() bool {
			position773, tokenIndex773 := position, tokenIndex
			{
				position774 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l773
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l773
				}
			l775:
				{
					position776, tokenIndex776 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l776
					}
					goto l775
				l776:
					position, tokenIndex = position776, tokenIndex776
				}
				add(ruleAllCapsAuthorWord, position774)
			}
			return true
		l773:
			position, tokenIndex = position773, tokenIndex773
			return false
		},
		/* 107 Filius <- <(FiliusF / ('f' 'i' 'l' '.') / ('f' 'i' 'l' 'i' 'u' 's'))> */
		func() bool {
			position777, tokenIndex777 := position, tokenIndex
			{
				position778 := position
				{
					position779, tokenIndex779 := position, tokenIndex
					if !_rules[ruleFiliusF]() {
						goto l780
					}
					goto l779
				l780:
					position, tokenIndex = position779, tokenIndex779
					if buffer[position] != rune('f') {
						goto l781
					}
					position++
					if buffer[position] != rune('i') {
						goto l781
					}
					position++
					if buffer[position] != rune('l') {
						goto l781
					}
					position++
					if buffer[position] != rune('.') {
						goto l781
					}
					position++
					goto l779
				l781:
					position, tokenIndex = position779, tokenIndex779
					if buffer[position] != rune('f') {
						goto l777
					}
					position++
					if buffer[position] != rune('i') {
						goto l777
					}
					position++
					if buffer[position] != rune('l') {
						goto l777
					}
					position++
					if buffer[position] != rune('i') {
						goto l777
					}
					position++
					if buffer[position] != rune('u') {
						goto l777
					}
					position++
					if buffer[position] != rune('s') {
						goto l777
					}
					position++
				}
			l779:
				add(ruleFilius, position778)
			}
			return true
		l777:
			position, tokenIndex = position777, tokenIndex777
			return false
		},
		/* 108 FiliusF <- <('f' '.' !(_ Word))> */
		func() bool {
			position782, tokenIndex782 := position, tokenIndex
			{
				position783 := position
				if buffer[position] != rune('f') {
					goto l782
				}
				position++
				if buffer[position] != rune('.') {
					goto l782
				}
				position++
				{
					position784, tokenIndex784 := position, tokenIndex
					if !_rules[rule_]() {
						goto l784
					}
					if !_rules[ruleWord]() {
						goto l784
					}
					goto l782
				l784:
					position, tokenIndex = position784, tokenIndex784
				}
				add(ruleFiliusF, position783)
			}
			return true
		l782:
			position, tokenIndex = position782, tokenIndex782
			return false
		},
		/* 109 FiliusFNoSpace <- <('f' '.')> */
		func() bool {
			position785, tokenIndex785 := position, tokenIndex
			{
				position786 := position
				if buffer[position] != rune('f') {
					goto l785
				}
				position++
				if buffer[position] != rune('.') {
					goto l785
				}
				position++
				add(ruleFiliusFNoSpace, position786)
			}
			return true
		l785:
			position, tokenIndex = position785, tokenIndex785
			return false
		},
		/* 110 AuthorSuffix <- <(('b' 'i' 's') / ('t' 'e' 'r'))> */
		func() bool {
			position787, tokenIndex787 := position, tokenIndex
			{
				position788 := position
				{
					position789, tokenIndex789 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l790
					}
					position++
					if buffer[position] != rune('i') {
						goto l790
					}
					position++
					if buffer[position] != rune('s') {
						goto l790
					}
					position++
					goto l789
				l790:
					position, tokenIndex = position789, tokenIndex789
					if buffer[position] != rune('t') {
						goto l787
					}
					position++
					if buffer[position] != rune('e') {
						goto l787
					}
					position++
					if buffer[position] != rune('r') {
						goto l787
					}
					position++
				}
			l789:
				add(ruleAuthorSuffix, position788)
			}
			return true
		l787:
			position, tokenIndex = position787, tokenIndex787
			return false
		},
		/* 111 AuthorPrefixGlued <- <(('d' / 'O' / 'L' / ('M' 'c') / 'M') Apostrophe)> */
		func() bool {
			position791, tokenIndex791 := position, tokenIndex
			{
				position792 := position
				{
					position793, tokenIndex793 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l794
					}
					position++
					goto l793
				l794:
					position, tokenIndex = position793, tokenIndex793
					if buffer[position] != rune('O') {
						goto l795
					}
					position++
					goto l793
				l795:
					position, tokenIndex = position793, tokenIndex793
					if buffer[position] != rune('L') {
						goto l796
					}
					position++
					goto l793
				l796:
					position, tokenIndex = position793, tokenIndex793
					if buffer[position] != rune('M') {
						goto l797
					}
					position++
					if buffer[position] != rune('c') {
						goto l797
					}
					position++
					goto l793
				l797:
					position, tokenIndex = position793, tokenIndex793
					if buffer[position] != rune('M') {
						goto l791
					}
					position++
				}
			l793:
				if !_rules[ruleApostrophe]() {
					goto l791
				}
				add(ruleAuthorPrefixGlued, position792)
			}
			return true
		l791:
			position, tokenIndex = position791, tokenIndex791
			return false
		},
		/* 112 AuthorPrefix <- <(AuthorPrefix1 / AuthorPrefix2)> */
		func() bool {
			position798, tokenIndex798 := position, tokenIndex
			{
				position799 := position
				{
					position800, tokenIndex800 := position, tokenIndex
					if !_rules[ruleAuthorPrefix1]() {
						goto l801
					}
					goto l800
				l801:
					position, tokenIndex = position800, tokenIndex800
					if !_rules[ruleAuthorPrefix2]() {
						goto l798
					}
				}
			l800:
				add(ruleAuthorPrefix, position799)
			}
			return true
		l798:
			position, tokenIndex = position798, tokenIndex798
			return false
		},
		/* 113 AuthorPrefix2 <- <(('v' '.' (_? ('d' '.'))?) / (Apostrophe 't'))> */
		func() bool {
			position802, tokenIndex802 := position, tokenIndex
			{
				position803 := position
				{
					position804, tokenIndex804 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l805
					}
					position++
					if buffer[position] != rune('.') {
						goto l805
					}
					position++
					{
						position806, tokenIndex806 := position, tokenIndex
						{
							position808, tokenIndex808 := position, tokenIndex
							if !_rules[rule_]() {
								goto l808
							}
							goto l809
						l808:
							position, tokenIndex = position808, tokenIndex808
						}
					l809:
						if buffer[position] != rune('d') {
							goto l806
						}
						position++
						if buffer[position] != rune('.') {
							goto l806
						}
						position++
						goto l807
					l806:
						position, tokenIndex = position806, tokenIndex806
					}
				l807:
					goto l804
				l805:
					position, tokenIndex = position804, tokenIndex804
					if !_rules[ruleApostrophe]() {
						goto l802
					}
					if buffer[position] != rune('t') {
						goto l802
					}
					position++
				}
			l804:
				add(ruleAuthorPrefix2, position803)
			}
			return true
		l802:
			position, tokenIndex = position802, tokenIndex802
			return false
		},
		/* 114 AuthorPrefix1 <- <((('a' 'b') / ('a' 'f') / ('b' 'i' 's') / ('d' 'a') / ('d' 'e' 'r') / ('d' 'e' 's') / ('d' 'e' 'n') / ('d' 'e' 'l' 'l' 'a') / ('d' 'e' 'l' 'a') / ('d' 'e' 'l' 'l' 'e') / ('d' 'e' 'l') / ('d' 'e' ' ' 'l' 'o' 's') / ('d' 'e') / ('d' 'i') / ('d' 'o' 's') / ('d' 'u') / ('d' 'o') / ('e' 'l') / ('l' 'a') / ('l' 'e') / ('t' 'e' 'n') / ('t' 'e' 'r') / ('v' 'a' 'n') / ('v' 'e' 'r') / ('d' Apostrophe) / ('i' 'n' Apostrophe 't') / ('z' 'u' 'r') / ('z' 'u') / ('v' 'o' 'n' (_ (('d' '.') / ('d' 'e' 'm')))?) / ('v' (_ 'd')?)) &_)> */
		func() bool {
			position810, tokenIndex810 := position, tokenIndex
			{
				position811 := position
				{
					position812, tokenIndex812 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l813
					}
					position++
					if buffer[position] != rune('b') {
						goto l813
					}
					position++
					goto l812
				l813:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('a') {
						goto l814
					}
					position++
					if buffer[position] != rune('f') {
						goto l814
					}
					position++
					goto l812
				l814:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('b') {
						goto l815
					}
					position++
					if buffer[position] != rune('i') {
						goto l815
					}
					position++
					if buffer[position] != rune('s') {
						goto l815
					}
					position++
					goto l812
				l815:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('d') {
						goto l816
					}
					position++
					if buffer[position] != rune('a') {
						goto l816
					}
					position++
					goto l812
				l816:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('d') {
						goto l817
					}
					position++
					if buffer[position] != rune('e') {
						goto l817
					}
					position++
					if buffer[position] != rune('r') {
						goto l817
					}
					position++
					goto l812
				l817:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('d') {
						goto l818
					}
					position++
					if buffer[position] != rune('e') {
						goto l818
					}
					position++
					if buffer[position] != rune('s') {
						goto l818
					}
					position++
					goto l812
				l818:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('d') {
						goto l819
					}
					position++
					if buffer[position] != rune('e') {
						goto l819
					}
					position++
					if buffer[position] != rune('n') {
						goto l819
					}
					position++
					goto l812
				l819:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('d') {
						goto l820
					}
					position++
					if buffer[position] != rune('e') {
						goto l820
					}
					position++
					if buffer[position] != rune('l') {
						goto l820
					}
					position++
					if buffer[position] != rune('l') {
						goto l820
					}
					position++
					if buffer[position] != rune('a') {
						goto l820
					}
					position++
					goto l812
				l820:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('d') {
						goto l821
					}
					position++
					if buffer[position] != rune('e') {
						goto l821
					}
					position++
					if buffer[position] != rune('l') {
						goto l821
					}
					position++
					if buffer[position] != rune('a') {
						goto l821
					}
					position++
					goto l812
				l821:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('d') {
						goto l822
					}
					position++
					if buffer[position] != rune('e') {
						goto l822
					}
					position++
					if buffer[position] != rune('l') {
						goto l822
					}
					position++
					if buffer[position] != rune('l') {
						goto l822
					}
					position++
					if buffer[position] != rune('e') {
						goto l822
					}
					position++
					goto l812
				l822:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('d') {
						goto l823
					}
					position++
					if buffer[position] != rune('e') {
						goto l823
					}
					position++
					if buffer[position] != rune('l') {
						goto l823
					}
					position++
					goto l812
				l823:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('d') {
						goto l824
					}
					position++
					if buffer[position] != rune('e') {
						goto l824
					}
					position++
					if buffer[position] != rune(' ') {
						goto l824
					}
					position++
					if buffer[position] != rune('l') {
						goto l824
					}
					position++
					if buffer[position] != rune('o') {
						goto l824
					}
					position++
					if buffer[position] != rune('s') {
						goto l824
					}
					position++
					goto l812
				l824:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('d') {
						goto l825
					}
					position++
					if buffer[position] != rune('e') {
						goto l825
					}
					position++
					goto l812
				l825:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('d') {
						goto l826
					}
					position++
					if buffer[position] != rune('i') {
						goto l826
					}
					position++
					goto l812
				l826:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('d') {
						goto l827
					}
					position++
					if buffer[position] != rune('o') {
						goto l827
					}
					position++
					if buffer[position] != rune('s') {
						goto l827
					}
					position++
					goto l812
				l827:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('d') {
						goto l828
					}
					position++
					if buffer[position] != rune('u') {
						goto l828
					}
					position++
					goto l812
				l828:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('d') {
						goto l829
					}
					position++
					if buffer[position] != rune('o') {
						goto l829
					}
					position++
					goto l812
				l829:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('e') {
						goto l830
					}
					position++
					if buffer[position] != rune('l') {
						goto l830
					}
					position++
					goto l812
				l830:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('l') {
						goto l831
					}
					position++
					if buffer[position] != rune('a') {
						goto l831
					}
					position++
					goto l812
				l831:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('l') {
						goto l832
					}
					position++
					if buffer[position] != rune('e') {
						goto l832
					}
					position++
					goto l812
				l832:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('t') {
						goto l833
					}
					position++
					if buffer[position] != rune('e') {
						goto l833
					}
					position++
					if buffer[position] != rune('n') {
						goto l833
					}
					position++
					goto l812
				l833:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('t') {
						goto l834
					}
					position++
					if buffer[position] != rune('e') {
						goto l834
					}
					position++
					if buffer[position] != rune('r') {
						goto l834
					}
					position++
					goto l812
				l834:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('v') {
						goto l835
					}
					position++
					if buffer[position] != rune('a') {
						goto l835
					}
					position++
					if buffer[position] != rune('n') {
						goto l835
					}
					position++
					goto l812
				l835:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('v') {
						goto l836
					}
					position++
					if buffer[position] != rune('e') {
						goto l836
					}
					position++
					if buffer[position] != rune('r') {
						goto l836
					}
					position++
					goto l812
				l836:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('d') {
						goto l837
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l837
					}
					goto l812
				l837:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('i') {
						goto l838
					}
					position++
					if buffer[position] != rune('n') {
						goto l838
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l838
					}
					if buffer[position] != rune('t') {
						goto l838
					}
					position++
					goto l812
				l838:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('z') {
						goto l839
					}
					position++
					if buffer[position] != rune('u') {
						goto l839
					}
					position++
					if buffer[position] != rune('r') {
						goto l839
					}
					position++
					goto l812
				l839:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('z') {
						goto l840
					}
					position++
					if buffer[position] != rune('u') {
						goto l840
					}
					position++
					goto l812
				l840:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('v') {
						goto l841
					}
					position++
					if buffer[position] != rune('o') {
						goto l841
					}
					position++
					if buffer[position] != rune('n') {
						goto l841
					}
					position++
					{
						position842, tokenIndex842 := position, tokenIndex
						if !_rules[rule_]() {
							goto l842
						}
						{
							position844, tokenIndex844 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l845
							}
							position++
							if buffer[position] != rune('.') {
								goto l845
							}
							position++
							goto l844
						l845:
							position, tokenIndex = position844, tokenIndex844
							if buffer[position] != rune('d') {
								goto l842
							}
							position++
							if buffer[position] != rune('e') {
								goto l842
							}
							position++
							if buffer[position] != rune('m') {
								goto l842
							}
							position++
						}
					l844:
						goto l843
					l842:
						position, tokenIndex = position842, tokenIndex842
					}
				l843:
					goto l812
				l841:
					position, tokenIndex = position812, tokenIndex812
					if buffer[position] != rune('v') {
						goto l810
					}
					position++
					{
						position846, tokenIndex846 := position, tokenIndex
						if !_rules[rule_]() {
							goto l846
						}
						if buffer[position] != rune('d') {
							goto l846
						}
						position++
						goto l847
					l846:
						position, tokenIndex = position846, tokenIndex846
					}
				l847:
				}
			l812:
				{
					position848, tokenIndex848 := position, tokenIndex
					if !_rules[rule_]() {
						goto l810
					}
					position, tokenIndex = position848, tokenIndex848
				}
				add(ruleAuthorPrefix1, position811)
			}
			return true
		l810:
			position, tokenIndex = position810, tokenIndex810
			return false
		},
		/* 115 AuthorUpperChar <- <(UpperASCII / MiscodedChar / ('À' / 'Á' / 'Â' / 'Ã' / 'Ä' / 'Å' / 'Æ' / 'Ç' / 'È' / 'É' / 'Ê' / 'Ë' / 'Ì' / 'Í' / 'Î' / 'Ï' / 'Ð' / 'Ñ' / 'Ò' / 'Ó' / 'Ô' / 'Õ' / 'Ö' / 'Ø' / 'Ù' / 'Ú' / 'Û' / 'Ü' / 'Ý' / 'Ć' / 'Č' / 'Ď' / 'İ' / 'Ķ' / 'Ĺ' / 'ĺ' / 'Ľ' / 'ľ' / 'Ł' / 'ł' / 'Ņ' / 'Ō' / 'Ő' / 'Œ' / 'Ř' / 'Ś' / 'Ŝ' / 'Ş' / 'Š' / 'Ÿ' / 'Ź' / 'Ż' / 'Ž' / 'ƒ' / 'Ǿ' / 'Ș' / 'Ț'))> */
		func() bool {
			position849, tokenIndex849 := position, tokenIndex
			{
				position850 := position
				{
					position851, tokenIndex851 := position, tokenIndex
					if !_rules[ruleUpperASCII]() {
						goto l852
					}
					goto l851
				l852:
					position, tokenIndex = position851, tokenIndex851
					if !_rules[ruleMiscodedChar]() {
						goto l853
					}
					goto l851
				l853:
					position, tokenIndex = position851, tokenIndex851
					{
						position854, tokenIndex854 := position, tokenIndex
						if buffer[position] != rune('À') {
							goto l855
						}
						position++
						goto l854
					l855:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Á') {
							goto l856
						}
						position++
						goto l854
					l856:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Â') {
							goto l857
						}
						position++
						goto l854
					l857:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ã') {
							goto l858
						}
						position++
						goto l854
					l858:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ä') {
							goto l859
						}
						position++
						goto l854
					l859:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Å') {
							goto l860
						}
						position++
						goto l854
					l860:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Æ') {
							goto l861
						}
						position++
						goto l854
					l861:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ç') {
							goto l862
						}
						position++
						goto l854
					l862:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('È') {
							goto l863
						}
						position++
						goto l854
					l863:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('É') {
							goto l864
						}
						position++
						goto l854
					l864:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ê') {
							goto l865
						}
						position++
						goto l854
					l865:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ë') {
							goto l866
						}
						position++
						goto l854
					l866:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ì') {
							goto l867
						}
						position++
						goto l854
					l867:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Í') {
							goto l868
						}
						position++
						goto l854
					l868:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Î') {
							goto l869
						}
						position++
						goto l854
					l869:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ï') {
							goto l870
						}
						position++
						goto l854
					l870:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ð') {
							goto l871
						}
						position++
						goto l854
					l871:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ñ') {
							goto l872
						}
						position++
						goto l854
					l872:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ò') {
							goto l873
						}
						position++
						goto l854
					l873:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ó') {
							goto l874
						}
						position++
						goto l854
					l874:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ô') {
							goto l875
						}
						position++
						goto l854
					l875:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Õ') {
							goto l876
						}
						position++
						goto l854
					l876:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ö') {
							goto l877
						}
						position++
						goto l854
					l877:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ø') {
							goto l878
						}
						position++
						goto l854
					l878:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ù') {
							goto l879
						}
						position++
						goto l854
					l879:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ú') {
							goto l880
						}
						position++
						goto l854
					l880:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Û') {
							goto l881
						}
						position++
						goto l854
					l881:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ü') {
							goto l882
						}
						position++
						goto l854
					l882:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ý') {
							goto l883
						}
						position++
						goto l854
					l883:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ć') {
							goto l884
						}
						position++
						goto l854
					l884:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Č') {
							goto l885
						}
						position++
						goto l854
					l885:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ď') {
							goto l886
						}
						position++
						goto l854
					l886:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('İ') {
							goto l887
						}
						position++
						goto l854
					l887:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ķ') {
							goto l888
						}
						position++
						goto l854
					l888:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ĺ') {
							goto l889
						}
						position++
						goto l854
					l889:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('ĺ') {
							goto l890
						}
						position++
						goto l854
					l890:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ľ') {
							goto l891
						}
						position++
						goto l854
					l891:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('ľ') {
							goto l892
						}
						position++
						goto l854
					l892:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ł') {
							goto l893
						}
						position++
						goto l854
					l893:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('ł') {
							goto l894
						}
						position++
						goto l854
					l894:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ņ') {
							goto l895
						}
						position++
						goto l854
					l895:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ō') {
							goto l896
						}
						position++
						goto l854
					l896:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ő') {
							goto l897
						}
						position++
						goto l854
					l897:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Œ') {
							goto l898
						}
						position++
						goto l854
					l898:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ř') {
							goto l899
						}
						position++
						goto l854
					l899:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ś') {
							goto l900
						}
						position++
						goto l854
					l900:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ŝ') {
							goto l901
						}
						position++
						goto l854
					l901:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ş') {
							goto l902
						}
						position++
						goto l854
					l902:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Š') {
							goto l903
						}
						position++
						goto l854
					l903:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ÿ') {
							goto l904
						}
						position++
						goto l854
					l904:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ź') {
							goto l905
						}
						position++
						goto l854
					l905:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ż') {
							goto l906
						}
						position++
						goto l854
					l906:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ž') {
							goto l907
						}
						position++
						goto l854
					l907:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('ƒ') {
							goto l908
						}
						position++
						goto l854
					l908:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ǿ') {
							goto l909
						}
						position++
						goto l854
					l909:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ș') {
							goto l910
						}
						position++
						goto l854
					l910:
						position, tokenIndex = position854, tokenIndex854
						if buffer[position] != rune('Ț') {
							goto l849
						}
						position++
					}
				l854:
				}
			l851:
				add(ruleAuthorUpperChar, position850)
			}
			return true
		l849:
			position, tokenIndex = position849, tokenIndex849
			return false
		},
		/* 116 AuthorLowerChar <- <(LowerASCII / MiscodedChar / Apostrophe / ('à' / 'á' / 'â' / 'ã' / 'ä' / 'å' / 'æ' / 'ç' / 'è' / 'é' / 'ê' / 'ë' / 'ì' / 'í' / 'î' / 'ï' / 'ð' / 'ñ' / 'ò' / 'ó' / 'ó' / 'ô' / 'õ' / 'ö' / 'ø' / 'ù' / 'ú' / 'û' / 'ü' / 'ý' / 'ÿ' / 'ā' / 'ă' / 'ą' / 'ć' / 'ĉ' / 'č' / 'ď' / 'đ' / 'ē' / 'ĕ' / 'ė' / 'ę' / 'ě' / 'ğ' / 'ī' / 'ĭ' / 'İ' / 'ı' / 'ĺ' / 'ľ' / 'ł' / 'ń' / 'ņ' / 'ň' / 'ŏ' / 'ő' / 'œ' / 'ŕ' / 'ř' / 'ś' / 'ş' / 'š' / 'ţ' / 'ť' / 'ũ' / 'ū' / 'ŭ' / 'ů' / 'ű' / 'ź' / 'ż' / 'ž' / 'ſ' / 'ǎ' / 'ǔ' / 'ǧ' / 'ș' / 'ț' / 'ȳ' / 'ß'))> */
		func() bool {
			position911, tokenIndex911 := position, tokenIndex
			{
				position912 := position
				{
					position913, tokenIndex913 := position, tokenIndex
					if !_rules[ruleLowerASCII]() {
						goto l914
					}
					goto l913
				l914:
					position, tokenIndex = position913, tokenIndex913
					if !_rules[ruleMiscodedChar]() {
						goto l915
					}
					goto l913
				l915:
					position, tokenIndex = position913, tokenIndex913
					if !_rules[ruleApostrophe]() {
						goto l916
					}
					goto l913
				l916:
					position, tokenIndex = position913, tokenIndex913
					{
						position917, tokenIndex917 := position, tokenIndex
						if buffer[position] != rune('à') {
							goto l918
						}
						position++
						goto l917
					l918:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('á') {
							goto l919
						}
						position++
						goto l917
					l919:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('â') {
							goto l920
						}
						position++
						goto l917
					l920:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ã') {
							goto l921
						}
						position++
						goto l917
					l921:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ä') {
							goto l922
						}
						position++
						goto l917
					l922:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('å') {
							goto l923
						}
						position++
						goto l917
					l923:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('æ') {
							goto l924
						}
						position++
						goto l917
					l924:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ç') {
							goto l925
						}
						position++
						goto l917
					l925:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('è') {
							goto l926
						}
						position++
						goto l917
					l926:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('é') {
							goto l927
						}
						position++
						goto l917
					l927:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ê') {
							goto l928
						}
						position++
						goto l917
					l928:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ë') {
							goto l929
						}
						position++
						goto l917
					l929:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ì') {
							goto l930
						}
						position++
						goto l917
					l930:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('í') {
							goto l931
						}
						position++
						goto l917
					l931:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('î') {
							goto l932
						}
						position++
						goto l917
					l932:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ï') {
							goto l933
						}
						position++
						goto l917
					l933:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ð') {
							goto l934
						}
						position++
						goto l917
					l934:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ñ') {
							goto l935
						}
						position++
						goto l917
					l935:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ò') {
							goto l936
						}
						position++
						goto l917
					l936:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ó') {
							goto l937
						}
						position++
						goto l917
					l937:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ó') {
							goto l938
						}
						position++
						goto l917
					l938:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ô') {
							goto l939
						}
						position++
						goto l917
					l939:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('õ') {
							goto l940
						}
						position++
						goto l917
					l940:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ö') {
							goto l941
						}
						position++
						goto l917
					l941:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ø') {
							goto l942
						}
						position++
						goto l917
					l942:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ù') {
							goto l943
						}
						position++
						goto l917
					l943:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ú') {
							goto l944
						}
						position++
						goto l917
					l944:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('û') {
							goto l945
						}
						position++
						goto l917
					l945:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ü') {
							goto l946
						}
						position++
						goto l917
					l946:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ý') {
							goto l947
						}
						position++
						goto l917
					l947:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ÿ') {
							goto l948
						}
						position++
						goto l917
					l948:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ā') {
							goto l949
						}
						position++
						goto l917
					l949:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ă') {
							goto l950
						}
						position++
						goto l917
					l950:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ą') {
							goto l951
						}
						position++
						goto l917
					l951:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ć') {
							goto l952
						}
						position++
						goto l917
					l952:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ĉ') {
							goto l953
						}
						position++
						goto l917
					l953:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('č') {
							goto l954
						}
						position++
						goto l917
					l954:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ď') {
							goto l955
						}
						position++
						goto l917
					l955:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('đ') {
							goto l956
						}
						position++
						goto l917
					l956:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ē') {
							goto l957
						}
						position++
						goto l917
					l957:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ĕ') {
							goto l958
						}
						position++
						goto l917
					l958:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ė') {
							goto l959
						}
						position++
						goto l917
					l959:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ę') {
							goto l960
						}
						position++
						goto l917
					l960:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ě') {
							goto l961
						}
						position++
						goto l917
					l961:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ğ') {
							goto l962
						}
						position++
						goto l917
					l962:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ī') {
							goto l963
						}
						position++
						goto l917
					l963:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ĭ') {
							goto l964
						}
						position++
						goto l917
					l964:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('İ') {
							goto l965
						}
						position++
						goto l917
					l965:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ı') {
							goto l966
						}
						position++
						goto l917
					l966:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ĺ') {
							goto l967
						}
						position++
						goto l917
					l967:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ľ') {
							goto l968
						}
						position++
						goto l917
					l968:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ł') {
							goto l969
						}
						position++
						goto l917
					l969:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ń') {
							goto l970
						}
						position++
						goto l917
					l970:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ņ') {
							goto l971
						}
						position++
						goto l917
					l971:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ň') {
							goto l972
						}
						position++
						goto l917
					l972:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ŏ') {
							goto l973
						}
						position++
						goto l917
					l973:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ő') {
							goto l974
						}
						position++
						goto l917
					l974:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('œ') {
							goto l975
						}
						position++
						goto l917
					l975:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ŕ') {
							goto l976
						}
						position++
						goto l917
					l976:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ř') {
							goto l977
						}
						position++
						goto l917
					l977:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ś') {
							goto l978
						}
						position++
						goto l917
					l978:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ş') {
							goto l979
						}
						position++
						goto l917
					l979:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('š') {
							goto l980
						}
						position++
						goto l917
					l980:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ţ') {
							goto l981
						}
						position++
						goto l917
					l981:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ť') {
							goto l982
						}
						position++
						goto l917
					l982:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ũ') {
							goto l983
						}
						position++
						goto l917
					l983:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ū') {
							goto l984
						}
						position++
						goto l917
					l984:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ŭ') {
							goto l985
						}
						position++
						goto l917
					l985:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ů') {
							goto l986
						}
						position++
						goto l917
					l986:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ű') {
							goto l987
						}
						position++
						goto l917
					l987:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ź') {
							goto l988
						}
						position++
						goto l917
					l988:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ż') {
							goto l989
						}
						position++
						goto l917
					l989:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ž') {
							goto l990
						}
						position++
						goto l917
					l990:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ſ') {
							goto l991
						}
						position++
						goto l917
					l991:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ǎ') {
							goto l992
						}
						position++
						goto l917
					l992:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ǔ') {
							goto l993
						}
						position++
						goto l917
					l993:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ǧ') {
							goto l994
						}
						position++
						goto l917
					l994:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ș') {
							goto l995
						}
						position++
						goto l917
					l995:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ț') {
							goto l996
						}
						position++
						goto l917
					l996:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ȳ') {
							goto l997
						}
						position++
						goto l917
					l997:
						position, tokenIndex = position917, tokenIndex917
						if buffer[position] != rune('ß') {
							goto l911
						}
						position++
					}
				l917:
				}
			l913:
				add(ruleAuthorLowerChar, position912)
			}
			return true
		l911:
			position, tokenIndex = position911, tokenIndex911
			return false
		},
		/* 117 Year <- <(YearRange / YearApprox / YearWithParens / YearWithPage / YearWithDot / YearWithChar / YearNum)> */
		func() bool {
			position998, tokenIndex998 := position, tokenIndex
			{
				position999 := position
				{
					position1000, tokenIndex1000 := position, tokenIndex
					if !_rules[ruleYearRange]() {
						goto l1001
					}
					goto l1000
				l1001:
					position, tokenIndex = position1000, tokenIndex1000
					if !_rules[ruleYearApprox]() {
						goto l1002
					}
					goto l1000
				l1002:
					position, tokenIndex = position1000, tokenIndex1000
					if !_rules[ruleYearWithParens]() {
						goto l1003
					}
					goto l1000
				l1003:
					position, tokenIndex = position1000, tokenIndex1000
					if !_rules[ruleYearWithPage]() {
						goto l1004
					}
					goto l1000
				l1004:
					position, tokenIndex = position1000, tokenIndex1000
					if !_rules[ruleYearWithDot]() {
						goto l1005
					}
					goto l1000
				l1005:
					position, tokenIndex = position1000, tokenIndex1000
					if !_rules[ruleYearWithChar]() {
						goto l1006
					}
					goto l1000
				l1006:
					position, tokenIndex = position1000, tokenIndex1000
					if !_rules[ruleYearNum]() {
						goto l998
					}
				}
			l1000:
				add(ruleYear, position999)
			}
			return true
		l998:
			position, tokenIndex = position998, tokenIndex998
			return false
		},
		/* 118 YearRange <- <(YearNum (Dash / Slash) (Nums+ ('a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'l' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z' / '?')*))> */
		func() bool {
			position1007, tokenIndex1007 := position, tokenIndex
			{
				position1008 := position
				if !_rules[ruleYearNum]() {
					goto l1007
				}
				{
					position1009, tokenIndex1009 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l1010
					}
					goto l1009
				l1010:
					position, tokenIndex = position1009, tokenIndex1009
					if !_rules[ruleSlash]() {
						goto l1007
					}
				}
			l1009:
				if !_rules[ruleNums]() {
					goto l1007
				}
			l1011:
				{
					position1012, tokenIndex1012 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1012
					}
					goto l1011
				l1012:
					position, tokenIndex = position1012, tokenIndex1012
				}
			l1013:
				{
					position1014, tokenIndex1014 := position, tokenIndex
					{
						position1015, tokenIndex1015 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l1016
						}
						position++
						goto l1015
					l1016:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('b') {
							goto l1017
						}
						position++
						goto l1015
					l1017:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('c') {
							goto l1018
						}
						position++
						goto l1015
					l1018:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('d') {
							goto l1019
						}
						position++
						goto l1015
					l1019:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('e') {
							goto l1020
						}
						position++
						goto l1015
					l1020:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('f') {
							goto l1021
						}
						position++
						goto l1015
					l1021:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('g') {
							goto l1022
						}
						position++
						goto l1015
					l1022:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('h') {
							goto l1023
						}
						position++
						goto l1015
					l1023:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('i') {
							goto l1024
						}
						position++
						goto l1015
					l1024:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('j') {
							goto l1025
						}
						position++
						goto l1015
					l1025:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('k') {
							goto l1026
						}
						position++
						goto l1015
					l1026:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('l') {
							goto l1027
						}
						position++
						goto l1015
					l1027:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('m') {
							goto l1028
						}
						position++
						goto l1015
					l1028:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('n') {
							goto l1029
						}
						position++
						goto l1015
					l1029:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('o') {
							goto l1030
						}
						position++
						goto l1015
					l1030:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('p') {
							goto l1031
						}
						position++
						goto l1015
					l1031:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('q') {
							goto l1032
						}
						position++
						goto l1015
					l1032:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('r') {
							goto l1033
						}
						position++
						goto l1015
					l1033:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('s') {
							goto l1034
						}
						position++
						goto l1015
					l1034:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('t') {
							goto l1035
						}
						position++
						goto l1015
					l1035:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('u') {
							goto l1036
						}
						position++
						goto l1015
					l1036:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('v') {
							goto l1037
						}
						position++
						goto l1015
					l1037:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('w') {
							goto l1038
						}
						position++
						goto l1015
					l1038:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('x') {
							goto l1039
						}
						position++
						goto l1015
					l1039:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('y') {
							goto l1040
						}
						position++
						goto l1015
					l1040:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('z') {
							goto l1041
						}
						position++
						goto l1015
					l1041:
						position, tokenIndex = position1015, tokenIndex1015
						if buffer[position] != rune('?') {
							goto l1014
						}
						position++
					}
				l1015:
					goto l1013
				l1014:
					position, tokenIndex = position1014, tokenIndex1014
				}
				add(ruleYearRange, position1008)
			}
			return true
		l1007:
			position, tokenIndex = position1007, tokenIndex1007
			return false
		},
		/* 119 YearWithDot <- <(YearNum '.')> */
		func() bool {
			position1042, tokenIndex1042 := position, tokenIndex
			{
				position1043 := position
				if !_rules[ruleYearNum]() {
					goto l1042
				}
				if buffer[position] != rune('.') {
					goto l1042
				}
				position++
				add(ruleYearWithDot, position1043)
			}
			return true
		l1042:
			position, tokenIndex = position1042, tokenIndex1042
			return false
		},
		/* 120 YearApprox <- <('[' _? YearNum _? ']')> */
		func() bool {
			position1044, tokenIndex1044 := position, tokenIndex
			{
				position1045 := position
				if buffer[position] != rune('[') {
					goto l1044
				}
				position++
				{
					position1046, tokenIndex1046 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1046
					}
					goto l1047
				l1046:
					position, tokenIndex = position1046, tokenIndex1046
				}
			l1047:
				if !_rules[ruleYearNum]() {
					goto l1044
				}
				{
					position1048, tokenIndex1048 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1048
					}
					goto l1049
				l1048:
					position, tokenIndex = position1048, tokenIndex1048
				}
			l1049:
				if buffer[position] != rune(']') {
					goto l1044
				}
				position++
				add(ruleYearApprox, position1045)
			}
			return true
		l1044:
			position, tokenIndex = position1044, tokenIndex1044
			return false
		},
		/* 121 YearWithPage <- <((YearWithChar / YearNum) _? ':' _? Nums+)> */
		func() bool {
			position1050, tokenIndex1050 := position, tokenIndex
			{
				position1051 := position
				{
					position1052, tokenIndex1052 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l1053
					}
					goto l1052
				l1053:
					position, tokenIndex = position1052, tokenIndex1052
					if !_rules[ruleYearNum]() {
						goto l1050
					}
				}
			l1052:
				{
					position1054, tokenIndex1054 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1054
					}
					goto l1055
				l1054:
					position, tokenIndex = position1054, tokenIndex1054
				}
			l1055:
				if buffer[position] != rune(':') {
					goto l1050
				}
				position++
				{
					position1056, tokenIndex1056 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1056
					}
					goto l1057
				l1056:
					position, tokenIndex = position1056, tokenIndex1056
				}
			l1057:
				if !_rules[ruleNums]() {
					goto l1050
				}
			l1058:
				{
					position1059, tokenIndex1059 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1059
					}
					goto l1058
				l1059:
					position, tokenIndex = position1059, tokenIndex1059
				}
				add(ruleYearWithPage, position1051)
			}
			return true
		l1050:
			position, tokenIndex = position1050, tokenIndex1050
			return false
		},
		/* 122 YearWithParens <- <('(' (YearWithChar / YearNum) ')')> */
		func() bool {
			position1060, tokenIndex1060 := position, tokenIndex
			{
				position1061 := position
				if buffer[position] != rune('(') {
					goto l1060
				}
				position++
				{
					position1062, tokenIndex1062 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l1063
					}
					goto l1062
				l1063:
					position, tokenIndex = position1062, tokenIndex1062
					if !_rules[ruleYearNum]() {
						goto l1060
					}
				}
			l1062:
				if buffer[position] != rune(')') {
					goto l1060
				}
				position++
				add(ruleYearWithParens, position1061)
			}
			return true
		l1060:
			position, tokenIndex = position1060, tokenIndex1060
			return false
		},
		/* 123 YearWithChar <- <(YearNum LowerASCII)> */
		func() bool {
			position1064, tokenIndex1064 := position, tokenIndex
			{
				position1065 := position
				if !_rules[ruleYearNum]() {
					goto l1064
				}
				if !_rules[ruleLowerASCII]() {
					goto l1064
				}
				add(ruleYearWithChar, position1065)
			}
			return true
		l1064:
			position, tokenIndex = position1064, tokenIndex1064
			return false
		},
		/* 124 YearNum <- <(('1' / '2') ('0' / '7' / '8' / '9') Nums (Nums / '?') '?'*)> */
		func() bool {
			position1066, tokenIndex1066 := position, tokenIndex
			{
				position1067 := position
				{
					position1068, tokenIndex1068 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l1069
					}
					position++
					goto l1068
				l1069:
					position, tokenIndex = position1068, tokenIndex1068
					if buffer[position] != rune('2') {
						goto l1066
					}
					position++
				}
			l1068:
				{
					position1070, tokenIndex1070 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l1071
					}
					position++
					goto l1070
				l1071:
					position, tokenIndex = position1070, tokenIndex1070
					if buffer[position] != rune('7') {
						goto l1072
					}
					position++
					goto l1070
				l1072:
					position, tokenIndex = position1070, tokenIndex1070
					if buffer[position] != rune('8') {
						goto l1073
					}
					position++
					goto l1070
				l1073:
					position, tokenIndex = position1070, tokenIndex1070
					if buffer[position] != rune('9') {
						goto l1066
					}
					position++
				}
			l1070:
				if !_rules[ruleNums]() {
					goto l1066
				}
				{
					position1074, tokenIndex1074 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1075
					}
					goto l1074
				l1075:
					position, tokenIndex = position1074, tokenIndex1074
					if buffer[position] != rune('?') {
						goto l1066
					}
					position++
				}
			l1074:
			l1076:
				{
					position1077, tokenIndex1077 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l1077
					}
					position++
					goto l1076
				l1077:
					position, tokenIndex = position1077, tokenIndex1077
				}
				add(ruleYearNum, position1067)
			}
			return true
		l1066:
			position, tokenIndex = position1066, tokenIndex1066
			return false
		},
		/* 125 NameUpperChar <- <(UpperChar / UpperCharExtended)> */
		func() bool {
			position1078, tokenIndex1078 := position, tokenIndex
			{
				position1079 := position
				{
					position1080, tokenIndex1080 := position, tokenIndex
					if !_rules[ruleUpperChar]() {
						goto l1081
					}
					goto l1080
				l1081:
					position, tokenIndex = position1080, tokenIndex1080
					if !_rules[ruleUpperCharExtended]() {
						goto l1078
					}
				}
			l1080:
				add(ruleNameUpperChar, position1079)
			}
			return true
		l1078:
			position, tokenIndex = position1078, tokenIndex1078
			return false
		},
		/* 126 UpperCharExtended <- <('Æ' / 'Œ' / 'Ö')> */
		func() bool {
			position1082, tokenIndex1082 := position, tokenIndex
			{
				position1083 := position
				{
					position1084, tokenIndex1084 := position, tokenIndex
					if buffer[position] != rune('Æ') {
						goto l1085
					}
					position++
					goto l1084
				l1085:
					position, tokenIndex = position1084, tokenIndex1084
					if buffer[position] != rune('Œ') {
						goto l1086
					}
					position++
					goto l1084
				l1086:
					position, tokenIndex = position1084, tokenIndex1084
					if buffer[position] != rune('Ö') {
						goto l1082
					}
					position++
				}
			l1084:
				add(ruleUpperCharExtended, position1083)
			}
			return true
		l1082:
			position, tokenIndex = position1082, tokenIndex1082
			return false
		},
		/* 127 UpperChar <- <UpperASCII> */
		func() bool {
			position1087, tokenIndex1087 := position, tokenIndex
			{
				position1088 := position
				if !_rules[ruleUpperASCII]() {
					goto l1087
				}
				add(ruleUpperChar, position1088)
			}
			return true
		l1087:
			position, tokenIndex = position1087, tokenIndex1087
			return false
		},
		/* 128 NameLowerChar <- <(LowerChar / LowerCharExtended / MiscodedChar)> */
		func() bool {
			position1089, tokenIndex1089 := position, tokenIndex
			{
				position1090 := position
				{
					position1091, tokenIndex1091 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l1092
					}
					goto l1091
				l1092:
					position, tokenIndex = position1091, tokenIndex1091
					if !_rules[ruleLowerCharExtended]() {
						goto l1093
					}
					goto l1091
				l1093:
					position, tokenIndex = position1091, tokenIndex1091
					if !_rules[ruleMiscodedChar]() {
						goto l1089
					}
				}
			l1091:
				add(ruleNameLowerChar, position1090)
			}
			return true
		l1089:
			position, tokenIndex = position1089, tokenIndex1089
			return false
		},
		/* 129 MiscodedChar <- <'�'> */
		func() bool {
			position1094, tokenIndex1094 := position, tokenIndex
			{
				position1095 := position
				if buffer[position] != rune('�') {
					goto l1094
				}
				position++
				add(ruleMiscodedChar, position1095)
			}
			return true
		l1094:
			position, tokenIndex = position1094, tokenIndex1094
			return false
		},
		/* 130 LowerCharExtended <- <('æ' / 'œ' / 'à' / 'â' / 'å' / 'ã' / 'ä' / 'á' / 'ç' / 'č' / 'é' / 'è' / 'ë' / 'í' / 'ì' / 'ï' / 'ň' / 'ñ' / 'ñ' / 'ó' / 'ò' / 'ô' / 'ø' / 'õ' / 'ö' / 'ú' / 'û' / 'ù' / 'ü' / 'ŕ' / 'ř' / 'ŗ' / 'ſ' / 'š' / 'š' / 'ş' / 'ß' / 'ž')> */
		func() bool {
			position1096, tokenIndex1096 := position, tokenIndex
			{
				position1097 := position
				{
					position1098, tokenIndex1098 := position, tokenIndex
					if buffer[position] != rune('æ') {
						goto l1099
					}
					position++
					goto l1098
				l1099:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('œ') {
						goto l1100
					}
					position++
					goto l1098
				l1100:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('à') {
						goto l1101
					}
					position++
					goto l1098
				l1101:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('â') {
						goto l1102
					}
					position++
					goto l1098
				l1102:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('å') {
						goto l1103
					}
					position++
					goto l1098
				l1103:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ã') {
						goto l1104
					}
					position++
					goto l1098
				l1104:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ä') {
						goto l1105
					}
					position++
					goto l1098
				l1105:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('á') {
						goto l1106
					}
					position++
					goto l1098
				l1106:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ç') {
						goto l1107
					}
					position++
					goto l1098
				l1107:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('č') {
						goto l1108
					}
					position++
					goto l1098
				l1108:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('é') {
						goto l1109
					}
					position++
					goto l1098
				l1109:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('è') {
						goto l1110
					}
					position++
					goto l1098
				l1110:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ë') {
						goto l1111
					}
					position++
					goto l1098
				l1111:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('í') {
						goto l1112
					}
					position++
					goto l1098
				l1112:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ì') {
						goto l1113
					}
					position++
					goto l1098
				l1113:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ï') {
						goto l1114
					}
					position++
					goto l1098
				l1114:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ň') {
						goto l1115
					}
					position++
					goto l1098
				l1115:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ñ') {
						goto l1116
					}
					position++
					goto l1098
				l1116:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ñ') {
						goto l1117
					}
					position++
					goto l1098
				l1117:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ó') {
						goto l1118
					}
					position++
					goto l1098
				l1118:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ò') {
						goto l1119
					}
					position++
					goto l1098
				l1119:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ô') {
						goto l1120
					}
					position++
					goto l1098
				l1120:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ø') {
						goto l1121
					}
					position++
					goto l1098
				l1121:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('õ') {
						goto l1122
					}
					position++
					goto l1098
				l1122:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ö') {
						goto l1123
					}
					position++
					goto l1098
				l1123:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ú') {
						goto l1124
					}
					position++
					goto l1098
				l1124:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('û') {
						goto l1125
					}
					position++
					goto l1098
				l1125:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ù') {
						goto l1126
					}
					position++
					goto l1098
				l1126:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ü') {
						goto l1127
					}
					position++
					goto l1098
				l1127:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ŕ') {
						goto l1128
					}
					position++
					goto l1098
				l1128:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ř') {
						goto l1129
					}
					position++
					goto l1098
				l1129:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ŗ') {
						goto l1130
					}
					position++
					goto l1098
				l1130:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ſ') {
						goto l1131
					}
					position++
					goto l1098
				l1131:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('š') {
						goto l1132
					}
					position++
					goto l1098
				l1132:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('š') {
						goto l1133
					}
					position++
					goto l1098
				l1133:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ş') {
						goto l1134
					}
					position++
					goto l1098
				l1134:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ß') {
						goto l1135
					}
					position++
					goto l1098
				l1135:
					position, tokenIndex = position1098, tokenIndex1098
					if buffer[position] != rune('ž') {
						goto l1096
					}
					position++
				}
			l1098:
				add(ruleLowerCharExtended, position1097)
			}
			return true
		l1096:
			position, tokenIndex = position1096, tokenIndex1096
			return false
		},
		/* 131 LowerChar <- <LowerASCII> */
		func() bool {
			position1136, tokenIndex1136 := position, tokenIndex
			{
				position1137 := position
				if !_rules[ruleLowerASCII]() {
					goto l1136
				}
				add(ruleLowerChar, position1137)
			}
			return true
		l1136:
			position, tokenIndex = position1136, tokenIndex1136
			return false
		},
		/* 132 SpaceCharEOI <- <(_ / !.)> */
		func() bool {
			position1138, tokenIndex1138 := position, tokenIndex
			{
				position1139 := position
				{
					position1140, tokenIndex1140 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1141
					}
					goto l1140
				l1141:
					position, tokenIndex = position1140, tokenIndex1140
					{
						position1142, tokenIndex1142 := position, tokenIndex
						if !matchDot() {
							goto l1142
						}
						goto l1138
					l1142:
						position, tokenIndex = position1142, tokenIndex1142
					}
				}
			l1140:
				add(ruleSpaceCharEOI, position1139)
			}
			return true
		l1138:
			position, tokenIndex = position1138, tokenIndex1138
			return false
		},
		/* 133 Nums <- <[0-9]> */
		func() bool {
			position1143, tokenIndex1143 := position, tokenIndex
			{
				position1144 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l1143
				}
				position++
				add(ruleNums, position1144)
			}
			return true
		l1143:
			position, tokenIndex = position1143, tokenIndex1143
			return false
		},
		/* 134 LowerGreek <- <[α-ω]> */
		func() bool {
			position1145, tokenIndex1145 := position, tokenIndex
			{
				position1146 := position
				if c := buffer[position]; c < rune('α') || c > rune('ω') {
					goto l1145
				}
				position++
				add(ruleLowerGreek, position1146)
			}
			return true
		l1145:
			position, tokenIndex = position1145, tokenIndex1145
			return false
		},
		/* 135 LowerASCII <- <[a-z]> */
		func() bool {
			position1147, tokenIndex1147 := position, tokenIndex
			{
				position1148 := position
				if c := buffer[position]; c < rune('a') || c > rune('z') {
					goto l1147
				}
				position++
				add(ruleLowerASCII, position1148)
			}
			return true
		l1147:
			position, tokenIndex = position1147, tokenIndex1147
			return false
		},
		/* 136 UpperASCII <- <[A-Z]> */
		func() bool {
			position1149, tokenIndex1149 := position, tokenIndex
			{
				position1150 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l1149
				}
				position++
				add(ruleUpperASCII, position1150)
			}
			return true
		l1149:
			position, tokenIndex = position1149, tokenIndex1149
			return false
		},
		/* 137 Apostrophe <- <(ApostrOther / ApostrASCII)> */
		func() bool {
			position1151, tokenIndex1151 := position, tokenIndex
			{
				position1152 := position
				{
					position1153, tokenIndex1153 := position, tokenIndex
					if !_rules[ruleApostrOther]() {
						goto l1154
					}
					goto l1153
				l1154:
					position, tokenIndex = position1153, tokenIndex1153
					if !_rules[ruleApostrASCII]() {
						goto l1151
					}
				}
			l1153:
				add(ruleApostrophe, position1152)
			}
			return true
		l1151:
			position, tokenIndex = position1151, tokenIndex1151
			return false
		},
		/* 138 ApostrASCII <- <'\''> */
		func() bool {
			position1155, tokenIndex1155 := position, tokenIndex
			{
				position1156 := position
				if buffer[position] != rune('\'') {
					goto l1155
				}
				position++
				add(ruleApostrASCII, position1156)
			}
			return true
		l1155:
			position, tokenIndex = position1155, tokenIndex1155
			return false
		},
		/* 139 ApostrOther <- <('‘' / '’' / '`' / '´')> */
		func() bool {
			position1157, tokenIndex1157 := position, tokenIndex
			{
				position1158 := position
				{
					position1159, tokenIndex1159 := position, tokenIndex
					if buffer[position] != rune('‘') {
						goto l1160
					}
					position++
					goto l1159
				l1160:
					position, tokenIndex = position1159, tokenIndex1159
					if buffer[position] != rune('’') {
						goto l1161
					}
					position++
					goto l1159
				l1161:
					position, tokenIndex = position1159, tokenIndex1159
					if buffer[position] != rune('`') {
						goto l1162
					}
					position++
					goto l1159
				l1162:
					position, tokenIndex = position1159, tokenIndex1159
					if buffer[position] != rune('´') {
						goto l1157
					}
					position++
				}
			l1159:
				add(ruleApostrOther, position1158)
			}
			return true
		l1157:
			position, tokenIndex = position1157, tokenIndex1157
			return false
		},
		/* 140 Dash <- <'-'> */
		func() bool {
			position1163, tokenIndex1163 := position, tokenIndex
			{
				position1164 := position
				if buffer[position] != rune('-') {
					goto l1163
				}
				position++
				add(ruleDash, position1164)
			}
			return true
		l1163:
			position, tokenIndex = position1163, tokenIndex1163
			return false
		},
		/* 141 Slash <- <'/'> */
		func() bool {
			position1165, tokenIndex1165 := position, tokenIndex
			{
				position1166 := position
				if buffer[position] != rune('/') {
					goto l1165
				}
				position++
				add(ruleSlash, position1166)
			}
			return true
		l1165:
			position, tokenIndex = position1165, tokenIndex1165
			return false
		},
		/* 142 _ <- <(MultipleSpace / SingleSpace)> */
		func() bool {
			position1167, tokenIndex1167 := position, tokenIndex
			{
				position1168 := position
				{
					position1169, tokenIndex1169 := position, tokenIndex
					if !_rules[ruleMultipleSpace]() {
						goto l1170
					}
					goto l1169
				l1170:
					position, tokenIndex = position1169, tokenIndex1169
					if !_rules[ruleSingleSpace]() {
						goto l1167
					}
				}
			l1169:
				add(rule_, position1168)
			}
			return true
		l1167:
			position, tokenIndex = position1167, tokenIndex1167
			return false
		},
		/* 143 MultipleSpace <- <(SingleSpace SingleSpace+)> */
		func() bool {
			position1171, tokenIndex1171 := position, tokenIndex
			{
				position1172 := position
				if !_rules[ruleSingleSpace]() {
					goto l1171
				}
				if !_rules[ruleSingleSpace]() {
					goto l1171
				}
			l1173:
				{
					position1174, tokenIndex1174 := position, tokenIndex
					if !_rules[ruleSingleSpace]() {
						goto l1174
					}
					goto l1173
				l1174:
					position, tokenIndex = position1174, tokenIndex1174
				}
				add(ruleMultipleSpace, position1172)
			}
			return true
		l1171:
			position, tokenIndex = position1171, tokenIndex1171
			return false
		},
		/* 144 SingleSpace <- <(' ' / OtherSpace)> */
		func() bool {
			position1175, tokenIndex1175 := position, tokenIndex
			{
				position1176 := position
				{
					position1177, tokenIndex1177 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l1178
					}
					position++
					goto l1177
				l1178:
					position, tokenIndex = position1177, tokenIndex1177
					if !_rules[ruleOtherSpace]() {
						goto l1175
					}
				}
			l1177:
				add(ruleSingleSpace, position1176)
			}
			return true
		l1175:
			position, tokenIndex = position1175, tokenIndex1175
			return false
		},
		/* 145 OtherSpace <- <('\u3000' / '\u00a0' / '\t' / '\r' / '\n' / '\f' / '\v')> */
		func() bool {
			position1179, tokenIndex1179 := position, tokenIndex
			{
				position1180 := position
				{
					position1181, tokenIndex1181 := position, tokenIndex
					if buffer[position] != rune('\u3000') {
						goto l1182
					}
					position++
					goto l1181
				l1182:
					position, tokenIndex = position1181, tokenIndex1181
					if buffer[position] != rune('\u00a0') {
						goto l1183
					}
					position++
					goto l1181
				l1183:
					position, tokenIndex = position1181, tokenIndex1181
					if buffer[position] != rune('\t') {
						goto l1184
					}
					position++
					goto l1181
				l1184:
					position, tokenIndex = position1181, tokenIndex1181
					if buffer[position] != rune('\r') {
						goto l1185
					}
					position++
					goto l1181
				l1185:
					position, tokenIndex = position1181, tokenIndex1181
					if buffer[position] != rune('\n') {
						goto l1186
					}
					position++
					goto l1181
				l1186:
					position, tokenIndex = position1181, tokenIndex1181
					if buffer[position] != rune('\f') {
						goto l1187
					}
					position++
					goto l1181
				l1187:
					position, tokenIndex = position1181, tokenIndex1181
					if buffer[position] != rune('\v') {
						goto l1179
					}
					position++
				}
			l1181:
				add(ruleOtherSpace, position1180)
			}
			return true
		l1179:
			position, tokenIndex = position1179, tokenIndex1179
			return false
		},
		/* 146 END <- <!.> */
		func() bool {
			position1188, tokenIndex1188 := position, tokenIndex
			{
				position1189 := position
				{
					position1190, tokenIndex1190 := position, tokenIndex
					if !matchDot() {
						goto l1190
					}
					goto l1188
				l1190:
					position, tokenIndex = position1190, tokenIndex1190
				}
				add(ruleEND, position1189)
			}
			return true
		l1188:
			position, tokenIndex = position1188, tokenIndex1188
			return false
		},
	}
	p.rules = _rules
	return nil
}
