package parser

// Code generated by peg grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleSciName
	ruleTail
	ruleName
	ruleHybridFormula
	ruleHybridFormulaFull
	ruleHybridFormulaPart
	ruleNamedHybrid
	ruleNamedSpeciesHybrid
	ruleNamedGenusHybrid
	ruleCandidatusName
	ruleCandidatus
	ruleSingleName
	ruleNameUninomial
	ruleNameApprox
	ruleNameComp
	ruleNameSpecies
	ruleGenusWord
	ruleInfraspGroup
	ruleInfraspEpithet
	ruleCultivarWordGroup
	ruleCultivar
	ruleRankCultivar
	ruleNotHybridChar
	ruleCultivarRecursive
	ruleCultivarApostrophe
	ruleSpeciesEpithet
	ruleComparison
	ruleRank
	ruleRankNotho
	ruleRankOtherUncommon
	ruleRankOther
	ruleRankVar
	ruleRankForma
	ruleRankSsp
	ruleRankAgamo
	ruleSubgenusOrSuperspecies
	ruleSubgenus
	ruleSubgenus2
	ruleSubgenus1
	ruleUninomialCombo
	ruleUninomialCombo1
	ruleUninomialCombo2
	ruleRankUninomial
	ruleRankUninomialPlain
	ruleRankUninomialNotho
	ruleUninomial
	ruleUninomialWord
	ruleAbbrSubgenus
	ruleAbbrGenus
	ruleCapWord
	ruleCapWord1
	ruleCapWordWithDash
	ruleUpperAfterDash
	ruleLowerAfterDash
	ruleTwoLetterGenus
	ruleWord
	ruleWord1
	ruleWordStartsWithDigit
	ruleWord2
	ruleWordApostr
	ruleWord4
	ruleMultiDashedWord
	ruleHybridChar
	ruleApproxNameIgnored
	ruleApproximation
	ruleAuthorship
	ruleAuthorshipCombo
	ruleOriginalAuthorship
	ruleOriginalAuthorshipComb
	ruleCombinationAuthorship
	ruleBasionymAuthorshipMissingParens
	ruleMissingParensStart
	ruleMissingParensEnd
	ruleBasionymAuthorshipYearMisformed
	ruleBasionymAuthorship
	ruleBasionymAuthorship1
	ruleBasionymAuthorship2Parens
	ruleAuthorsGroup
	ruleAuthorsTeam
	ruleAuthorSep
	ruleAuthorSep1
	ruleAuthorSep2
	ruleAuthorSepSpanish
	ruleAuthorEx
	ruleAuthorEmend
	ruleAuthor
	ruleAuthor0
	ruleAuthor1
	ruleAuthor2
	ruleUnknownAuthor
	ruleAuthorWord
	ruleAuthorEtAl
	ruleAuthorWord2
	ruleAuthorWord3
	ruleAuthorDashInitials
	ruleAuthorWordSoft
	ruleCapAuthorWord
	ruleAllCapsAuthorWord
	ruleFilius
	ruleFiliusF
	ruleFiliusFNoSpace
	ruleAuthorSuffix
	ruleAuthorPrefixGlued
	ruleAuthorPrefix
	ruleAuthorPrefix2
	ruleAuthorPrefix1
	ruleAuthorUpperChar
	ruleAuthorLowerChar
	ruleYear
	ruleYearRange
	ruleYearWithDot
	ruleYearApprox
	ruleYearWithPage
	ruleYearWithParens
	ruleYearWithChar
	ruleYearNum
	ruleNameUpperChar
	ruleUpperCharExtended
	ruleUpperChar
	ruleNameLowerChar
	ruleMiscodedChar
	ruleLowerCharExtended
	ruleLowerChar
	ruleSpaceCharEOI
	ruleNums
	ruleLowerGreek
	ruleLowerASCII
	ruleUpperASCII
	ruleApostrophe
	ruleApostrASCII
	ruleApostrOther
	ruleDash
	ruleSlash
	rule_
	ruleMultipleSpace
	ruleSingleSpace
	ruleOtherSpace
	ruleEND
)

var rul3s = [...]string{
	"Unknown",
	"SciName",
	"Tail",
	"Name",
	"HybridFormula",
	"HybridFormulaFull",
	"HybridFormulaPart",
	"NamedHybrid",
	"NamedSpeciesHybrid",
	"NamedGenusHybrid",
	"CandidatusName",
	"Candidatus",
	"SingleName",
	"NameUninomial",
	"NameApprox",
	"NameComp",
	"NameSpecies",
	"GenusWord",
	"InfraspGroup",
	"InfraspEpithet",
	"CultivarWordGroup",
	"Cultivar",
	"RankCultivar",
	"NotHybridChar",
	"CultivarRecursive",
	"CultivarApostrophe",
	"SpeciesEpithet",
	"Comparison",
	"Rank",
	"RankNotho",
	"RankOtherUncommon",
	"RankOther",
	"RankVar",
	"RankForma",
	"RankSsp",
	"RankAgamo",
	"SubgenusOrSuperspecies",
	"Subgenus",
	"Subgenus2",
	"Subgenus1",
	"UninomialCombo",
	"UninomialCombo1",
	"UninomialCombo2",
	"RankUninomial",
	"RankUninomialPlain",
	"RankUninomialNotho",
	"Uninomial",
	"UninomialWord",
	"AbbrSubgenus",
	"AbbrGenus",
	"CapWord",
	"CapWord1",
	"CapWordWithDash",
	"UpperAfterDash",
	"LowerAfterDash",
	"TwoLetterGenus",
	"Word",
	"Word1",
	"WordStartsWithDigit",
	"Word2",
	"WordApostr",
	"Word4",
	"MultiDashedWord",
	"HybridChar",
	"ApproxNameIgnored",
	"Approximation",
	"Authorship",
	"AuthorshipCombo",
	"OriginalAuthorship",
	"OriginalAuthorshipComb",
	"CombinationAuthorship",
	"BasionymAuthorshipMissingParens",
	"MissingParensStart",
	"MissingParensEnd",
	"BasionymAuthorshipYearMisformed",
	"BasionymAuthorship",
	"BasionymAuthorship1",
	"BasionymAuthorship2Parens",
	"AuthorsGroup",
	"AuthorsTeam",
	"AuthorSep",
	"AuthorSep1",
	"AuthorSep2",
	"AuthorSepSpanish",
	"AuthorEx",
	"AuthorEmend",
	"Author",
	"Author0",
	"Author1",
	"Author2",
	"UnknownAuthor",
	"AuthorWord",
	"AuthorEtAl",
	"AuthorWord2",
	"AuthorWord3",
	"AuthorDashInitials",
	"AuthorWordSoft",
	"CapAuthorWord",
	"AllCapsAuthorWord",
	"Filius",
	"FiliusF",
	"FiliusFNoSpace",
	"AuthorSuffix",
	"AuthorPrefixGlued",
	"AuthorPrefix",
	"AuthorPrefix2",
	"AuthorPrefix1",
	"AuthorUpperChar",
	"AuthorLowerChar",
	"Year",
	"YearRange",
	"YearWithDot",
	"YearApprox",
	"YearWithPage",
	"YearWithParens",
	"YearWithChar",
	"YearNum",
	"NameUpperChar",
	"UpperCharExtended",
	"UpperChar",
	"NameLowerChar",
	"MiscodedChar",
	"LowerCharExtended",
	"LowerChar",
	"SpaceCharEOI",
	"Nums",
	"LowerGreek",
	"LowerASCII",
	"UpperASCII",
	"Apostrophe",
	"ApostrASCII",
	"ApostrOther",
	"Dash",
	"Slash",
	"_",
	"MultipleSpace",
	"SingleSpace",
	"OtherSpace",
	"END",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Engine struct {
	baseEngine

	Buffer string
	buffer []rune
	rules  [139]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Engine) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Engine) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Engine
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Engine) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Engine) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Engine) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Engine) error {
	return func(p *Engine) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Engine) error {
	return func(p *Engine) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Engine) Init(options ...func(*Engine) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 SciName <- <(_? Name Tail END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[rule_]() {
						goto l2
					}
					goto l3
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
			l3:
				if !_rules[ruleName]() {
					goto l0
				}
				if !_rules[ruleTail]() {
					goto l0
				}
				if !_rules[ruleEND]() {
					goto l0
				}
				add(ruleSciName, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Tail <- <((_ / ';' / ',') .*)?> */
		func() bool {
			{
				position5 := position
				{
					position6, tokenIndex6 := position, tokenIndex
					{
						position8, tokenIndex8 := position, tokenIndex
						if !_rules[rule_]() {
							goto l9
						}
						goto l8
					l9:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(';') {
							goto l10
						}
						position++
						goto l8
					l10:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(',') {
							goto l6
						}
						position++
					}
				l8:
				l11:
					{
						position12, tokenIndex12 := position, tokenIndex
						if !matchDot() {
							goto l12
						}
						goto l11
					l12:
						position, tokenIndex = position12, tokenIndex12
					}
					goto l7
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
			l7:
				add(ruleTail, position5)
			}
			return true
		},
		/* 2 Name <- <(NamedHybrid / HybridFormula / CandidatusName / SingleName)> */
		func() bool {
			position13, tokenIndex13 := position, tokenIndex
			{
				position14 := position
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleNamedHybrid]() {
						goto l16
					}
					goto l15
				l16:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleHybridFormula]() {
						goto l17
					}
					goto l15
				l17:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleCandidatusName]() {
						goto l18
					}
					goto l15
				l18:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleSingleName]() {
						goto l13
					}
				}
			l15:
				add(ruleName, position14)
			}
			return true
		l13:
			position, tokenIndex = position13, tokenIndex13
			return false
		},
		/* 3 HybridFormula <- <(SingleName (_ (HybridFormulaPart / HybridFormulaFull))+)> */
		func() bool {
			position19, tokenIndex19 := position, tokenIndex
			{
				position20 := position
				if !_rules[ruleSingleName]() {
					goto l19
				}
				if !_rules[rule_]() {
					goto l19
				}
				{
					position23, tokenIndex23 := position, tokenIndex
					if !_rules[ruleHybridFormulaPart]() {
						goto l24
					}
					goto l23
				l24:
					position, tokenIndex = position23, tokenIndex23
					if !_rules[ruleHybridFormulaFull]() {
						goto l19
					}
				}
			l23:
			l21:
				{
					position22, tokenIndex22 := position, tokenIndex
					if !_rules[rule_]() {
						goto l22
					}
					{
						position25, tokenIndex25 := position, tokenIndex
						if !_rules[ruleHybridFormulaPart]() {
							goto l26
						}
						goto l25
					l26:
						position, tokenIndex = position25, tokenIndex25
						if !_rules[ruleHybridFormulaFull]() {
							goto l22
						}
					}
				l25:
					goto l21
				l22:
					position, tokenIndex = position22, tokenIndex22
				}
				add(ruleHybridFormula, position20)
			}
			return true
		l19:
			position, tokenIndex = position19, tokenIndex19
			return false
		},
		/* 4 HybridFormulaFull <- <(HybridChar (_ SingleName)?)> */
		func() bool {
			position27, tokenIndex27 := position, tokenIndex
			{
				position28 := position
				if !_rules[ruleHybridChar]() {
					goto l27
				}
				{
					position29, tokenIndex29 := position, tokenIndex
					if !_rules[rule_]() {
						goto l29
					}
					if !_rules[ruleSingleName]() {
						goto l29
					}
					goto l30
				l29:
					position, tokenIndex = position29, tokenIndex29
				}
			l30:
				add(ruleHybridFormulaFull, position28)
			}
			return true
		l27:
			position, tokenIndex = position27, tokenIndex27
			return false
		},
		/* 5 HybridFormulaPart <- <(HybridChar _ SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position31, tokenIndex31 := position, tokenIndex
			{
				position32 := position
				if !_rules[ruleHybridChar]() {
					goto l31
				}
				if !_rules[rule_]() {
					goto l31
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l31
				}
				{
					position33, tokenIndex33 := position, tokenIndex
					if !_rules[rule_]() {
						goto l33
					}
					if !_rules[ruleInfraspGroup]() {
						goto l33
					}
					goto l34
				l33:
					position, tokenIndex = position33, tokenIndex33
				}
			l34:
				add(ruleHybridFormulaPart, position32)
			}
			return true
		l31:
			position, tokenIndex = position31, tokenIndex31
			return false
		},
		/* 6 NamedHybrid <- <(NamedGenusHybrid / NamedSpeciesHybrid)> */
		func() bool {
			position35, tokenIndex35 := position, tokenIndex
			{
				position36 := position
				{
					position37, tokenIndex37 := position, tokenIndex
					if !_rules[ruleNamedGenusHybrid]() {
						goto l38
					}
					goto l37
				l38:
					position, tokenIndex = position37, tokenIndex37
					if !_rules[ruleNamedSpeciesHybrid]() {
						goto l35
					}
				}
			l37:
				add(ruleNamedHybrid, position36)
			}
			return true
		l35:
			position, tokenIndex = position35, tokenIndex35
			return false
		},
		/* 7 NamedSpeciesHybrid <- <(GenusWord (_ Subgenus)? (_ Comparison)? _ HybridChar _? SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position39, tokenIndex39 := position, tokenIndex
			{
				position40 := position
				if !_rules[ruleGenusWord]() {
					goto l39
				}
				{
					position41, tokenIndex41 := position, tokenIndex
					if !_rules[rule_]() {
						goto l41
					}
					if !_rules[ruleSubgenus]() {
						goto l41
					}
					goto l42
				l41:
					position, tokenIndex = position41, tokenIndex41
				}
			l42:
				{
					position43, tokenIndex43 := position, tokenIndex
					if !_rules[rule_]() {
						goto l43
					}
					if !_rules[ruleComparison]() {
						goto l43
					}
					goto l44
				l43:
					position, tokenIndex = position43, tokenIndex43
				}
			l44:
				if !_rules[rule_]() {
					goto l39
				}
				if !_rules[ruleHybridChar]() {
					goto l39
				}
				{
					position45, tokenIndex45 := position, tokenIndex
					if !_rules[rule_]() {
						goto l45
					}
					goto l46
				l45:
					position, tokenIndex = position45, tokenIndex45
				}
			l46:
				if !_rules[ruleSpeciesEpithet]() {
					goto l39
				}
				{
					position47, tokenIndex47 := position, tokenIndex
					if !_rules[rule_]() {
						goto l47
					}
					if !_rules[ruleInfraspGroup]() {
						goto l47
					}
					goto l48
				l47:
					position, tokenIndex = position47, tokenIndex47
				}
			l48:
				add(ruleNamedSpeciesHybrid, position40)
			}
			return true
		l39:
			position, tokenIndex = position39, tokenIndex39
			return false
		},
		/* 8 NamedGenusHybrid <- <(HybridChar _? SingleName)> */
		func() bool {
			position49, tokenIndex49 := position, tokenIndex
			{
				position50 := position
				if !_rules[ruleHybridChar]() {
					goto l49
				}
				{
					position51, tokenIndex51 := position, tokenIndex
					if !_rules[rule_]() {
						goto l51
					}
					goto l52
				l51:
					position, tokenIndex = position51, tokenIndex51
				}
			l52:
				if !_rules[ruleSingleName]() {
					goto l49
				}
				add(ruleNamedGenusHybrid, position50)
			}
			return true
		l49:
			position, tokenIndex = position49, tokenIndex49
			return false
		},
		/* 9 CandidatusName <- <(Candidatus _ SingleName)> */
		func() bool {
			position53, tokenIndex53 := position, tokenIndex
			{
				position54 := position
				if !_rules[ruleCandidatus]() {
					goto l53
				}
				if !_rules[rule_]() {
					goto l53
				}
				if !_rules[ruleSingleName]() {
					goto l53
				}
				add(ruleCandidatusName, position54)
			}
			return true
		l53:
			position, tokenIndex = position53, tokenIndex53
			return false
		},
		/* 10 Candidatus <- <('C' 'a' 'n' 'd' 'i' 'd' 'a' 't' 'u' 's')> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				if buffer[position] != rune('C') {
					goto l55
				}
				position++
				if buffer[position] != rune('a') {
					goto l55
				}
				position++
				if buffer[position] != rune('n') {
					goto l55
				}
				position++
				if buffer[position] != rune('d') {
					goto l55
				}
				position++
				if buffer[position] != rune('i') {
					goto l55
				}
				position++
				if buffer[position] != rune('d') {
					goto l55
				}
				position++
				if buffer[position] != rune('a') {
					goto l55
				}
				position++
				if buffer[position] != rune('t') {
					goto l55
				}
				position++
				if buffer[position] != rune('u') {
					goto l55
				}
				position++
				if buffer[position] != rune('s') {
					goto l55
				}
				position++
				add(ruleCandidatus, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
		/* 11 SingleName <- <(NameComp / NameApprox / NameSpecies / NameUninomial)> */
		func() bool {
			position57, tokenIndex57 := position, tokenIndex
			{
				position58 := position
				{
					position59, tokenIndex59 := position, tokenIndex
					if !_rules[ruleNameComp]() {
						goto l60
					}
					goto l59
				l60:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleNameApprox]() {
						goto l61
					}
					goto l59
				l61:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleNameSpecies]() {
						goto l62
					}
					goto l59
				l62:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleNameUninomial]() {
						goto l57
					}
				}
			l59:
				add(ruleSingleName, position58)
			}
			return true
		l57:
			position, tokenIndex = position57, tokenIndex57
			return false
		},
		/* 12 NameUninomial <- <((UninomialCombo / Uninomial) (_ CultivarWordGroup)?)> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				{
					position65, tokenIndex65 := position, tokenIndex
					if !_rules[ruleUninomialCombo]() {
						goto l66
					}
					goto l65
				l66:
					position, tokenIndex = position65, tokenIndex65
					if !_rules[ruleUninomial]() {
						goto l63
					}
				}
			l65:
				{
					position67, tokenIndex67 := position, tokenIndex
					if !_rules[rule_]() {
						goto l67
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l67
					}
					goto l68
				l67:
					position, tokenIndex = position67, tokenIndex67
				}
			l68:
				add(ruleNameUninomial, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 13 NameApprox <- <(GenusWord (_ SpeciesEpithet)? _ Approximation ApproxNameIgnored)> */
		func() bool {
			position69, tokenIndex69 := position, tokenIndex
			{
				position70 := position
				if !_rules[ruleGenusWord]() {
					goto l69
				}
				{
					position71, tokenIndex71 := position, tokenIndex
					if !_rules[rule_]() {
						goto l71
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l71
					}
					goto l72
				l71:
					position, tokenIndex = position71, tokenIndex71
				}
			l72:
				if !_rules[rule_]() {
					goto l69
				}
				if !_rules[ruleApproximation]() {
					goto l69
				}
				if !_rules[ruleApproxNameIgnored]() {
					goto l69
				}
				add(ruleNameApprox, position70)
			}
			return true
		l69:
			position, tokenIndex = position69, tokenIndex69
			return false
		},
		/* 14 NameComp <- <(GenusWord _ Comparison (_ SpeciesEpithet)?)> */
		func() bool {
			position73, tokenIndex73 := position, tokenIndex
			{
				position74 := position
				if !_rules[ruleGenusWord]() {
					goto l73
				}
				if !_rules[rule_]() {
					goto l73
				}
				if !_rules[ruleComparison]() {
					goto l73
				}
				{
					position75, tokenIndex75 := position, tokenIndex
					if !_rules[rule_]() {
						goto l75
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l75
					}
					goto l76
				l75:
					position, tokenIndex = position75, tokenIndex75
				}
			l76:
				add(ruleNameComp, position74)
			}
			return true
		l73:
			position, tokenIndex = position73, tokenIndex73
			return false
		},
		/* 15 NameSpecies <- <(GenusWord (_? (Subgenus / SubgenusOrSuperspecies))? _ SpeciesEpithet (_ InfraspGroup)? (_ CultivarWordGroup)?)> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				if !_rules[ruleGenusWord]() {
					goto l77
				}
				{
					position79, tokenIndex79 := position, tokenIndex
					{
						position81, tokenIndex81 := position, tokenIndex
						if !_rules[rule_]() {
							goto l81
						}
						goto l82
					l81:
						position, tokenIndex = position81, tokenIndex81
					}
				l82:
					{
						position83, tokenIndex83 := position, tokenIndex
						if !_rules[ruleSubgenus]() {
							goto l84
						}
						goto l83
					l84:
						position, tokenIndex = position83, tokenIndex83
						if !_rules[ruleSubgenusOrSuperspecies]() {
							goto l79
						}
					}
				l83:
					goto l80
				l79:
					position, tokenIndex = position79, tokenIndex79
				}
			l80:
				if !_rules[rule_]() {
					goto l77
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l77
				}
				{
					position85, tokenIndex85 := position, tokenIndex
					if !_rules[rule_]() {
						goto l85
					}
					if !_rules[ruleInfraspGroup]() {
						goto l85
					}
					goto l86
				l85:
					position, tokenIndex = position85, tokenIndex85
				}
			l86:
				{
					position87, tokenIndex87 := position, tokenIndex
					if !_rules[rule_]() {
						goto l87
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l87
					}
					goto l88
				l87:
					position, tokenIndex = position87, tokenIndex87
				}
			l88:
				add(ruleNameSpecies, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 16 GenusWord <- <((AbbrGenus / UninomialWord) !(_ AuthorWord))> */
		func() bool {
			position89, tokenIndex89 := position, tokenIndex
			{
				position90 := position
				{
					position91, tokenIndex91 := position, tokenIndex
					if !_rules[ruleAbbrGenus]() {
						goto l92
					}
					goto l91
				l92:
					position, tokenIndex = position91, tokenIndex91
					if !_rules[ruleUninomialWord]() {
						goto l89
					}
				}
			l91:
				{
					position93, tokenIndex93 := position, tokenIndex
					if !_rules[rule_]() {
						goto l93
					}
					if !_rules[ruleAuthorWord]() {
						goto l93
					}
					goto l89
				l93:
					position, tokenIndex = position93, tokenIndex93
				}
				add(ruleGenusWord, position90)
			}
			return true
		l89:
			position, tokenIndex = position89, tokenIndex89
			return false
		},
		/* 17 InfraspGroup <- <(InfraspEpithet (_ InfraspEpithet)? (_ InfraspEpithet)?)> */
		func() bool {
			position94, tokenIndex94 := position, tokenIndex
			{
				position95 := position
				if !_rules[ruleInfraspEpithet]() {
					goto l94
				}
				{
					position96, tokenIndex96 := position, tokenIndex
					if !_rules[rule_]() {
						goto l96
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l96
					}
					goto l97
				l96:
					position, tokenIndex = position96, tokenIndex96
				}
			l97:
				{
					position98, tokenIndex98 := position, tokenIndex
					if !_rules[rule_]() {
						goto l98
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l98
					}
					goto l99
				l98:
					position, tokenIndex = position98, tokenIndex98
				}
			l99:
				add(ruleInfraspGroup, position95)
			}
			return true
		l94:
			position, tokenIndex = position94, tokenIndex94
			return false
		},
		/* 18 InfraspEpithet <- <((Rank _?)? !AuthorEx Word (_ Authorship)?)> */
		func() bool {
			position100, tokenIndex100 := position, tokenIndex
			{
				position101 := position
				{
					position102, tokenIndex102 := position, tokenIndex
					if !_rules[ruleRank]() {
						goto l102
					}
					{
						position104, tokenIndex104 := position, tokenIndex
						if !_rules[rule_]() {
							goto l104
						}
						goto l105
					l104:
						position, tokenIndex = position104, tokenIndex104
					}
				l105:
					goto l103
				l102:
					position, tokenIndex = position102, tokenIndex102
				}
			l103:
				{
					position106, tokenIndex106 := position, tokenIndex
					if !_rules[ruleAuthorEx]() {
						goto l106
					}
					goto l100
				l106:
					position, tokenIndex = position106, tokenIndex106
				}
				if !_rules[ruleWord]() {
					goto l100
				}
				{
					position107, tokenIndex107 := position, tokenIndex
					if !_rules[rule_]() {
						goto l107
					}
					if !_rules[ruleAuthorship]() {
						goto l107
					}
					goto l108
				l107:
					position, tokenIndex = position107, tokenIndex107
				}
			l108:
				add(ruleInfraspEpithet, position101)
			}
			return true
		l100:
			position, tokenIndex = position100, tokenIndex100
			return false
		},
		/* 19 CultivarWordGroup <- <(((RankCultivar _)? CultivarApostrophe CultivarRecursive CultivarApostrophe) / (RankCultivar _ Cultivar))> */
		func() bool {
			position109, tokenIndex109 := position, tokenIndex
			{
				position110 := position
				{
					position111, tokenIndex111 := position, tokenIndex
					{
						position113, tokenIndex113 := position, tokenIndex
						if !_rules[ruleRankCultivar]() {
							goto l113
						}
						if !_rules[rule_]() {
							goto l113
						}
						goto l114
					l113:
						position, tokenIndex = position113, tokenIndex113
					}
				l114:
					if !_rules[ruleCultivarApostrophe]() {
						goto l112
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l112
					}
					if !_rules[ruleCultivarApostrophe]() {
						goto l112
					}
					goto l111
				l112:
					position, tokenIndex = position111, tokenIndex111
					if !_rules[ruleRankCultivar]() {
						goto l109
					}
					if !_rules[rule_]() {
						goto l109
					}
					if !_rules[ruleCultivar]() {
						goto l109
					}
				}
			l111:
				add(ruleCultivarWordGroup, position110)
			}
			return true
		l109:
			position, tokenIndex = position109, tokenIndex109
			return false
		},
		/* 20 Cultivar <- <NotHybridChar+> */
		func() bool {
			position115, tokenIndex115 := position, tokenIndex
			{
				position116 := position
				if !_rules[ruleNotHybridChar]() {
					goto l115
				}
			l117:
				{
					position118, tokenIndex118 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l118
					}
					goto l117
				l118:
					position, tokenIndex = position118, tokenIndex118
				}
				add(ruleCultivar, position116)
			}
			return true
		l115:
			position, tokenIndex = position115, tokenIndex115
			return false
		},
		/* 21 RankCultivar <- <('c' 'v' '.'?)> */
		func() bool {
			position119, tokenIndex119 := position, tokenIndex
			{
				position120 := position
				if buffer[position] != rune('c') {
					goto l119
				}
				position++
				if buffer[position] != rune('v') {
					goto l119
				}
				position++
				{
					position121, tokenIndex121 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l121
					}
					position++
					goto l122
				l121:
					position, tokenIndex = position121, tokenIndex121
				}
			l122:
				add(ruleRankCultivar, position120)
			}
			return true
		l119:
			position, tokenIndex = position119, tokenIndex119
			return false
		},
		/* 22 NotHybridChar <- <(!(_ HybridChar) .)> */
		func() bool {
			position123, tokenIndex123 := position, tokenIndex
			{
				position124 := position
				{
					position125, tokenIndex125 := position, tokenIndex
					if !_rules[rule_]() {
						goto l125
					}
					if !_rules[ruleHybridChar]() {
						goto l125
					}
					goto l123
				l125:
					position, tokenIndex = position125, tokenIndex125
				}
				if !matchDot() {
					goto l123
				}
				add(ruleNotHybridChar, position124)
			}
			return true
		l123:
			position, tokenIndex = position123, tokenIndex123
			return false
		},
		/* 23 CultivarRecursive <- <((NotHybridChar CultivarRecursive) / &CultivarApostrophe)> */
		func() bool {
			position126, tokenIndex126 := position, tokenIndex
			{
				position127 := position
				{
					position128, tokenIndex128 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l129
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l129
					}
					goto l128
				l129:
					position, tokenIndex = position128, tokenIndex128
					{
						position130, tokenIndex130 := position, tokenIndex
						if !_rules[ruleCultivarApostrophe]() {
							goto l126
						}
						position, tokenIndex = position130, tokenIndex130
					}
				}
			l128:
				add(ruleCultivarRecursive, position127)
			}
			return true
		l126:
			position, tokenIndex = position126, tokenIndex126
			return false
		},
		/* 24 CultivarApostrophe <- <('\'' / '‘' / '’' / '"' / '“' / '”')> */
		func() bool {
			position131, tokenIndex131 := position, tokenIndex
			{
				position132 := position
				{
					position133, tokenIndex133 := position, tokenIndex
					if buffer[position] != rune('\'') {
						goto l134
					}
					position++
					goto l133
				l134:
					position, tokenIndex = position133, tokenIndex133
					if buffer[position] != rune('‘') {
						goto l135
					}
					position++
					goto l133
				l135:
					position, tokenIndex = position133, tokenIndex133
					if buffer[position] != rune('’') {
						goto l136
					}
					position++
					goto l133
				l136:
					position, tokenIndex = position133, tokenIndex133
					if buffer[position] != rune('"') {
						goto l137
					}
					position++
					goto l133
				l137:
					position, tokenIndex = position133, tokenIndex133
					if buffer[position] != rune('“') {
						goto l138
					}
					position++
					goto l133
				l138:
					position, tokenIndex = position133, tokenIndex133
					if buffer[position] != rune('”') {
						goto l131
					}
					position++
				}
			l133:
				add(ruleCultivarApostrophe, position132)
			}
			return true
		l131:
			position, tokenIndex = position131, tokenIndex131
			return false
		},
		/* 25 SpeciesEpithet <- <(!AuthorEx Word (_? Authorship)?)> */
		func() bool {
			position139, tokenIndex139 := position, tokenIndex
			{
				position140 := position
				{
					position141, tokenIndex141 := position, tokenIndex
					if !_rules[ruleAuthorEx]() {
						goto l141
					}
					goto l139
				l141:
					position, tokenIndex = position141, tokenIndex141
				}
				if !_rules[ruleWord]() {
					goto l139
				}
				{
					position142, tokenIndex142 := position, tokenIndex
					{
						position144, tokenIndex144 := position, tokenIndex
						if !_rules[rule_]() {
							goto l144
						}
						goto l145
					l144:
						position, tokenIndex = position144, tokenIndex144
					}
				l145:
					if !_rules[ruleAuthorship]() {
						goto l142
					}
					goto l143
				l142:
					position, tokenIndex = position142, tokenIndex142
				}
			l143:
				add(ruleSpeciesEpithet, position140)
			}
			return true
		l139:
			position, tokenIndex = position139, tokenIndex139
			return false
		},
		/* 26 Comparison <- <('c' 'f' '.'?)> */
		func() bool {
			position146, tokenIndex146 := position, tokenIndex
			{
				position147 := position
				if buffer[position] != rune('c') {
					goto l146
				}
				position++
				if buffer[position] != rune('f') {
					goto l146
				}
				position++
				{
					position148, tokenIndex148 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l148
					}
					position++
					goto l149
				l148:
					position, tokenIndex = position148, tokenIndex148
				}
			l149:
				add(ruleComparison, position147)
			}
			return true
		l146:
			position, tokenIndex = position146, tokenIndex146
			return false
		},
		/* 27 Rank <- <((RankForma / RankVar / RankSsp / RankOther / RankOtherUncommon / RankAgamo / RankNotho) (_? LowerGreek ('.' / &SpaceCharEOI))?)> */
		func() bool {
			position150, tokenIndex150 := position, tokenIndex
			{
				position151 := position
				{
					position152, tokenIndex152 := position, tokenIndex
					if !_rules[ruleRankForma]() {
						goto l153
					}
					goto l152
				l153:
					position, tokenIndex = position152, tokenIndex152
					if !_rules[ruleRankVar]() {
						goto l154
					}
					goto l152
				l154:
					position, tokenIndex = position152, tokenIndex152
					if !_rules[ruleRankSsp]() {
						goto l155
					}
					goto l152
				l155:
					position, tokenIndex = position152, tokenIndex152
					if !_rules[ruleRankOther]() {
						goto l156
					}
					goto l152
				l156:
					position, tokenIndex = position152, tokenIndex152
					if !_rules[ruleRankOtherUncommon]() {
						goto l157
					}
					goto l152
				l157:
					position, tokenIndex = position152, tokenIndex152
					if !_rules[ruleRankAgamo]() {
						goto l158
					}
					goto l152
				l158:
					position, tokenIndex = position152, tokenIndex152
					if !_rules[ruleRankNotho]() {
						goto l150
					}
				}
			l152:
				{
					position159, tokenIndex159 := position, tokenIndex
					{
						position161, tokenIndex161 := position, tokenIndex
						if !_rules[rule_]() {
							goto l161
						}
						goto l162
					l161:
						position, tokenIndex = position161, tokenIndex161
					}
				l162:
					if !_rules[ruleLowerGreek]() {
						goto l159
					}
					{
						position163, tokenIndex163 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l164
						}
						position++
						goto l163
					l164:
						position, tokenIndex = position163, tokenIndex163
						{
							position165, tokenIndex165 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l159
							}
							position, tokenIndex = position165, tokenIndex165
						}
					}
				l163:
					goto l160
				l159:
					position, tokenIndex = position159, tokenIndex159
				}
			l160:
				add(ruleRank, position151)
			}
			return true
		l150:
			position, tokenIndex = position150, tokenIndex150
			return false
		},
		/* 28 RankNotho <- <((('n' 'o' 't' 'h' 'o' (('v' 'a' 'r') / ('f' 'o') / 'f' / ('s' 'u' 'b' 's' 'p') / ('s' 's' 'p') / ('s' 'p') / ('m' 'o' 'r' 't' 'h') / ('s' 'u' 'p' 's' 'p') / ('s' 'u'))) / ('n' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position166, tokenIndex166 := position, tokenIndex
			{
				position167 := position
				{
					position168, tokenIndex168 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l169
					}
					position++
					if buffer[position] != rune('o') {
						goto l169
					}
					position++
					if buffer[position] != rune('t') {
						goto l169
					}
					position++
					if buffer[position] != rune('h') {
						goto l169
					}
					position++
					if buffer[position] != rune('o') {
						goto l169
					}
					position++
					{
						position170, tokenIndex170 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l171
						}
						position++
						if buffer[position] != rune('a') {
							goto l171
						}
						position++
						if buffer[position] != rune('r') {
							goto l171
						}
						position++
						goto l170
					l171:
						position, tokenIndex = position170, tokenIndex170
						if buffer[position] != rune('f') {
							goto l172
						}
						position++
						if buffer[position] != rune('o') {
							goto l172
						}
						position++
						goto l170
					l172:
						position, tokenIndex = position170, tokenIndex170
						if buffer[position] != rune('f') {
							goto l173
						}
						position++
						goto l170
					l173:
						position, tokenIndex = position170, tokenIndex170
						if buffer[position] != rune('s') {
							goto l174
						}
						position++
						if buffer[position] != rune('u') {
							goto l174
						}
						position++
						if buffer[position] != rune('b') {
							goto l174
						}
						position++
						if buffer[position] != rune('s') {
							goto l174
						}
						position++
						if buffer[position] != rune('p') {
							goto l174
						}
						position++
						goto l170
					l174:
						position, tokenIndex = position170, tokenIndex170
						if buffer[position] != rune('s') {
							goto l175
						}
						position++
						if buffer[position] != rune('s') {
							goto l175
						}
						position++
						if buffer[position] != rune('p') {
							goto l175
						}
						position++
						goto l170
					l175:
						position, tokenIndex = position170, tokenIndex170
						if buffer[position] != rune('s') {
							goto l176
						}
						position++
						if buffer[position] != rune('p') {
							goto l176
						}
						position++
						goto l170
					l176:
						position, tokenIndex = position170, tokenIndex170
						if buffer[position] != rune('m') {
							goto l177
						}
						position++
						if buffer[position] != rune('o') {
							goto l177
						}
						position++
						if buffer[position] != rune('r') {
							goto l177
						}
						position++
						if buffer[position] != rune('t') {
							goto l177
						}
						position++
						if buffer[position] != rune('h') {
							goto l177
						}
						position++
						goto l170
					l177:
						position, tokenIndex = position170, tokenIndex170
						if buffer[position] != rune('s') {
							goto l178
						}
						position++
						if buffer[position] != rune('u') {
							goto l178
						}
						position++
						if buffer[position] != rune('p') {
							goto l178
						}
						position++
						if buffer[position] != rune('s') {
							goto l178
						}
						position++
						if buffer[position] != rune('p') {
							goto l178
						}
						position++
						goto l170
					l178:
						position, tokenIndex = position170, tokenIndex170
						if buffer[position] != rune('s') {
							goto l169
						}
						position++
						if buffer[position] != rune('u') {
							goto l169
						}
						position++
					}
				l170:
					goto l168
				l169:
					position, tokenIndex = position168, tokenIndex168
					if buffer[position] != rune('n') {
						goto l166
					}
					position++
					if buffer[position] != rune('v') {
						goto l166
					}
					position++
					if buffer[position] != rune('a') {
						goto l166
					}
					position++
					if buffer[position] != rune('r') {
						goto l166
					}
					position++
				}
			l168:
				{
					position179, tokenIndex179 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l180
					}
					position++
					goto l179
				l180:
					position, tokenIndex = position179, tokenIndex179
					{
						position181, tokenIndex181 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l166
						}
						position, tokenIndex = position181, tokenIndex181
					}
				}
			l179:
				add(ruleRankNotho, position167)
			}
			return true
		l166:
			position, tokenIndex = position166, tokenIndex166
			return false
		},
		/* 29 RankOtherUncommon <- <(('*' / ('n' 'a' 't' 'i' 'o') / ('n' 'a' 't' '.') / ('n' 'a' 't') / ('f' '.' 's' 'p') / 'α' / ('β' 'β') / 'β' / 'γ' / 'δ' / 'ε' / 'φ' / 'θ' / 'μ' / ('a' '.') / ('b' '.') / ('c' '.') / ('d' '.') / ('e' '.') / ('g' '.') / ('k' '.') / ('m' 'u' 't' '.')) &SpaceCharEOI)> */
		func() bool {
			position182, tokenIndex182 := position, tokenIndex
			{
				position183 := position
				{
					position184, tokenIndex184 := position, tokenIndex
					if buffer[position] != rune('*') {
						goto l185
					}
					position++
					goto l184
				l185:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('n') {
						goto l186
					}
					position++
					if buffer[position] != rune('a') {
						goto l186
					}
					position++
					if buffer[position] != rune('t') {
						goto l186
					}
					position++
					if buffer[position] != rune('i') {
						goto l186
					}
					position++
					if buffer[position] != rune('o') {
						goto l186
					}
					position++
					goto l184
				l186:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('n') {
						goto l187
					}
					position++
					if buffer[position] != rune('a') {
						goto l187
					}
					position++
					if buffer[position] != rune('t') {
						goto l187
					}
					position++
					if buffer[position] != rune('.') {
						goto l187
					}
					position++
					goto l184
				l187:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('n') {
						goto l188
					}
					position++
					if buffer[position] != rune('a') {
						goto l188
					}
					position++
					if buffer[position] != rune('t') {
						goto l188
					}
					position++
					goto l184
				l188:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('f') {
						goto l189
					}
					position++
					if buffer[position] != rune('.') {
						goto l189
					}
					position++
					if buffer[position] != rune('s') {
						goto l189
					}
					position++
					if buffer[position] != rune('p') {
						goto l189
					}
					position++
					goto l184
				l189:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('α') {
						goto l190
					}
					position++
					goto l184
				l190:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('β') {
						goto l191
					}
					position++
					if buffer[position] != rune('β') {
						goto l191
					}
					position++
					goto l184
				l191:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('β') {
						goto l192
					}
					position++
					goto l184
				l192:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('γ') {
						goto l193
					}
					position++
					goto l184
				l193:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('δ') {
						goto l194
					}
					position++
					goto l184
				l194:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('ε') {
						goto l195
					}
					position++
					goto l184
				l195:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('φ') {
						goto l196
					}
					position++
					goto l184
				l196:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('θ') {
						goto l197
					}
					position++
					goto l184
				l197:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('μ') {
						goto l198
					}
					position++
					goto l184
				l198:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('a') {
						goto l199
					}
					position++
					if buffer[position] != rune('.') {
						goto l199
					}
					position++
					goto l184
				l199:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('b') {
						goto l200
					}
					position++
					if buffer[position] != rune('.') {
						goto l200
					}
					position++
					goto l184
				l200:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('c') {
						goto l201
					}
					position++
					if buffer[position] != rune('.') {
						goto l201
					}
					position++
					goto l184
				l201:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('d') {
						goto l202
					}
					position++
					if buffer[position] != rune('.') {
						goto l202
					}
					position++
					goto l184
				l202:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('e') {
						goto l203
					}
					position++
					if buffer[position] != rune('.') {
						goto l203
					}
					position++
					goto l184
				l203:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('g') {
						goto l204
					}
					position++
					if buffer[position] != rune('.') {
						goto l204
					}
					position++
					goto l184
				l204:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('k') {
						goto l205
					}
					position++
					if buffer[position] != rune('.') {
						goto l205
					}
					position++
					goto l184
				l205:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('m') {
						goto l182
					}
					position++
					if buffer[position] != rune('u') {
						goto l182
					}
					position++
					if buffer[position] != rune('t') {
						goto l182
					}
					position++
					if buffer[position] != rune('.') {
						goto l182
					}
					position++
				}
			l184:
				{
					position206, tokenIndex206 := position, tokenIndex
					if !_rules[ruleSpaceCharEOI]() {
						goto l182
					}
					position, tokenIndex = position206, tokenIndex206
				}
				add(ruleRankOtherUncommon, position183)
			}
			return true
		l182:
			position, tokenIndex = position182, tokenIndex182
			return false
		},
		/* 30 RankOther <- <((('m' 'o' 'r' 'p' 'h') / ('c' 'o' 'n' 'v' 'a' 'r') / ('p' 's' 'e' 'u' 'd' 'o' 'v' 'a' 'r') / ('s' 'e' 'c' 't') / ('s' 'e' 'r') / ('s' 'u' 'b' 'v' 'a' 'r') / ('s' 'u' 'b' 'f') / ('r' 'a' 'c' 'e') / ('p' 'v') / ('p' 'a' 't' 'h' 'o' 'v' 'a' 'r') / ('a' 'b' '.' (_? ('n' '.'))?) / ('s' 't')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position207, tokenIndex207 := position, tokenIndex
			{
				position208 := position
				{
					position209, tokenIndex209 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l210
					}
					position++
					if buffer[position] != rune('o') {
						goto l210
					}
					position++
					if buffer[position] != rune('r') {
						goto l210
					}
					position++
					if buffer[position] != rune('p') {
						goto l210
					}
					position++
					if buffer[position] != rune('h') {
						goto l210
					}
					position++
					goto l209
				l210:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('c') {
						goto l211
					}
					position++
					if buffer[position] != rune('o') {
						goto l211
					}
					position++
					if buffer[position] != rune('n') {
						goto l211
					}
					position++
					if buffer[position] != rune('v') {
						goto l211
					}
					position++
					if buffer[position] != rune('a') {
						goto l211
					}
					position++
					if buffer[position] != rune('r') {
						goto l211
					}
					position++
					goto l209
				l211:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('p') {
						goto l212
					}
					position++
					if buffer[position] != rune('s') {
						goto l212
					}
					position++
					if buffer[position] != rune('e') {
						goto l212
					}
					position++
					if buffer[position] != rune('u') {
						goto l212
					}
					position++
					if buffer[position] != rune('d') {
						goto l212
					}
					position++
					if buffer[position] != rune('o') {
						goto l212
					}
					position++
					if buffer[position] != rune('v') {
						goto l212
					}
					position++
					if buffer[position] != rune('a') {
						goto l212
					}
					position++
					if buffer[position] != rune('r') {
						goto l212
					}
					position++
					goto l209
				l212:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('s') {
						goto l213
					}
					position++
					if buffer[position] != rune('e') {
						goto l213
					}
					position++
					if buffer[position] != rune('c') {
						goto l213
					}
					position++
					if buffer[position] != rune('t') {
						goto l213
					}
					position++
					goto l209
				l213:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('s') {
						goto l214
					}
					position++
					if buffer[position] != rune('e') {
						goto l214
					}
					position++
					if buffer[position] != rune('r') {
						goto l214
					}
					position++
					goto l209
				l214:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('s') {
						goto l215
					}
					position++
					if buffer[position] != rune('u') {
						goto l215
					}
					position++
					if buffer[position] != rune('b') {
						goto l215
					}
					position++
					if buffer[position] != rune('v') {
						goto l215
					}
					position++
					if buffer[position] != rune('a') {
						goto l215
					}
					position++
					if buffer[position] != rune('r') {
						goto l215
					}
					position++
					goto l209
				l215:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('s') {
						goto l216
					}
					position++
					if buffer[position] != rune('u') {
						goto l216
					}
					position++
					if buffer[position] != rune('b') {
						goto l216
					}
					position++
					if buffer[position] != rune('f') {
						goto l216
					}
					position++
					goto l209
				l216:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('r') {
						goto l217
					}
					position++
					if buffer[position] != rune('a') {
						goto l217
					}
					position++
					if buffer[position] != rune('c') {
						goto l217
					}
					position++
					if buffer[position] != rune('e') {
						goto l217
					}
					position++
					goto l209
				l217:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('p') {
						goto l218
					}
					position++
					if buffer[position] != rune('v') {
						goto l218
					}
					position++
					goto l209
				l218:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('p') {
						goto l219
					}
					position++
					if buffer[position] != rune('a') {
						goto l219
					}
					position++
					if buffer[position] != rune('t') {
						goto l219
					}
					position++
					if buffer[position] != rune('h') {
						goto l219
					}
					position++
					if buffer[position] != rune('o') {
						goto l219
					}
					position++
					if buffer[position] != rune('v') {
						goto l219
					}
					position++
					if buffer[position] != rune('a') {
						goto l219
					}
					position++
					if buffer[position] != rune('r') {
						goto l219
					}
					position++
					goto l209
				l219:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('a') {
						goto l220
					}
					position++
					if buffer[position] != rune('b') {
						goto l220
					}
					position++
					if buffer[position] != rune('.') {
						goto l220
					}
					position++
					{
						position221, tokenIndex221 := position, tokenIndex
						{
							position223, tokenIndex223 := position, tokenIndex
							if !_rules[rule_]() {
								goto l223
							}
							goto l224
						l223:
							position, tokenIndex = position223, tokenIndex223
						}
					l224:
						if buffer[position] != rune('n') {
							goto l221
						}
						position++
						if buffer[position] != rune('.') {
							goto l221
						}
						position++
						goto l222
					l221:
						position, tokenIndex = position221, tokenIndex221
					}
				l222:
					goto l209
				l220:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('s') {
						goto l207
					}
					position++
					if buffer[position] != rune('t') {
						goto l207
					}
					position++
				}
			l209:
				{
					position225, tokenIndex225 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l226
					}
					position++
					goto l225
				l226:
					position, tokenIndex = position225, tokenIndex225
					{
						position227, tokenIndex227 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l207
						}
						position, tokenIndex = position227, tokenIndex227
					}
				}
			l225:
				add(ruleRankOther, position208)
			}
			return true
		l207:
			position, tokenIndex = position207, tokenIndex207
			return false
		},
		/* 31 RankVar <- <((('v' 'a' 'r' 'i' 'e' 't' 'y') / ('[' 'v' 'a' 'r' '.' ']') / ('v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position228, tokenIndex228 := position, tokenIndex
			{
				position229 := position
				{
					position230, tokenIndex230 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l231
					}
					position++
					if buffer[position] != rune('a') {
						goto l231
					}
					position++
					if buffer[position] != rune('r') {
						goto l231
					}
					position++
					if buffer[position] != rune('i') {
						goto l231
					}
					position++
					if buffer[position] != rune('e') {
						goto l231
					}
					position++
					if buffer[position] != rune('t') {
						goto l231
					}
					position++
					if buffer[position] != rune('y') {
						goto l231
					}
					position++
					goto l230
				l231:
					position, tokenIndex = position230, tokenIndex230
					if buffer[position] != rune('[') {
						goto l232
					}
					position++
					if buffer[position] != rune('v') {
						goto l232
					}
					position++
					if buffer[position] != rune('a') {
						goto l232
					}
					position++
					if buffer[position] != rune('r') {
						goto l232
					}
					position++
					if buffer[position] != rune('.') {
						goto l232
					}
					position++
					if buffer[position] != rune(']') {
						goto l232
					}
					position++
					goto l230
				l232:
					position, tokenIndex = position230, tokenIndex230
					if buffer[position] != rune('v') {
						goto l228
					}
					position++
					if buffer[position] != rune('a') {
						goto l228
					}
					position++
					if buffer[position] != rune('r') {
						goto l228
					}
					position++
				}
			l230:
				{
					position233, tokenIndex233 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l234
					}
					position++
					goto l233
				l234:
					position, tokenIndex = position233, tokenIndex233
					{
						position235, tokenIndex235 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l228
						}
						position, tokenIndex = position235, tokenIndex235
					}
				}
			l233:
				add(ruleRankVar, position229)
			}
			return true
		l228:
			position, tokenIndex = position228, tokenIndex228
			return false
		},
		/* 32 RankForma <- <((('f' 'o' 'r' 'm' 'a') / ('f' 'm' 'a') / ('f' 'm') / ('f' 'o' 'r' 'm') / ('f' 'o') / 'f') ('.' / &SpaceCharEOI))> */
		func() bool {
			position236, tokenIndex236 := position, tokenIndex
			{
				position237 := position
				{
					position238, tokenIndex238 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l239
					}
					position++
					if buffer[position] != rune('o') {
						goto l239
					}
					position++
					if buffer[position] != rune('r') {
						goto l239
					}
					position++
					if buffer[position] != rune('m') {
						goto l239
					}
					position++
					if buffer[position] != rune('a') {
						goto l239
					}
					position++
					goto l238
				l239:
					position, tokenIndex = position238, tokenIndex238
					if buffer[position] != rune('f') {
						goto l240
					}
					position++
					if buffer[position] != rune('m') {
						goto l240
					}
					position++
					if buffer[position] != rune('a') {
						goto l240
					}
					position++
					goto l238
				l240:
					position, tokenIndex = position238, tokenIndex238
					if buffer[position] != rune('f') {
						goto l241
					}
					position++
					if buffer[position] != rune('m') {
						goto l241
					}
					position++
					goto l238
				l241:
					position, tokenIndex = position238, tokenIndex238
					if buffer[position] != rune('f') {
						goto l242
					}
					position++
					if buffer[position] != rune('o') {
						goto l242
					}
					position++
					if buffer[position] != rune('r') {
						goto l242
					}
					position++
					if buffer[position] != rune('m') {
						goto l242
					}
					position++
					goto l238
				l242:
					position, tokenIndex = position238, tokenIndex238
					if buffer[position] != rune('f') {
						goto l243
					}
					position++
					if buffer[position] != rune('o') {
						goto l243
					}
					position++
					goto l238
				l243:
					position, tokenIndex = position238, tokenIndex238
					if buffer[position] != rune('f') {
						goto l236
					}
					position++
				}
			l238:
				{
					position244, tokenIndex244 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l245
					}
					position++
					goto l244
				l245:
					position, tokenIndex = position244, tokenIndex244
					{
						position246, tokenIndex246 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l236
						}
						position, tokenIndex = position246, tokenIndex246
					}
				}
			l244:
				add(ruleRankForma, position237)
			}
			return true
		l236:
			position, tokenIndex = position236, tokenIndex236
			return false
		},
		/* 33 RankSsp <- <((('s' 's' 'p') / ('s' 'u' 'b' 's' 'p' 'e' 'c') / ('s' 'u' 'b' 's' 'p')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position247, tokenIndex247 := position, tokenIndex
			{
				position248 := position
				{
					position249, tokenIndex249 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l250
					}
					position++
					if buffer[position] != rune('s') {
						goto l250
					}
					position++
					if buffer[position] != rune('p') {
						goto l250
					}
					position++
					goto l249
				l250:
					position, tokenIndex = position249, tokenIndex249
					if buffer[position] != rune('s') {
						goto l251
					}
					position++
					if buffer[position] != rune('u') {
						goto l251
					}
					position++
					if buffer[position] != rune('b') {
						goto l251
					}
					position++
					if buffer[position] != rune('s') {
						goto l251
					}
					position++
					if buffer[position] != rune('p') {
						goto l251
					}
					position++
					if buffer[position] != rune('e') {
						goto l251
					}
					position++
					if buffer[position] != rune('c') {
						goto l251
					}
					position++
					goto l249
				l251:
					position, tokenIndex = position249, tokenIndex249
					if buffer[position] != rune('s') {
						goto l247
					}
					position++
					if buffer[position] != rune('u') {
						goto l247
					}
					position++
					if buffer[position] != rune('b') {
						goto l247
					}
					position++
					if buffer[position] != rune('s') {
						goto l247
					}
					position++
					if buffer[position] != rune('p') {
						goto l247
					}
					position++
				}
			l249:
				{
					position252, tokenIndex252 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l253
					}
					position++
					goto l252
				l253:
					position, tokenIndex = position252, tokenIndex252
					{
						position254, tokenIndex254 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l247
						}
						position, tokenIndex = position254, tokenIndex254
					}
				}
			l252:
				add(ruleRankSsp, position248)
			}
			return true
		l247:
			position, tokenIndex = position247, tokenIndex247
			return false
		},
		/* 34 RankAgamo <- <((('a' 'g' 'a' 'm' 'o' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 's' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position255, tokenIndex255 := position, tokenIndex
			{
				position256 := position
				{
					position257, tokenIndex257 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l258
					}
					position++
					if buffer[position] != rune('g') {
						goto l258
					}
					position++
					if buffer[position] != rune('a') {
						goto l258
					}
					position++
					if buffer[position] != rune('m') {
						goto l258
					}
					position++
					if buffer[position] != rune('o') {
						goto l258
					}
					position++
					if buffer[position] != rune('s') {
						goto l258
					}
					position++
					if buffer[position] != rune('p') {
						goto l258
					}
					position++
					goto l257
				l258:
					position, tokenIndex = position257, tokenIndex257
					if buffer[position] != rune('a') {
						goto l259
					}
					position++
					if buffer[position] != rune('g') {
						goto l259
					}
					position++
					if buffer[position] != rune('a') {
						goto l259
					}
					position++
					if buffer[position] != rune('m') {
						goto l259
					}
					position++
					if buffer[position] != rune('o') {
						goto l259
					}
					position++
					if buffer[position] != rune('s') {
						goto l259
					}
					position++
					if buffer[position] != rune('s') {
						goto l259
					}
					position++
					if buffer[position] != rune('p') {
						goto l259
					}
					position++
					goto l257
				l259:
					position, tokenIndex = position257, tokenIndex257
					if buffer[position] != rune('a') {
						goto l255
					}
					position++
					if buffer[position] != rune('g') {
						goto l255
					}
					position++
					if buffer[position] != rune('a') {
						goto l255
					}
					position++
					if buffer[position] != rune('m') {
						goto l255
					}
					position++
					if buffer[position] != rune('o') {
						goto l255
					}
					position++
					if buffer[position] != rune('v') {
						goto l255
					}
					position++
					if buffer[position] != rune('a') {
						goto l255
					}
					position++
					if buffer[position] != rune('r') {
						goto l255
					}
					position++
				}
			l257:
				{
					position260, tokenIndex260 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l261
					}
					position++
					goto l260
				l261:
					position, tokenIndex = position260, tokenIndex260
					{
						position262, tokenIndex262 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l255
						}
						position, tokenIndex = position262, tokenIndex262
					}
				}
			l260:
				add(ruleRankAgamo, position256)
			}
			return true
		l255:
			position, tokenIndex = position255, tokenIndex255
			return false
		},
		/* 35 SubgenusOrSuperspecies <- <('(' _? NameLowerChar+ _? ')')> */
		func() bool {
			position263, tokenIndex263 := position, tokenIndex
			{
				position264 := position
				if buffer[position] != rune('(') {
					goto l263
				}
				position++
				{
					position265, tokenIndex265 := position, tokenIndex
					if !_rules[rule_]() {
						goto l265
					}
					goto l266
				l265:
					position, tokenIndex = position265, tokenIndex265
				}
			l266:
				if !_rules[ruleNameLowerChar]() {
					goto l263
				}
			l267:
				{
					position268, tokenIndex268 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l268
					}
					goto l267
				l268:
					position, tokenIndex = position268, tokenIndex268
				}
				{
					position269, tokenIndex269 := position, tokenIndex
					if !_rules[rule_]() {
						goto l269
					}
					goto l270
				l269:
					position, tokenIndex = position269, tokenIndex269
				}
			l270:
				if buffer[position] != rune(')') {
					goto l263
				}
				position++
				add(ruleSubgenusOrSuperspecies, position264)
			}
			return true
		l263:
			position, tokenIndex = position263, tokenIndex263
			return false
		},
		/* 36 Subgenus <- <(Subgenus2 / Subgenus1)> */
		func() bool {
			position271, tokenIndex271 := position, tokenIndex
			{
				position272 := position
				{
					position273, tokenIndex273 := position, tokenIndex
					if !_rules[ruleSubgenus2]() {
						goto l274
					}
					goto l273
				l274:
					position, tokenIndex = position273, tokenIndex273
					if !_rules[ruleSubgenus1]() {
						goto l271
					}
				}
			l273:
				add(ruleSubgenus, position272)
			}
			return true
		l271:
			position, tokenIndex = position271, tokenIndex271
			return false
		},
		/* 37 Subgenus2 <- <('(' _? AbbrSubgenus _? ')' !(_? NameUpperChar))> */
		func() bool {
			position275, tokenIndex275 := position, tokenIndex
			{
				position276 := position
				if buffer[position] != rune('(') {
					goto l275
				}
				position++
				{
					position277, tokenIndex277 := position, tokenIndex
					if !_rules[rule_]() {
						goto l277
					}
					goto l278
				l277:
					position, tokenIndex = position277, tokenIndex277
				}
			l278:
				if !_rules[ruleAbbrSubgenus]() {
					goto l275
				}
				{
					position279, tokenIndex279 := position, tokenIndex
					if !_rules[rule_]() {
						goto l279
					}
					goto l280
				l279:
					position, tokenIndex = position279, tokenIndex279
				}
			l280:
				if buffer[position] != rune(')') {
					goto l275
				}
				position++
				{
					position281, tokenIndex281 := position, tokenIndex
					{
						position282, tokenIndex282 := position, tokenIndex
						if !_rules[rule_]() {
							goto l282
						}
						goto l283
					l282:
						position, tokenIndex = position282, tokenIndex282
					}
				l283:
					if !_rules[ruleNameUpperChar]() {
						goto l281
					}
					goto l275
				l281:
					position, tokenIndex = position281, tokenIndex281
				}
				add(ruleSubgenus2, position276)
			}
			return true
		l275:
			position, tokenIndex = position275, tokenIndex275
			return false
		},
		/* 38 Subgenus1 <- <('(' _? UninomialWord _? ')')> */
		func() bool {
			position284, tokenIndex284 := position, tokenIndex
			{
				position285 := position
				if buffer[position] != rune('(') {
					goto l284
				}
				position++
				{
					position286, tokenIndex286 := position, tokenIndex
					if !_rules[rule_]() {
						goto l286
					}
					goto l287
				l286:
					position, tokenIndex = position286, tokenIndex286
				}
			l287:
				if !_rules[ruleUninomialWord]() {
					goto l284
				}
				{
					position288, tokenIndex288 := position, tokenIndex
					if !_rules[rule_]() {
						goto l288
					}
					goto l289
				l288:
					position, tokenIndex = position288, tokenIndex288
				}
			l289:
				if buffer[position] != rune(')') {
					goto l284
				}
				position++
				add(ruleSubgenus1, position285)
			}
			return true
		l284:
			position, tokenIndex = position284, tokenIndex284
			return false
		},
		/* 39 UninomialCombo <- <(UninomialCombo1 / UninomialCombo2)> */
		func() bool {
			position290, tokenIndex290 := position, tokenIndex
			{
				position291 := position
				{
					position292, tokenIndex292 := position, tokenIndex
					if !_rules[ruleUninomialCombo1]() {
						goto l293
					}
					goto l292
				l293:
					position, tokenIndex = position292, tokenIndex292
					if !_rules[ruleUninomialCombo2]() {
						goto l290
					}
				}
			l292:
				add(ruleUninomialCombo, position291)
			}
			return true
		l290:
			position, tokenIndex = position290, tokenIndex290
			return false
		},
		/* 40 UninomialCombo1 <- <(UninomialWord _? Subgenus (_? Authorship)?)> */
		func() bool {
			position294, tokenIndex294 := position, tokenIndex
			{
				position295 := position
				if !_rules[ruleUninomialWord]() {
					goto l294
				}
				{
					position296, tokenIndex296 := position, tokenIndex
					if !_rules[rule_]() {
						goto l296
					}
					goto l297
				l296:
					position, tokenIndex = position296, tokenIndex296
				}
			l297:
				if !_rules[ruleSubgenus]() {
					goto l294
				}
				{
					position298, tokenIndex298 := position, tokenIndex
					{
						position300, tokenIndex300 := position, tokenIndex
						if !_rules[rule_]() {
							goto l300
						}
						goto l301
					l300:
						position, tokenIndex = position300, tokenIndex300
					}
				l301:
					if !_rules[ruleAuthorship]() {
						goto l298
					}
					goto l299
				l298:
					position, tokenIndex = position298, tokenIndex298
				}
			l299:
				add(ruleUninomialCombo1, position295)
			}
			return true
		l294:
			position, tokenIndex = position294, tokenIndex294
			return false
		},
		/* 41 UninomialCombo2 <- <(Uninomial _ RankUninomial _ Uninomial)> */
		func() bool {
			position302, tokenIndex302 := position, tokenIndex
			{
				position303 := position
				if !_rules[ruleUninomial]() {
					goto l302
				}
				if !_rules[rule_]() {
					goto l302
				}
				if !_rules[ruleRankUninomial]() {
					goto l302
				}
				if !_rules[rule_]() {
					goto l302
				}
				if !_rules[ruleUninomial]() {
					goto l302
				}
				add(ruleUninomialCombo2, position303)
			}
			return true
		l302:
			position, tokenIndex = position302, tokenIndex302
			return false
		},
		/* 42 RankUninomial <- <(RankUninomialPlain / RankUninomialNotho)> */
		func() bool {
			position304, tokenIndex304 := position, tokenIndex
			{
				position305 := position
				{
					position306, tokenIndex306 := position, tokenIndex
					if !_rules[ruleRankUninomialPlain]() {
						goto l307
					}
					goto l306
				l307:
					position, tokenIndex = position306, tokenIndex306
					if !_rules[ruleRankUninomialNotho]() {
						goto l304
					}
				}
			l306:
				add(ruleRankUninomial, position305)
			}
			return true
		l304:
			position, tokenIndex = position304, tokenIndex304
			return false
		},
		/* 43 RankUninomialPlain <- <((('s' 'e' 'c' 't') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('t' 'r' 'i' 'b') / ('s' 'u' 'b' 't' 'r' 'i' 'b') / ('s' 'u' 'b' 's' 'e' 'r') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('f' 'a' 'm') / ('s' 'u' 'b' 'f' 'a' 'm') / ('s' 'u' 'p' 'e' 'r' 't' 'r' 'i' 'b')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position308, tokenIndex308 := position, tokenIndex
			{
				position309 := position
				{
					position310, tokenIndex310 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l311
					}
					position++
					if buffer[position] != rune('e') {
						goto l311
					}
					position++
					if buffer[position] != rune('c') {
						goto l311
					}
					position++
					if buffer[position] != rune('t') {
						goto l311
					}
					position++
					goto l310
				l311:
					position, tokenIndex = position310, tokenIndex310
					if buffer[position] != rune('s') {
						goto l312
					}
					position++
					if buffer[position] != rune('u') {
						goto l312
					}
					position++
					if buffer[position] != rune('b') {
						goto l312
					}
					position++
					if buffer[position] != rune('s') {
						goto l312
					}
					position++
					if buffer[position] != rune('e') {
						goto l312
					}
					position++
					if buffer[position] != rune('c') {
						goto l312
					}
					position++
					if buffer[position] != rune('t') {
						goto l312
					}
					position++
					goto l310
				l312:
					position, tokenIndex = position310, tokenIndex310
					if buffer[position] != rune('t') {
						goto l313
					}
					position++
					if buffer[position] != rune('r') {
						goto l313
					}
					position++
					if buffer[position] != rune('i') {
						goto l313
					}
					position++
					if buffer[position] != rune('b') {
						goto l313
					}
					position++
					goto l310
				l313:
					position, tokenIndex = position310, tokenIndex310
					if buffer[position] != rune('s') {
						goto l314
					}
					position++
					if buffer[position] != rune('u') {
						goto l314
					}
					position++
					if buffer[position] != rune('b') {
						goto l314
					}
					position++
					if buffer[position] != rune('t') {
						goto l314
					}
					position++
					if buffer[position] != rune('r') {
						goto l314
					}
					position++
					if buffer[position] != rune('i') {
						goto l314
					}
					position++
					if buffer[position] != rune('b') {
						goto l314
					}
					position++
					goto l310
				l314:
					position, tokenIndex = position310, tokenIndex310
					if buffer[position] != rune('s') {
						goto l315
					}
					position++
					if buffer[position] != rune('u') {
						goto l315
					}
					position++
					if buffer[position] != rune('b') {
						goto l315
					}
					position++
					if buffer[position] != rune('s') {
						goto l315
					}
					position++
					if buffer[position] != rune('e') {
						goto l315
					}
					position++
					if buffer[position] != rune('r') {
						goto l315
					}
					position++
					goto l310
				l315:
					position, tokenIndex = position310, tokenIndex310
					if buffer[position] != rune('s') {
						goto l316
					}
					position++
					if buffer[position] != rune('e') {
						goto l316
					}
					position++
					if buffer[position] != rune('r') {
						goto l316
					}
					position++
					goto l310
				l316:
					position, tokenIndex = position310, tokenIndex310
					if buffer[position] != rune('s') {
						goto l317
					}
					position++
					if buffer[position] != rune('u') {
						goto l317
					}
					position++
					if buffer[position] != rune('b') {
						goto l317
					}
					position++
					if buffer[position] != rune('g') {
						goto l317
					}
					position++
					if buffer[position] != rune('e') {
						goto l317
					}
					position++
					if buffer[position] != rune('n') {
						goto l317
					}
					position++
					goto l310
				l317:
					position, tokenIndex = position310, tokenIndex310
					if buffer[position] != rune('s') {
						goto l318
					}
					position++
					if buffer[position] != rune('u') {
						goto l318
					}
					position++
					if buffer[position] != rune('b') {
						goto l318
					}
					position++
					if buffer[position] != rune('g') {
						goto l318
					}
					position++
					goto l310
				l318:
					position, tokenIndex = position310, tokenIndex310
					if buffer[position] != rune('f') {
						goto l319
					}
					position++
					if buffer[position] != rune('a') {
						goto l319
					}
					position++
					if buffer[position] != rune('m') {
						goto l319
					}
					position++
					goto l310
				l319:
					position, tokenIndex = position310, tokenIndex310
					if buffer[position] != rune('s') {
						goto l320
					}
					position++
					if buffer[position] != rune('u') {
						goto l320
					}
					position++
					if buffer[position] != rune('b') {
						goto l320
					}
					position++
					if buffer[position] != rune('f') {
						goto l320
					}
					position++
					if buffer[position] != rune('a') {
						goto l320
					}
					position++
					if buffer[position] != rune('m') {
						goto l320
					}
					position++
					goto l310
				l320:
					position, tokenIndex = position310, tokenIndex310
					if buffer[position] != rune('s') {
						goto l308
					}
					position++
					if buffer[position] != rune('u') {
						goto l308
					}
					position++
					if buffer[position] != rune('p') {
						goto l308
					}
					position++
					if buffer[position] != rune('e') {
						goto l308
					}
					position++
					if buffer[position] != rune('r') {
						goto l308
					}
					position++
					if buffer[position] != rune('t') {
						goto l308
					}
					position++
					if buffer[position] != rune('r') {
						goto l308
					}
					position++
					if buffer[position] != rune('i') {
						goto l308
					}
					position++
					if buffer[position] != rune('b') {
						goto l308
					}
					position++
				}
			l310:
				{
					position321, tokenIndex321 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l322
					}
					position++
					goto l321
				l322:
					position, tokenIndex = position321, tokenIndex321
					{
						position323, tokenIndex323 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l308
						}
						position, tokenIndex = position323, tokenIndex323
					}
				}
			l321:
				add(ruleRankUninomialPlain, position309)
			}
			return true
		l308:
			position, tokenIndex = position308, tokenIndex308
			return false
		},
		/* 44 RankUninomialNotho <- <('n' 'o' 't' 'h' 'o' _? (('s' 'e' 'c' 't') / ('g' 'e' 'n') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'e' 'n') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('s' 'u' 'b' 't' 'r' 'i' 'b')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position324, tokenIndex324 := position, tokenIndex
			{
				position325 := position
				if buffer[position] != rune('n') {
					goto l324
				}
				position++
				if buffer[position] != rune('o') {
					goto l324
				}
				position++
				if buffer[position] != rune('t') {
					goto l324
				}
				position++
				if buffer[position] != rune('h') {
					goto l324
				}
				position++
				if buffer[position] != rune('o') {
					goto l324
				}
				position++
				{
					position326, tokenIndex326 := position, tokenIndex
					if !_rules[rule_]() {
						goto l326
					}
					goto l327
				l326:
					position, tokenIndex = position326, tokenIndex326
				}
			l327:
				{
					position328, tokenIndex328 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l329
					}
					position++
					if buffer[position] != rune('e') {
						goto l329
					}
					position++
					if buffer[position] != rune('c') {
						goto l329
					}
					position++
					if buffer[position] != rune('t') {
						goto l329
					}
					position++
					goto l328
				l329:
					position, tokenIndex = position328, tokenIndex328
					if buffer[position] != rune('g') {
						goto l330
					}
					position++
					if buffer[position] != rune('e') {
						goto l330
					}
					position++
					if buffer[position] != rune('n') {
						goto l330
					}
					position++
					goto l328
				l330:
					position, tokenIndex = position328, tokenIndex328
					if buffer[position] != rune('s') {
						goto l331
					}
					position++
					if buffer[position] != rune('e') {
						goto l331
					}
					position++
					if buffer[position] != rune('r') {
						goto l331
					}
					position++
					goto l328
				l331:
					position, tokenIndex = position328, tokenIndex328
					if buffer[position] != rune('s') {
						goto l332
					}
					position++
					if buffer[position] != rune('u') {
						goto l332
					}
					position++
					if buffer[position] != rune('b') {
						goto l332
					}
					position++
					if buffer[position] != rune('g') {
						goto l332
					}
					position++
					if buffer[position] != rune('e') {
						goto l332
					}
					position++
					if buffer[position] != rune('e') {
						goto l332
					}
					position++
					if buffer[position] != rune('n') {
						goto l332
					}
					position++
					goto l328
				l332:
					position, tokenIndex = position328, tokenIndex328
					if buffer[position] != rune('s') {
						goto l333
					}
					position++
					if buffer[position] != rune('u') {
						goto l333
					}
					position++
					if buffer[position] != rune('b') {
						goto l333
					}
					position++
					if buffer[position] != rune('g') {
						goto l333
					}
					position++
					if buffer[position] != rune('e') {
						goto l333
					}
					position++
					if buffer[position] != rune('n') {
						goto l333
					}
					position++
					goto l328
				l333:
					position, tokenIndex = position328, tokenIndex328
					if buffer[position] != rune('s') {
						goto l334
					}
					position++
					if buffer[position] != rune('u') {
						goto l334
					}
					position++
					if buffer[position] != rune('b') {
						goto l334
					}
					position++
					if buffer[position] != rune('g') {
						goto l334
					}
					position++
					goto l328
				l334:
					position, tokenIndex = position328, tokenIndex328
					if buffer[position] != rune('s') {
						goto l335
					}
					position++
					if buffer[position] != rune('u') {
						goto l335
					}
					position++
					if buffer[position] != rune('b') {
						goto l335
					}
					position++
					if buffer[position] != rune('s') {
						goto l335
					}
					position++
					if buffer[position] != rune('e') {
						goto l335
					}
					position++
					if buffer[position] != rune('c') {
						goto l335
					}
					position++
					if buffer[position] != rune('t') {
						goto l335
					}
					position++
					goto l328
				l335:
					position, tokenIndex = position328, tokenIndex328
					if buffer[position] != rune('s') {
						goto l324
					}
					position++
					if buffer[position] != rune('u') {
						goto l324
					}
					position++
					if buffer[position] != rune('b') {
						goto l324
					}
					position++
					if buffer[position] != rune('t') {
						goto l324
					}
					position++
					if buffer[position] != rune('r') {
						goto l324
					}
					position++
					if buffer[position] != rune('i') {
						goto l324
					}
					position++
					if buffer[position] != rune('b') {
						goto l324
					}
					position++
				}
			l328:
				{
					position336, tokenIndex336 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l337
					}
					position++
					goto l336
				l337:
					position, tokenIndex = position336, tokenIndex336
					{
						position338, tokenIndex338 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l324
						}
						position, tokenIndex = position338, tokenIndex338
					}
				}
			l336:
				add(ruleRankUninomialNotho, position325)
			}
			return true
		l324:
			position, tokenIndex = position324, tokenIndex324
			return false
		},
		/* 45 Uninomial <- <(UninomialWord (_ Authorship !(_ LowerCharExtended LowerCharExtended LowerCharExtended))?)> */
		func() bool {
			position339, tokenIndex339 := position, tokenIndex
			{
				position340 := position
				if !_rules[ruleUninomialWord]() {
					goto l339
				}
				{
					position341, tokenIndex341 := position, tokenIndex
					if !_rules[rule_]() {
						goto l341
					}
					if !_rules[ruleAuthorship]() {
						goto l341
					}
					{
						position343, tokenIndex343 := position, tokenIndex
						if !_rules[rule_]() {
							goto l343
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l343
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l343
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l343
						}
						goto l341
					l343:
						position, tokenIndex = position343, tokenIndex343
					}
					goto l342
				l341:
					position, tokenIndex = position341, tokenIndex341
				}
			l342:
				add(ruleUninomial, position340)
			}
			return true
		l339:
			position, tokenIndex = position339, tokenIndex339
			return false
		},
		/* 46 UninomialWord <- <(CapWord / TwoLetterGenus)> */
		func() bool {
			position344, tokenIndex344 := position, tokenIndex
			{
				position345 := position
				{
					position346, tokenIndex346 := position, tokenIndex
					if !_rules[ruleCapWord]() {
						goto l347
					}
					goto l346
				l347:
					position, tokenIndex = position346, tokenIndex346
					if !_rules[ruleTwoLetterGenus]() {
						goto l344
					}
				}
			l346:
				add(ruleUninomialWord, position345)
			}
			return true
		l344:
			position, tokenIndex = position344, tokenIndex344
			return false
		},
		/* 47 AbbrSubgenus <- <(UpperChar LowerChar* '.')> */
		func() bool {
			position348, tokenIndex348 := position, tokenIndex
			{
				position349 := position
				if !_rules[ruleUpperChar]() {
					goto l348
				}
			l350:
				{
					position351, tokenIndex351 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l351
					}
					goto l350
				l351:
					position, tokenIndex = position351, tokenIndex351
				}
				if buffer[position] != rune('.') {
					goto l348
				}
				position++
				add(ruleAbbrSubgenus, position349)
			}
			return true
		l348:
			position, tokenIndex = position348, tokenIndex348
			return false
		},
		/* 48 AbbrGenus <- <(UpperChar LowerChar? '.')> */
		func() bool {
			position352, tokenIndex352 := position, tokenIndex
			{
				position353 := position
				if !_rules[ruleUpperChar]() {
					goto l352
				}
				{
					position354, tokenIndex354 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l354
					}
					goto l355
				l354:
					position, tokenIndex = position354, tokenIndex354
				}
			l355:
				if buffer[position] != rune('.') {
					goto l352
				}
				position++
				add(ruleAbbrGenus, position353)
			}
			return true
		l352:
			position, tokenIndex = position352, tokenIndex352
			return false
		},
		/* 49 CapWord <- <(CapWordWithDash / CapWord1)> */
		func() bool {
			position356, tokenIndex356 := position, tokenIndex
			{
				position357 := position
				{
					position358, tokenIndex358 := position, tokenIndex
					if !_rules[ruleCapWordWithDash]() {
						goto l359
					}
					goto l358
				l359:
					position, tokenIndex = position358, tokenIndex358
					if !_rules[ruleCapWord1]() {
						goto l356
					}
				}
			l358:
				add(ruleCapWord, position357)
			}
			return true
		l356:
			position, tokenIndex = position356, tokenIndex356
			return false
		},
		/* 50 CapWord1 <- <(NameUpperChar NameLowerChar NameLowerChar+ '?'?)> */
		func() bool {
			position360, tokenIndex360 := position, tokenIndex
			{
				position361 := position
				if !_rules[ruleNameUpperChar]() {
					goto l360
				}
				if !_rules[ruleNameLowerChar]() {
					goto l360
				}
				if !_rules[ruleNameLowerChar]() {
					goto l360
				}
			l362:
				{
					position363, tokenIndex363 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l363
					}
					goto l362
				l363:
					position, tokenIndex = position363, tokenIndex363
				}
				{
					position364, tokenIndex364 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l364
					}
					position++
					goto l365
				l364:
					position, tokenIndex = position364, tokenIndex364
				}
			l365:
				add(ruleCapWord1, position361)
			}
			return true
		l360:
			position, tokenIndex = position360, tokenIndex360
			return false
		},
		/* 51 CapWordWithDash <- <(CapWord1 Dash (UpperAfterDash / LowerAfterDash))> */
		func() bool {
			position366, tokenIndex366 := position, tokenIndex
			{
				position367 := position
				if !_rules[ruleCapWord1]() {
					goto l366
				}
				if !_rules[ruleDash]() {
					goto l366
				}
				{
					position368, tokenIndex368 := position, tokenIndex
					if !_rules[ruleUpperAfterDash]() {
						goto l369
					}
					goto l368
				l369:
					position, tokenIndex = position368, tokenIndex368
					if !_rules[ruleLowerAfterDash]() {
						goto l366
					}
				}
			l368:
				add(ruleCapWordWithDash, position367)
			}
			return true
		l366:
			position, tokenIndex = position366, tokenIndex366
			return false
		},
		/* 52 UpperAfterDash <- <CapWord1> */
		func() bool {
			position370, tokenIndex370 := position, tokenIndex
			{
				position371 := position
				if !_rules[ruleCapWord1]() {
					goto l370
				}
				add(ruleUpperAfterDash, position371)
			}
			return true
		l370:
			position, tokenIndex = position370, tokenIndex370
			return false
		},
		/* 53 LowerAfterDash <- <Word1> */
		func() bool {
			position372, tokenIndex372 := position, tokenIndex
			{
				position373 := position
				if !_rules[ruleWord1]() {
					goto l372
				}
				add(ruleLowerAfterDash, position373)
			}
			return true
		l372:
			position, tokenIndex = position372, tokenIndex372
			return false
		},
		/* 54 TwoLetterGenus <- <(('C' 'a') / ('E' 'a') / ('G' 'e') / ('I' 'a') / ('I' 'o') / ('I' 'x') / ('L' 'o') / ('O' 'a') / ('R' 'a') / ('T' 'y') / ('U' 'a') / ('A' 'a') / ('J' 'a') / ('Z' 'u') / ('L' 'a') / ('Q' 'u') / ('A' 's') / ('B' 'a'))> */
		func() bool {
			position374, tokenIndex374 := position, tokenIndex
			{
				position375 := position
				{
					position376, tokenIndex376 := position, tokenIndex
					if buffer[position] != rune('C') {
						goto l377
					}
					position++
					if buffer[position] != rune('a') {
						goto l377
					}
					position++
					goto l376
				l377:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('E') {
						goto l378
					}
					position++
					if buffer[position] != rune('a') {
						goto l378
					}
					position++
					goto l376
				l378:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('G') {
						goto l379
					}
					position++
					if buffer[position] != rune('e') {
						goto l379
					}
					position++
					goto l376
				l379:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('I') {
						goto l380
					}
					position++
					if buffer[position] != rune('a') {
						goto l380
					}
					position++
					goto l376
				l380:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('I') {
						goto l381
					}
					position++
					if buffer[position] != rune('o') {
						goto l381
					}
					position++
					goto l376
				l381:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('I') {
						goto l382
					}
					position++
					if buffer[position] != rune('x') {
						goto l382
					}
					position++
					goto l376
				l382:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('L') {
						goto l383
					}
					position++
					if buffer[position] != rune('o') {
						goto l383
					}
					position++
					goto l376
				l383:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('O') {
						goto l384
					}
					position++
					if buffer[position] != rune('a') {
						goto l384
					}
					position++
					goto l376
				l384:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('R') {
						goto l385
					}
					position++
					if buffer[position] != rune('a') {
						goto l385
					}
					position++
					goto l376
				l385:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('T') {
						goto l386
					}
					position++
					if buffer[position] != rune('y') {
						goto l386
					}
					position++
					goto l376
				l386:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('U') {
						goto l387
					}
					position++
					if buffer[position] != rune('a') {
						goto l387
					}
					position++
					goto l376
				l387:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('A') {
						goto l388
					}
					position++
					if buffer[position] != rune('a') {
						goto l388
					}
					position++
					goto l376
				l388:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('J') {
						goto l389
					}
					position++
					if buffer[position] != rune('a') {
						goto l389
					}
					position++
					goto l376
				l389:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('Z') {
						goto l390
					}
					position++
					if buffer[position] != rune('u') {
						goto l390
					}
					position++
					goto l376
				l390:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('L') {
						goto l391
					}
					position++
					if buffer[position] != rune('a') {
						goto l391
					}
					position++
					goto l376
				l391:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('Q') {
						goto l392
					}
					position++
					if buffer[position] != rune('u') {
						goto l392
					}
					position++
					goto l376
				l392:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('A') {
						goto l393
					}
					position++
					if buffer[position] != rune('s') {
						goto l393
					}
					position++
					goto l376
				l393:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('B') {
						goto l374
					}
					position++
					if buffer[position] != rune('a') {
						goto l374
					}
					position++
				}
			l376:
				add(ruleTwoLetterGenus, position375)
			}
			return true
		l374:
			position, tokenIndex = position374, tokenIndex374
			return false
		},
		/* 55 Word <- <(!((('e' 'x') / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd') / ('p' 'r' 'o') / ('c' 'v') / ('c' 'u' 'l' 't' 'i' 'v' 'a' 'r') / AuthorPrefix / RankUninomial / Approximation / Word4) SpaceCharEOI) (WordApostr / WordStartsWithDigit / MultiDashedWord / Word2 / Word1) &(SpaceCharEOI / '('))> */
		func() bool {
			position394, tokenIndex394 := position, tokenIndex
			{
				position395 := position
				{
					position396, tokenIndex396 := position, tokenIndex
					{
						position397, tokenIndex397 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l398
						}
						position++
						if buffer[position] != rune('x') {
							goto l398
						}
						position++
						goto l397
					l398:
						position, tokenIndex = position397, tokenIndex397
						if buffer[position] != rune('e') {
							goto l399
						}
						position++
						if buffer[position] != rune('t') {
							goto l399
						}
						position++
						goto l397
					l399:
						position, tokenIndex = position397, tokenIndex397
						if buffer[position] != rune('a') {
							goto l400
						}
						position++
						if buffer[position] != rune('n') {
							goto l400
						}
						position++
						if buffer[position] != rune('d') {
							goto l400
						}
						position++
						goto l397
					l400:
						position, tokenIndex = position397, tokenIndex397
						if buffer[position] != rune('a') {
							goto l401
						}
						position++
						if buffer[position] != rune('p') {
							goto l401
						}
						position++
						if buffer[position] != rune('u') {
							goto l401
						}
						position++
						if buffer[position] != rune('d') {
							goto l401
						}
						position++
						goto l397
					l401:
						position, tokenIndex = position397, tokenIndex397
						if buffer[position] != rune('p') {
							goto l402
						}
						position++
						if buffer[position] != rune('r') {
							goto l402
						}
						position++
						if buffer[position] != rune('o') {
							goto l402
						}
						position++
						goto l397
					l402:
						position, tokenIndex = position397, tokenIndex397
						if buffer[position] != rune('c') {
							goto l403
						}
						position++
						if buffer[position] != rune('v') {
							goto l403
						}
						position++
						goto l397
					l403:
						position, tokenIndex = position397, tokenIndex397
						if buffer[position] != rune('c') {
							goto l404
						}
						position++
						if buffer[position] != rune('u') {
							goto l404
						}
						position++
						if buffer[position] != rune('l') {
							goto l404
						}
						position++
						if buffer[position] != rune('t') {
							goto l404
						}
						position++
						if buffer[position] != rune('i') {
							goto l404
						}
						position++
						if buffer[position] != rune('v') {
							goto l404
						}
						position++
						if buffer[position] != rune('a') {
							goto l404
						}
						position++
						if buffer[position] != rune('r') {
							goto l404
						}
						position++
						goto l397
					l404:
						position, tokenIndex = position397, tokenIndex397
						if !_rules[ruleAuthorPrefix]() {
							goto l405
						}
						goto l397
					l405:
						position, tokenIndex = position397, tokenIndex397
						if !_rules[ruleRankUninomial]() {
							goto l406
						}
						goto l397
					l406:
						position, tokenIndex = position397, tokenIndex397
						if !_rules[ruleApproximation]() {
							goto l407
						}
						goto l397
					l407:
						position, tokenIndex = position397, tokenIndex397
						if !_rules[ruleWord4]() {
							goto l396
						}
					}
				l397:
					if !_rules[ruleSpaceCharEOI]() {
						goto l396
					}
					goto l394
				l396:
					position, tokenIndex = position396, tokenIndex396
				}
				{
					position408, tokenIndex408 := position, tokenIndex
					if !_rules[ruleWordApostr]() {
						goto l409
					}
					goto l408
				l409:
					position, tokenIndex = position408, tokenIndex408
					if !_rules[ruleWordStartsWithDigit]() {
						goto l410
					}
					goto l408
				l410:
					position, tokenIndex = position408, tokenIndex408
					if !_rules[ruleMultiDashedWord]() {
						goto l411
					}
					goto l408
				l411:
					position, tokenIndex = position408, tokenIndex408
					if !_rules[ruleWord2]() {
						goto l412
					}
					goto l408
				l412:
					position, tokenIndex = position408, tokenIndex408
					if !_rules[ruleWord1]() {
						goto l394
					}
				}
			l408:
				{
					position413, tokenIndex413 := position, tokenIndex
					{
						position414, tokenIndex414 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l415
						}
						goto l414
					l415:
						position, tokenIndex = position414, tokenIndex414
						if buffer[position] != rune('(') {
							goto l394
						}
						position++
					}
				l414:
					position, tokenIndex = position413, tokenIndex413
				}
				add(ruleWord, position395)
			}
			return true
		l394:
			position, tokenIndex = position394, tokenIndex394
			return false
		},
		/* 56 Word1 <- <((LowerASCII Dash)? NameLowerChar NameLowerChar+)> */
		func() bool {
			position416, tokenIndex416 := position, tokenIndex
			{
				position417 := position
				{
					position418, tokenIndex418 := position, tokenIndex
					if !_rules[ruleLowerASCII]() {
						goto l418
					}
					if !_rules[ruleDash]() {
						goto l418
					}
					goto l419
				l418:
					position, tokenIndex = position418, tokenIndex418
				}
			l419:
				if !_rules[ruleNameLowerChar]() {
					goto l416
				}
				if !_rules[ruleNameLowerChar]() {
					goto l416
				}
			l420:
				{
					position421, tokenIndex421 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l421
					}
					goto l420
				l421:
					position, tokenIndex = position421, tokenIndex421
				}
				add(ruleWord1, position417)
			}
			return true
		l416:
			position, tokenIndex = position416, tokenIndex416
			return false
		},
		/* 57 WordStartsWithDigit <- <(('1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9') Nums? ('.' / Dash)? NameLowerChar NameLowerChar NameLowerChar NameLowerChar+)> */
		func() bool {
			position422, tokenIndex422 := position, tokenIndex
			{
				position423 := position
				{
					position424, tokenIndex424 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l425
					}
					position++
					goto l424
				l425:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('2') {
						goto l426
					}
					position++
					goto l424
				l426:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('3') {
						goto l427
					}
					position++
					goto l424
				l427:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('4') {
						goto l428
					}
					position++
					goto l424
				l428:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('5') {
						goto l429
					}
					position++
					goto l424
				l429:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('6') {
						goto l430
					}
					position++
					goto l424
				l430:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('7') {
						goto l431
					}
					position++
					goto l424
				l431:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('8') {
						goto l432
					}
					position++
					goto l424
				l432:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('9') {
						goto l422
					}
					position++
				}
			l424:
				{
					position433, tokenIndex433 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l433
					}
					goto l434
				l433:
					position, tokenIndex = position433, tokenIndex433
				}
			l434:
				{
					position435, tokenIndex435 := position, tokenIndex
					{
						position437, tokenIndex437 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l438
						}
						position++
						goto l437
					l438:
						position, tokenIndex = position437, tokenIndex437
						if !_rules[ruleDash]() {
							goto l435
						}
					}
				l437:
					goto l436
				l435:
					position, tokenIndex = position435, tokenIndex435
				}
			l436:
				if !_rules[ruleNameLowerChar]() {
					goto l422
				}
				if !_rules[ruleNameLowerChar]() {
					goto l422
				}
				if !_rules[ruleNameLowerChar]() {
					goto l422
				}
				if !_rules[ruleNameLowerChar]() {
					goto l422
				}
			l439:
				{
					position440, tokenIndex440 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l440
					}
					goto l439
				l440:
					position, tokenIndex = position440, tokenIndex440
				}
				add(ruleWordStartsWithDigit, position423)
			}
			return true
		l422:
			position, tokenIndex = position422, tokenIndex422
			return false
		},
		/* 58 Word2 <- <(NameLowerChar+ Dash? NameLowerChar+)> */
		func() bool {
			position441, tokenIndex441 := position, tokenIndex
			{
				position442 := position
				if !_rules[ruleNameLowerChar]() {
					goto l441
				}
			l443:
				{
					position444, tokenIndex444 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l444
					}
					goto l443
				l444:
					position, tokenIndex = position444, tokenIndex444
				}
				{
					position445, tokenIndex445 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l445
					}
					goto l446
				l445:
					position, tokenIndex = position445, tokenIndex445
				}
			l446:
				if !_rules[ruleNameLowerChar]() {
					goto l441
				}
			l447:
				{
					position448, tokenIndex448 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l448
					}
					goto l447
				l448:
					position, tokenIndex = position448, tokenIndex448
				}
				add(ruleWord2, position442)
			}
			return true
		l441:
			position, tokenIndex = position441, tokenIndex441
			return false
		},
		/* 59 WordApostr <- <(NameLowerChar NameLowerChar* Apostrophe Word1)> */
		func() bool {
			position449, tokenIndex449 := position, tokenIndex
			{
				position450 := position
				if !_rules[ruleNameLowerChar]() {
					goto l449
				}
			l451:
				{
					position452, tokenIndex452 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l452
					}
					goto l451
				l452:
					position, tokenIndex = position452, tokenIndex452
				}
				if !_rules[ruleApostrophe]() {
					goto l449
				}
				if !_rules[ruleWord1]() {
					goto l449
				}
				add(ruleWordApostr, position450)
			}
			return true
		l449:
			position, tokenIndex = position449, tokenIndex449
			return false
		},
		/* 60 Word4 <- <(NameLowerChar+ '.' NameLowerChar)> */
		func() bool {
			position453, tokenIndex453 := position, tokenIndex
			{
				position454 := position
				if !_rules[ruleNameLowerChar]() {
					goto l453
				}
			l455:
				{
					position456, tokenIndex456 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l456
					}
					goto l455
				l456:
					position, tokenIndex = position456, tokenIndex456
				}
				if buffer[position] != rune('.') {
					goto l453
				}
				position++
				if !_rules[ruleNameLowerChar]() {
					goto l453
				}
				add(ruleWord4, position454)
			}
			return true
		l453:
			position, tokenIndex = position453, tokenIndex453
			return false
		},
		/* 61 MultiDashedWord <- <(NameLowerChar+ Dash NameLowerChar+ Dash NameLowerChar+ (Dash NameLowerChar+)?)> */
		func() bool {
			position457, tokenIndex457 := position, tokenIndex
			{
				position458 := position
				if !_rules[ruleNameLowerChar]() {
					goto l457
				}
			l459:
				{
					position460, tokenIndex460 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l460
					}
					goto l459
				l460:
					position, tokenIndex = position460, tokenIndex460
				}
				if !_rules[ruleDash]() {
					goto l457
				}
				if !_rules[ruleNameLowerChar]() {
					goto l457
				}
			l461:
				{
					position462, tokenIndex462 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l462
					}
					goto l461
				l462:
					position, tokenIndex = position462, tokenIndex462
				}
				if !_rules[ruleDash]() {
					goto l457
				}
				if !_rules[ruleNameLowerChar]() {
					goto l457
				}
			l463:
				{
					position464, tokenIndex464 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l464
					}
					goto l463
				l464:
					position, tokenIndex = position464, tokenIndex464
				}
				{
					position465, tokenIndex465 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l465
					}
					if !_rules[ruleNameLowerChar]() {
						goto l465
					}
				l467:
					{
						position468, tokenIndex468 := position, tokenIndex
						if !_rules[ruleNameLowerChar]() {
							goto l468
						}
						goto l467
					l468:
						position, tokenIndex = position468, tokenIndex468
					}
					goto l466
				l465:
					position, tokenIndex = position465, tokenIndex465
				}
			l466:
				add(ruleMultiDashedWord, position458)
			}
			return true
		l457:
			position, tokenIndex = position457, tokenIndex457
			return false
		},
		/* 62 HybridChar <- <'×'> */
		func() bool {
			position469, tokenIndex469 := position, tokenIndex
			{
				position470 := position
				if buffer[position] != rune('×') {
					goto l469
				}
				position++
				add(ruleHybridChar, position470)
			}
			return true
		l469:
			position, tokenIndex = position469, tokenIndex469
			return false
		},
		/* 63 ApproxNameIgnored <- <.*> */
		func() bool {
			{
				position472 := position
			l473:
				{
					position474, tokenIndex474 := position, tokenIndex
					if !matchDot() {
						goto l474
					}
					goto l473
				l474:
					position, tokenIndex = position474, tokenIndex474
				}
				add(ruleApproxNameIgnored, position472)
			}
			return true
		},
		/* 64 Approximation <- <(('s' 'p' '.' _? ('n' 'r' '.')) / ('s' 'p' '.' _? ('a' 'f' 'f' '.')) / ('m' 'o' 'n' 's' 't' '.') / '?' / ((('s' 'p' 'p') / ('n' 'r') / ('s' 'p') / ('a' 'f' 'f') / ('s' 'p' 'e' 'c' 'i' 'e' 's')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position475, tokenIndex475 := position, tokenIndex
			{
				position476 := position
				{
					position477, tokenIndex477 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l478
					}
					position++
					if buffer[position] != rune('p') {
						goto l478
					}
					position++
					if buffer[position] != rune('.') {
						goto l478
					}
					position++
					{
						position479, tokenIndex479 := position, tokenIndex
						if !_rules[rule_]() {
							goto l479
						}
						goto l480
					l479:
						position, tokenIndex = position479, tokenIndex479
					}
				l480:
					if buffer[position] != rune('n') {
						goto l478
					}
					position++
					if buffer[position] != rune('r') {
						goto l478
					}
					position++
					if buffer[position] != rune('.') {
						goto l478
					}
					position++
					goto l477
				l478:
					position, tokenIndex = position477, tokenIndex477
					if buffer[position] != rune('s') {
						goto l481
					}
					position++
					if buffer[position] != rune('p') {
						goto l481
					}
					position++
					if buffer[position] != rune('.') {
						goto l481
					}
					position++
					{
						position482, tokenIndex482 := position, tokenIndex
						if !_rules[rule_]() {
							goto l482
						}
						goto l483
					l482:
						position, tokenIndex = position482, tokenIndex482
					}
				l483:
					if buffer[position] != rune('a') {
						goto l481
					}
					position++
					if buffer[position] != rune('f') {
						goto l481
					}
					position++
					if buffer[position] != rune('f') {
						goto l481
					}
					position++
					if buffer[position] != rune('.') {
						goto l481
					}
					position++
					goto l477
				l481:
					position, tokenIndex = position477, tokenIndex477
					if buffer[position] != rune('m') {
						goto l484
					}
					position++
					if buffer[position] != rune('o') {
						goto l484
					}
					position++
					if buffer[position] != rune('n') {
						goto l484
					}
					position++
					if buffer[position] != rune('s') {
						goto l484
					}
					position++
					if buffer[position] != rune('t') {
						goto l484
					}
					position++
					if buffer[position] != rune('.') {
						goto l484
					}
					position++
					goto l477
				l484:
					position, tokenIndex = position477, tokenIndex477
					if buffer[position] != rune('?') {
						goto l485
					}
					position++
					goto l477
				l485:
					position, tokenIndex = position477, tokenIndex477
					{
						position486, tokenIndex486 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l487
						}
						position++
						if buffer[position] != rune('p') {
							goto l487
						}
						position++
						if buffer[position] != rune('p') {
							goto l487
						}
						position++
						goto l486
					l487:
						position, tokenIndex = position486, tokenIndex486
						if buffer[position] != rune('n') {
							goto l488
						}
						position++
						if buffer[position] != rune('r') {
							goto l488
						}
						position++
						goto l486
					l488:
						position, tokenIndex = position486, tokenIndex486
						if buffer[position] != rune('s') {
							goto l489
						}
						position++
						if buffer[position] != rune('p') {
							goto l489
						}
						position++
						goto l486
					l489:
						position, tokenIndex = position486, tokenIndex486
						if buffer[position] != rune('a') {
							goto l490
						}
						position++
						if buffer[position] != rune('f') {
							goto l490
						}
						position++
						if buffer[position] != rune('f') {
							goto l490
						}
						position++
						goto l486
					l490:
						position, tokenIndex = position486, tokenIndex486
						if buffer[position] != rune('s') {
							goto l475
						}
						position++
						if buffer[position] != rune('p') {
							goto l475
						}
						position++
						if buffer[position] != rune('e') {
							goto l475
						}
						position++
						if buffer[position] != rune('c') {
							goto l475
						}
						position++
						if buffer[position] != rune('i') {
							goto l475
						}
						position++
						if buffer[position] != rune('e') {
							goto l475
						}
						position++
						if buffer[position] != rune('s') {
							goto l475
						}
						position++
					}
				l486:
					{
						position491, tokenIndex491 := position, tokenIndex
						{
							position493, tokenIndex493 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l492
							}
							position, tokenIndex = position493, tokenIndex493
						}
						goto l491
					l492:
						position, tokenIndex = position491, tokenIndex491
						if buffer[position] != rune('.') {
							goto l475
						}
						position++
					}
				l491:
				}
			l477:
				add(ruleApproximation, position476)
			}
			return true
		l475:
			position, tokenIndex = position475, tokenIndex475
			return false
		},
		/* 65 Authorship <- <((AuthorshipCombo / OriginalAuthorship) &(SpaceCharEOI / ';' / ','))> */
		func() bool {
			position494, tokenIndex494 := position, tokenIndex
			{
				position495 := position
				{
					position496, tokenIndex496 := position, tokenIndex
					if !_rules[ruleAuthorshipCombo]() {
						goto l497
					}
					goto l496
				l497:
					position, tokenIndex = position496, tokenIndex496
					if !_rules[ruleOriginalAuthorship]() {
						goto l494
					}
				}
			l496:
				{
					position498, tokenIndex498 := position, tokenIndex
					{
						position499, tokenIndex499 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l500
						}
						goto l499
					l500:
						position, tokenIndex = position499, tokenIndex499
						if buffer[position] != rune(';') {
							goto l501
						}
						position++
						goto l499
					l501:
						position, tokenIndex = position499, tokenIndex499
						if buffer[position] != rune(',') {
							goto l494
						}
						position++
					}
				l499:
					position, tokenIndex = position498, tokenIndex498
				}
				add(ruleAuthorship, position495)
			}
			return true
		l494:
			position, tokenIndex = position494, tokenIndex494
			return false
		},
		/* 66 AuthorshipCombo <- <(OriginalAuthorshipComb (_? CombinationAuthorship)?)> */
		func() bool {
			position502, tokenIndex502 := position, tokenIndex
			{
				position503 := position
				if !_rules[ruleOriginalAuthorshipComb]() {
					goto l502
				}
				{
					position504, tokenIndex504 := position, tokenIndex
					{
						position506, tokenIndex506 := position, tokenIndex
						if !_rules[rule_]() {
							goto l506
						}
						goto l507
					l506:
						position, tokenIndex = position506, tokenIndex506
					}
				l507:
					if !_rules[ruleCombinationAuthorship]() {
						goto l504
					}
					goto l505
				l504:
					position, tokenIndex = position504, tokenIndex504
				}
			l505:
				add(ruleAuthorshipCombo, position503)
			}
			return true
		l502:
			position, tokenIndex = position502, tokenIndex502
			return false
		},
		/* 67 OriginalAuthorship <- <AuthorsGroup> */
		func() bool {
			position508, tokenIndex508 := position, tokenIndex
			{
				position509 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l508
				}
				add(ruleOriginalAuthorship, position509)
			}
			return true
		l508:
			position, tokenIndex = position508, tokenIndex508
			return false
		},
		/* 68 OriginalAuthorshipComb <- <(BasionymAuthorshipYearMisformed / BasionymAuthorship / BasionymAuthorshipMissingParens)> */
		func() bool {
			position510, tokenIndex510 := position, tokenIndex
			{
				position511 := position
				{
					position512, tokenIndex512 := position, tokenIndex
					if !_rules[ruleBasionymAuthorshipYearMisformed]() {
						goto l513
					}
					goto l512
				l513:
					position, tokenIndex = position512, tokenIndex512
					if !_rules[ruleBasionymAuthorship]() {
						goto l514
					}
					goto l512
				l514:
					position, tokenIndex = position512, tokenIndex512
					if !_rules[ruleBasionymAuthorshipMissingParens]() {
						goto l510
					}
				}
			l512:
				add(ruleOriginalAuthorshipComb, position511)
			}
			return true
		l510:
			position, tokenIndex = position510, tokenIndex510
			return false
		},
		/* 69 CombinationAuthorship <- <AuthorsGroup> */
		func() bool {
			position515, tokenIndex515 := position, tokenIndex
			{
				position516 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l515
				}
				add(ruleCombinationAuthorship, position516)
			}
			return true
		l515:
			position, tokenIndex = position515, tokenIndex515
			return false
		},
		/* 70 BasionymAuthorshipMissingParens <- <(MissingParensStart / MissingParensEnd)> */
		func() bool {
			position517, tokenIndex517 := position, tokenIndex
			{
				position518 := position
				{
					position519, tokenIndex519 := position, tokenIndex
					if !_rules[ruleMissingParensStart]() {
						goto l520
					}
					goto l519
				l520:
					position, tokenIndex = position519, tokenIndex519
					if !_rules[ruleMissingParensEnd]() {
						goto l517
					}
				}
			l519:
				add(ruleBasionymAuthorshipMissingParens, position518)
			}
			return true
		l517:
			position, tokenIndex = position517, tokenIndex517
			return false
		},
		/* 71 MissingParensStart <- <('(' _? AuthorsGroup)> */
		func() bool {
			position521, tokenIndex521 := position, tokenIndex
			{
				position522 := position
				if buffer[position] != rune('(') {
					goto l521
				}
				position++
				{
					position523, tokenIndex523 := position, tokenIndex
					if !_rules[rule_]() {
						goto l523
					}
					goto l524
				l523:
					position, tokenIndex = position523, tokenIndex523
				}
			l524:
				if !_rules[ruleAuthorsGroup]() {
					goto l521
				}
				add(ruleMissingParensStart, position522)
			}
			return true
		l521:
			position, tokenIndex = position521, tokenIndex521
			return false
		},
		/* 72 MissingParensEnd <- <(AuthorsGroup _? ')')> */
		func() bool {
			position525, tokenIndex525 := position, tokenIndex
			{
				position526 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l525
				}
				{
					position527, tokenIndex527 := position, tokenIndex
					if !_rules[rule_]() {
						goto l527
					}
					goto l528
				l527:
					position, tokenIndex = position527, tokenIndex527
				}
			l528:
				if buffer[position] != rune(')') {
					goto l525
				}
				position++
				add(ruleMissingParensEnd, position526)
			}
			return true
		l525:
			position, tokenIndex = position525, tokenIndex525
			return false
		},
		/* 73 BasionymAuthorshipYearMisformed <- <('(' _? AuthorsGroup _? ')' (_? ',')? _? Year)> */
		func() bool {
			position529, tokenIndex529 := position, tokenIndex
			{
				position530 := position
				if buffer[position] != rune('(') {
					goto l529
				}
				position++
				{
					position531, tokenIndex531 := position, tokenIndex
					if !_rules[rule_]() {
						goto l531
					}
					goto l532
				l531:
					position, tokenIndex = position531, tokenIndex531
				}
			l532:
				if !_rules[ruleAuthorsGroup]() {
					goto l529
				}
				{
					position533, tokenIndex533 := position, tokenIndex
					if !_rules[rule_]() {
						goto l533
					}
					goto l534
				l533:
					position, tokenIndex = position533, tokenIndex533
				}
			l534:
				if buffer[position] != rune(')') {
					goto l529
				}
				position++
				{
					position535, tokenIndex535 := position, tokenIndex
					{
						position537, tokenIndex537 := position, tokenIndex
						if !_rules[rule_]() {
							goto l537
						}
						goto l538
					l537:
						position, tokenIndex = position537, tokenIndex537
					}
				l538:
					if buffer[position] != rune(',') {
						goto l535
					}
					position++
					goto l536
				l535:
					position, tokenIndex = position535, tokenIndex535
				}
			l536:
				{
					position539, tokenIndex539 := position, tokenIndex
					if !_rules[rule_]() {
						goto l539
					}
					goto l540
				l539:
					position, tokenIndex = position539, tokenIndex539
				}
			l540:
				if !_rules[ruleYear]() {
					goto l529
				}
				add(ruleBasionymAuthorshipYearMisformed, position530)
			}
			return true
		l529:
			position, tokenIndex = position529, tokenIndex529
			return false
		},
		/* 74 BasionymAuthorship <- <(BasionymAuthorship1 / BasionymAuthorship2Parens)> */
		func() bool {
			position541, tokenIndex541 := position, tokenIndex
			{
				position542 := position
				{
					position543, tokenIndex543 := position, tokenIndex
					if !_rules[ruleBasionymAuthorship1]() {
						goto l544
					}
					goto l543
				l544:
					position, tokenIndex = position543, tokenIndex543
					if !_rules[ruleBasionymAuthorship2Parens]() {
						goto l541
					}
				}
			l543:
				add(ruleBasionymAuthorship, position542)
			}
			return true
		l541:
			position, tokenIndex = position541, tokenIndex541
			return false
		},
		/* 75 BasionymAuthorship1 <- <('(' _? AuthorsGroup _? ')')> */
		func() bool {
			position545, tokenIndex545 := position, tokenIndex
			{
				position546 := position
				if buffer[position] != rune('(') {
					goto l545
				}
				position++
				{
					position547, tokenIndex547 := position, tokenIndex
					if !_rules[rule_]() {
						goto l547
					}
					goto l548
				l547:
					position, tokenIndex = position547, tokenIndex547
				}
			l548:
				if !_rules[ruleAuthorsGroup]() {
					goto l545
				}
				{
					position549, tokenIndex549 := position, tokenIndex
					if !_rules[rule_]() {
						goto l549
					}
					goto l550
				l549:
					position, tokenIndex = position549, tokenIndex549
				}
			l550:
				if buffer[position] != rune(')') {
					goto l545
				}
				position++
				add(ruleBasionymAuthorship1, position546)
			}
			return true
		l545:
			position, tokenIndex = position545, tokenIndex545
			return false
		},
		/* 76 BasionymAuthorship2Parens <- <('(' _? '(' _? AuthorsGroup _? ')' _? ')')> */
		func() bool {
			position551, tokenIndex551 := position, tokenIndex
			{
				position552 := position
				if buffer[position] != rune('(') {
					goto l551
				}
				position++
				{
					position553, tokenIndex553 := position, tokenIndex
					if !_rules[rule_]() {
						goto l553
					}
					goto l554
				l553:
					position, tokenIndex = position553, tokenIndex553
				}
			l554:
				if buffer[position] != rune('(') {
					goto l551
				}
				position++
				{
					position555, tokenIndex555 := position, tokenIndex
					if !_rules[rule_]() {
						goto l555
					}
					goto l556
				l555:
					position, tokenIndex = position555, tokenIndex555
				}
			l556:
				if !_rules[ruleAuthorsGroup]() {
					goto l551
				}
				{
					position557, tokenIndex557 := position, tokenIndex
					if !_rules[rule_]() {
						goto l557
					}
					goto l558
				l557:
					position, tokenIndex = position557, tokenIndex557
				}
			l558:
				if buffer[position] != rune(')') {
					goto l551
				}
				position++
				{
					position559, tokenIndex559 := position, tokenIndex
					if !_rules[rule_]() {
						goto l559
					}
					goto l560
				l559:
					position, tokenIndex = position559, tokenIndex559
				}
			l560:
				if buffer[position] != rune(')') {
					goto l551
				}
				position++
				add(ruleBasionymAuthorship2Parens, position552)
			}
			return true
		l551:
			position, tokenIndex = position551, tokenIndex551
			return false
		},
		/* 77 AuthorsGroup <- <(AuthorsTeam (_ (AuthorEmend / AuthorEx) AuthorsTeam)?)> */
		func() bool {
			position561, tokenIndex561 := position, tokenIndex
			{
				position562 := position
				if !_rules[ruleAuthorsTeam]() {
					goto l561
				}
				{
					position563, tokenIndex563 := position, tokenIndex
					if !_rules[rule_]() {
						goto l563
					}
					{
						position565, tokenIndex565 := position, tokenIndex
						if !_rules[ruleAuthorEmend]() {
							goto l566
						}
						goto l565
					l566:
						position, tokenIndex = position565, tokenIndex565
						if !_rules[ruleAuthorEx]() {
							goto l563
						}
					}
				l565:
					if !_rules[ruleAuthorsTeam]() {
						goto l563
					}
					goto l564
				l563:
					position, tokenIndex = position563, tokenIndex563
				}
			l564:
				add(ruleAuthorsGroup, position562)
			}
			return true
		l561:
			position, tokenIndex = position561, tokenIndex561
			return false
		},
		/* 78 AuthorsTeam <- <(Author (AuthorSep Author)* (_? ','? _? Year)?)> */
		func() bool {
			position567, tokenIndex567 := position, tokenIndex
			{
				position568 := position
				if !_rules[ruleAuthor]() {
					goto l567
				}
			l569:
				{
					position570, tokenIndex570 := position, tokenIndex
					if !_rules[ruleAuthorSep]() {
						goto l570
					}
					if !_rules[ruleAuthor]() {
						goto l570
					}
					goto l569
				l570:
					position, tokenIndex = position570, tokenIndex570
				}
				{
					position571, tokenIndex571 := position, tokenIndex
					{
						position573, tokenIndex573 := position, tokenIndex
						if !_rules[rule_]() {
							goto l573
						}
						goto l574
					l573:
						position, tokenIndex = position573, tokenIndex573
					}
				l574:
					{
						position575, tokenIndex575 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l575
						}
						position++
						goto l576
					l575:
						position, tokenIndex = position575, tokenIndex575
					}
				l576:
					{
						position577, tokenIndex577 := position, tokenIndex
						if !_rules[rule_]() {
							goto l577
						}
						goto l578
					l577:
						position, tokenIndex = position577, tokenIndex577
					}
				l578:
					if !_rules[ruleYear]() {
						goto l571
					}
					goto l572
				l571:
					position, tokenIndex = position571, tokenIndex571
				}
			l572:
				add(ruleAuthorsTeam, position568)
			}
			return true
		l567:
			position, tokenIndex = position567, tokenIndex567
			return false
		},
		/* 79 AuthorSep <- <(AuthorSep1 / AuthorSep2)> */
		func() bool {
			position579, tokenIndex579 := position, tokenIndex
			{
				position580 := position
				{
					position581, tokenIndex581 := position, tokenIndex
					if !_rules[ruleAuthorSep1]() {
						goto l582
					}
					goto l581
				l582:
					position, tokenIndex = position581, tokenIndex581
					if !_rules[ruleAuthorSep2]() {
						goto l579
					}
				}
			l581:
				add(ruleAuthorSep, position580)
			}
			return true
		l579:
			position, tokenIndex = position579, tokenIndex579
			return false
		},
		/* 80 AuthorSep1 <- <(_? (',' _)? ('&' / AuthorSepSpanish / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd')) _?)> */
		func() bool {
			position583, tokenIndex583 := position, tokenIndex
			{
				position584 := position
				{
					position585, tokenIndex585 := position, tokenIndex
					if !_rules[rule_]() {
						goto l585
					}
					goto l586
				l585:
					position, tokenIndex = position585, tokenIndex585
				}
			l586:
				{
					position587, tokenIndex587 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l587
					}
					position++
					if !_rules[rule_]() {
						goto l587
					}
					goto l588
				l587:
					position, tokenIndex = position587, tokenIndex587
				}
			l588:
				{
					position589, tokenIndex589 := position, tokenIndex
					if buffer[position] != rune('&') {
						goto l590
					}
					position++
					goto l589
				l590:
					position, tokenIndex = position589, tokenIndex589
					if !_rules[ruleAuthorSepSpanish]() {
						goto l591
					}
					goto l589
				l591:
					position, tokenIndex = position589, tokenIndex589
					if buffer[position] != rune('e') {
						goto l592
					}
					position++
					if buffer[position] != rune('t') {
						goto l592
					}
					position++
					goto l589
				l592:
					position, tokenIndex = position589, tokenIndex589
					if buffer[position] != rune('a') {
						goto l593
					}
					position++
					if buffer[position] != rune('n') {
						goto l593
					}
					position++
					if buffer[position] != rune('d') {
						goto l593
					}
					position++
					goto l589
				l593:
					position, tokenIndex = position589, tokenIndex589
					if buffer[position] != rune('a') {
						goto l583
					}
					position++
					if buffer[position] != rune('p') {
						goto l583
					}
					position++
					if buffer[position] != rune('u') {
						goto l583
					}
					position++
					if buffer[position] != rune('d') {
						goto l583
					}
					position++
				}
			l589:
				{
					position594, tokenIndex594 := position, tokenIndex
					if !_rules[rule_]() {
						goto l594
					}
					goto l595
				l594:
					position, tokenIndex = position594, tokenIndex594
				}
			l595:
				add(ruleAuthorSep1, position584)
			}
			return true
		l583:
			position, tokenIndex = position583, tokenIndex583
			return false
		},
		/* 81 AuthorSep2 <- <(_? ',' _?)> */
		func() bool {
			position596, tokenIndex596 := position, tokenIndex
			{
				position597 := position
				{
					position598, tokenIndex598 := position, tokenIndex
					if !_rules[rule_]() {
						goto l598
					}
					goto l599
				l598:
					position, tokenIndex = position598, tokenIndex598
				}
			l599:
				if buffer[position] != rune(',') {
					goto l596
				}
				position++
				{
					position600, tokenIndex600 := position, tokenIndex
					if !_rules[rule_]() {
						goto l600
					}
					goto l601
				l600:
					position, tokenIndex = position600, tokenIndex600
				}
			l601:
				add(ruleAuthorSep2, position597)
			}
			return true
		l596:
			position, tokenIndex = position596, tokenIndex596
			return false
		},
		/* 82 AuthorSepSpanish <- <(_? 'y' _?)> */
		func() bool {
			position602, tokenIndex602 := position, tokenIndex
			{
				position603 := position
				{
					position604, tokenIndex604 := position, tokenIndex
					if !_rules[rule_]() {
						goto l604
					}
					goto l605
				l604:
					position, tokenIndex = position604, tokenIndex604
				}
			l605:
				if buffer[position] != rune('y') {
					goto l602
				}
				position++
				{
					position606, tokenIndex606 := position, tokenIndex
					if !_rules[rule_]() {
						goto l606
					}
					goto l607
				l606:
					position, tokenIndex = position606, tokenIndex606
				}
			l607:
				add(ruleAuthorSepSpanish, position603)
			}
			return true
		l602:
			position, tokenIndex = position602, tokenIndex602
			return false
		},
		/* 83 AuthorEx <- <((('e' 'x' '.'?) / ('i' 'n')) _)> */
		func() bool {
			position608, tokenIndex608 := position, tokenIndex
			{
				position609 := position
				{
					position610, tokenIndex610 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l611
					}
					position++
					if buffer[position] != rune('x') {
						goto l611
					}
					position++
					{
						position612, tokenIndex612 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l612
						}
						position++
						goto l613
					l612:
						position, tokenIndex = position612, tokenIndex612
					}
				l613:
					goto l610
				l611:
					position, tokenIndex = position610, tokenIndex610
					if buffer[position] != rune('i') {
						goto l608
					}
					position++
					if buffer[position] != rune('n') {
						goto l608
					}
					position++
				}
			l610:
				if !_rules[rule_]() {
					goto l608
				}
				add(ruleAuthorEx, position609)
			}
			return true
		l608:
			position, tokenIndex = position608, tokenIndex608
			return false
		},
		/* 84 AuthorEmend <- <('e' 'm' 'e' 'n' 'd' '.'? _)> */
		func() bool {
			position614, tokenIndex614 := position, tokenIndex
			{
				position615 := position
				if buffer[position] != rune('e') {
					goto l614
				}
				position++
				if buffer[position] != rune('m') {
					goto l614
				}
				position++
				if buffer[position] != rune('e') {
					goto l614
				}
				position++
				if buffer[position] != rune('n') {
					goto l614
				}
				position++
				if buffer[position] != rune('d') {
					goto l614
				}
				position++
				{
					position616, tokenIndex616 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l616
					}
					position++
					goto l617
				l616:
					position, tokenIndex = position616, tokenIndex616
				}
			l617:
				if !_rules[rule_]() {
					goto l614
				}
				add(ruleAuthorEmend, position615)
			}
			return true
		l614:
			position, tokenIndex = position614, tokenIndex614
			return false
		},
		/* 85 Author <- <((Author0 / Author1 / Author2 / UnknownAuthor) (_ AuthorEtAl)?)> */
		func() bool {
			position618, tokenIndex618 := position, tokenIndex
			{
				position619 := position
				{
					position620, tokenIndex620 := position, tokenIndex
					if !_rules[ruleAuthor0]() {
						goto l621
					}
					goto l620
				l621:
					position, tokenIndex = position620, tokenIndex620
					if !_rules[ruleAuthor1]() {
						goto l622
					}
					goto l620
				l622:
					position, tokenIndex = position620, tokenIndex620
					if !_rules[ruleAuthor2]() {
						goto l623
					}
					goto l620
				l623:
					position, tokenIndex = position620, tokenIndex620
					if !_rules[ruleUnknownAuthor]() {
						goto l618
					}
				}
			l620:
				{
					position624, tokenIndex624 := position, tokenIndex
					if !_rules[rule_]() {
						goto l624
					}
					if !_rules[ruleAuthorEtAl]() {
						goto l624
					}
					goto l625
				l624:
					position, tokenIndex = position624, tokenIndex624
				}
			l625:
				add(ruleAuthor, position619)
			}
			return true
		l618:
			position, tokenIndex = position618, tokenIndex618
			return false
		},
		/* 86 Author0 <- <(Author2 FiliusFNoSpace)> */
		func() bool {
			position626, tokenIndex626 := position, tokenIndex
			{
				position627 := position
				if !_rules[ruleAuthor2]() {
					goto l626
				}
				if !_rules[ruleFiliusFNoSpace]() {
					goto l626
				}
				add(ruleAuthor0, position627)
			}
			return true
		l626:
			position, tokenIndex = position626, tokenIndex626
			return false
		},
		/* 87 Author1 <- <(Author2 _? (Filius / AuthorSuffix))> */
		func() bool {
			position628, tokenIndex628 := position, tokenIndex
			{
				position629 := position
				if !_rules[ruleAuthor2]() {
					goto l628
				}
				{
					position630, tokenIndex630 := position, tokenIndex
					if !_rules[rule_]() {
						goto l630
					}
					goto l631
				l630:
					position, tokenIndex = position630, tokenIndex630
				}
			l631:
				{
					position632, tokenIndex632 := position, tokenIndex
					if !_rules[ruleFilius]() {
						goto l633
					}
					goto l632
				l633:
					position, tokenIndex = position632, tokenIndex632
					if !_rules[ruleAuthorSuffix]() {
						goto l628
					}
				}
			l632:
				add(ruleAuthor1, position629)
			}
			return true
		l628:
			position, tokenIndex = position628, tokenIndex628
			return false
		},
		/* 88 Author2 <- <(AuthorWord (_? AuthorWord)*)> */
		func() bool {
			position634, tokenIndex634 := position, tokenIndex
			{
				position635 := position
				if !_rules[ruleAuthorWord]() {
					goto l634
				}
			l636:
				{
					position637, tokenIndex637 := position, tokenIndex
					{
						position638, tokenIndex638 := position, tokenIndex
						if !_rules[rule_]() {
							goto l638
						}
						goto l639
					l638:
						position, tokenIndex = position638, tokenIndex638
					}
				l639:
					if !_rules[ruleAuthorWord]() {
						goto l637
					}
					goto l636
				l637:
					position, tokenIndex = position637, tokenIndex637
				}
				add(ruleAuthor2, position635)
			}
			return true
		l634:
			position, tokenIndex = position634, tokenIndex634
			return false
		},
		/* 89 UnknownAuthor <- <('?' / ((('a' 'u' 'c' 't') / ('a' 'n' 'o' 'n')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position640, tokenIndex640 := position, tokenIndex
			{
				position641 := position
				{
					position642, tokenIndex642 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l643
					}
					position++
					goto l642
				l643:
					position, tokenIndex = position642, tokenIndex642
					{
						position644, tokenIndex644 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l645
						}
						position++
						if buffer[position] != rune('u') {
							goto l645
						}
						position++
						if buffer[position] != rune('c') {
							goto l645
						}
						position++
						if buffer[position] != rune('t') {
							goto l645
						}
						position++
						goto l644
					l645:
						position, tokenIndex = position644, tokenIndex644
						if buffer[position] != rune('a') {
							goto l640
						}
						position++
						if buffer[position] != rune('n') {
							goto l640
						}
						position++
						if buffer[position] != rune('o') {
							goto l640
						}
						position++
						if buffer[position] != rune('n') {
							goto l640
						}
						position++
					}
				l644:
					{
						position646, tokenIndex646 := position, tokenIndex
						{
							position648, tokenIndex648 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l647
							}
							position, tokenIndex = position648, tokenIndex648
						}
						goto l646
					l647:
						position, tokenIndex = position646, tokenIndex646
						if buffer[position] != rune('.') {
							goto l640
						}
						position++
					}
				l646:
				}
			l642:
				add(ruleUnknownAuthor, position641)
			}
			return true
		l640:
			position, tokenIndex = position640, tokenIndex640
			return false
		},
		/* 90 AuthorWord <- <(!(('b' / 'B') ('o' / 'O') ('l' / 'L') ('d' / 'D') ':') (AuthorDashInitials / AuthorWord2 / AuthorWord3 / AuthorPrefix))> */
		func() bool {
			position649, tokenIndex649 := position, tokenIndex
			{
				position650 := position
				{
					position651, tokenIndex651 := position, tokenIndex
					{
						position652, tokenIndex652 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l653
						}
						position++
						goto l652
					l653:
						position, tokenIndex = position652, tokenIndex652
						if buffer[position] != rune('B') {
							goto l651
						}
						position++
					}
				l652:
					{
						position654, tokenIndex654 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l655
						}
						position++
						goto l654
					l655:
						position, tokenIndex = position654, tokenIndex654
						if buffer[position] != rune('O') {
							goto l651
						}
						position++
					}
				l654:
					{
						position656, tokenIndex656 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l657
						}
						position++
						goto l656
					l657:
						position, tokenIndex = position656, tokenIndex656
						if buffer[position] != rune('L') {
							goto l651
						}
						position++
					}
				l656:
					{
						position658, tokenIndex658 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l659
						}
						position++
						goto l658
					l659:
						position, tokenIndex = position658, tokenIndex658
						if buffer[position] != rune('D') {
							goto l651
						}
						position++
					}
				l658:
					if buffer[position] != rune(':') {
						goto l651
					}
					position++
					goto l649
				l651:
					position, tokenIndex = position651, tokenIndex651
				}
				{
					position660, tokenIndex660 := position, tokenIndex
					if !_rules[ruleAuthorDashInitials]() {
						goto l661
					}
					goto l660
				l661:
					position, tokenIndex = position660, tokenIndex660
					if !_rules[ruleAuthorWord2]() {
						goto l662
					}
					goto l660
				l662:
					position, tokenIndex = position660, tokenIndex660
					if !_rules[ruleAuthorWord3]() {
						goto l663
					}
					goto l660
				l663:
					position, tokenIndex = position660, tokenIndex660
					if !_rules[ruleAuthorPrefix]() {
						goto l649
					}
				}
			l660:
				add(ruleAuthorWord, position650)
			}
			return true
		l649:
			position, tokenIndex = position649, tokenIndex649
			return false
		},
		/* 91 AuthorEtAl <- <(('a' 'r' 'g' '.') / ('e' 't' ' ' 'a' 'l' '.' '{' '?' '}') / ((('e' 't') / '&') (' ' 'a' 'l') '.'?))> */
		func() bool {
			position664, tokenIndex664 := position, tokenIndex
			{
				position665 := position
				{
					position666, tokenIndex666 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l667
					}
					position++
					if buffer[position] != rune('r') {
						goto l667
					}
					position++
					if buffer[position] != rune('g') {
						goto l667
					}
					position++
					if buffer[position] != rune('.') {
						goto l667
					}
					position++
					goto l666
				l667:
					position, tokenIndex = position666, tokenIndex666
					if buffer[position] != rune('e') {
						goto l668
					}
					position++
					if buffer[position] != rune('t') {
						goto l668
					}
					position++
					if buffer[position] != rune(' ') {
						goto l668
					}
					position++
					if buffer[position] != rune('a') {
						goto l668
					}
					position++
					if buffer[position] != rune('l') {
						goto l668
					}
					position++
					if buffer[position] != rune('.') {
						goto l668
					}
					position++
					if buffer[position] != rune('{') {
						goto l668
					}
					position++
					if buffer[position] != rune('?') {
						goto l668
					}
					position++
					if buffer[position] != rune('}') {
						goto l668
					}
					position++
					goto l666
				l668:
					position, tokenIndex = position666, tokenIndex666
					{
						position669, tokenIndex669 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l670
						}
						position++
						if buffer[position] != rune('t') {
							goto l670
						}
						position++
						goto l669
					l670:
						position, tokenIndex = position669, tokenIndex669
						if buffer[position] != rune('&') {
							goto l664
						}
						position++
					}
				l669:
					if buffer[position] != rune(' ') {
						goto l664
					}
					position++
					if buffer[position] != rune('a') {
						goto l664
					}
					position++
					if buffer[position] != rune('l') {
						goto l664
					}
					position++
					{
						position671, tokenIndex671 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l671
						}
						position++
						goto l672
					l671:
						position, tokenIndex = position671, tokenIndex671
					}
				l672:
				}
			l666:
				add(ruleAuthorEtAl, position665)
			}
			return true
		l664:
			position, tokenIndex = position664, tokenIndex664
			return false
		},
		/* 92 AuthorWord2 <- <(AuthorWord3 Dash AuthorWordSoft)> */
		func() bool {
			position673, tokenIndex673 := position, tokenIndex
			{
				position674 := position
				if !_rules[ruleAuthorWord3]() {
					goto l673
				}
				if !_rules[ruleDash]() {
					goto l673
				}
				if !_rules[ruleAuthorWordSoft]() {
					goto l673
				}
				add(ruleAuthorWord2, position674)
			}
			return true
		l673:
			position, tokenIndex = position673, tokenIndex673
			return false
		},
		/* 93 AuthorWord3 <- <(AuthorPrefixGlued? (AllCapsAuthorWord / CapAuthorWord) '.'?)> */
		func() bool {
			position675, tokenIndex675 := position, tokenIndex
			{
				position676 := position
				{
					position677, tokenIndex677 := position, tokenIndex
					if !_rules[ruleAuthorPrefixGlued]() {
						goto l677
					}
					goto l678
				l677:
					position, tokenIndex = position677, tokenIndex677
				}
			l678:
				{
					position679, tokenIndex679 := position, tokenIndex
					if !_rules[ruleAllCapsAuthorWord]() {
						goto l680
					}
					goto l679
				l680:
					position, tokenIndex = position679, tokenIndex679
					if !_rules[ruleCapAuthorWord]() {
						goto l675
					}
				}
			l679:
				{
					position681, tokenIndex681 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l681
					}
					position++
					goto l682
				l681:
					position, tokenIndex = position681, tokenIndex681
				}
			l682:
				add(ruleAuthorWord3, position676)
			}
			return true
		l675:
			position, tokenIndex = position675, tokenIndex675
			return false
		},
		/* 94 AuthorDashInitials <- <(AuthorUpperChar '.'? Dash AuthorUpperChar '.'?)> */
		func() bool {
			position683, tokenIndex683 := position, tokenIndex
			{
				position684 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l683
				}
				{
					position685, tokenIndex685 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l685
					}
					position++
					goto l686
				l685:
					position, tokenIndex = position685, tokenIndex685
				}
			l686:
				if !_rules[ruleDash]() {
					goto l683
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l683
				}
				{
					position687, tokenIndex687 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l687
					}
					position++
					goto l688
				l687:
					position, tokenIndex = position687, tokenIndex687
				}
			l688:
				add(ruleAuthorDashInitials, position684)
			}
			return true
		l683:
			position, tokenIndex = position683, tokenIndex683
			return false
		},
		/* 95 AuthorWordSoft <- <(((AuthorUpperChar (AuthorUpperChar+ / AuthorLowerChar+)) / AuthorLowerChar+) '.'?)> */
		func() bool {
			position689, tokenIndex689 := position, tokenIndex
			{
				position690 := position
				{
					position691, tokenIndex691 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l692
					}
					{
						position693, tokenIndex693 := position, tokenIndex
						if !_rules[ruleAuthorUpperChar]() {
							goto l694
						}
					l695:
						{
							position696, tokenIndex696 := position, tokenIndex
							if !_rules[ruleAuthorUpperChar]() {
								goto l696
							}
							goto l695
						l696:
							position, tokenIndex = position696, tokenIndex696
						}
						goto l693
					l694:
						position, tokenIndex = position693, tokenIndex693
						if !_rules[ruleAuthorLowerChar]() {
							goto l692
						}
					l697:
						{
							position698, tokenIndex698 := position, tokenIndex
							if !_rules[ruleAuthorLowerChar]() {
								goto l698
							}
							goto l697
						l698:
							position, tokenIndex = position698, tokenIndex698
						}
					}
				l693:
					goto l691
				l692:
					position, tokenIndex = position691, tokenIndex691
					if !_rules[ruleAuthorLowerChar]() {
						goto l689
					}
				l699:
					{
						position700, tokenIndex700 := position, tokenIndex
						if !_rules[ruleAuthorLowerChar]() {
							goto l700
						}
						goto l699
					l700:
						position, tokenIndex = position700, tokenIndex700
					}
				}
			l691:
				{
					position701, tokenIndex701 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l701
					}
					position++
					goto l702
				l701:
					position, tokenIndex = position701, tokenIndex701
				}
			l702:
				add(ruleAuthorWordSoft, position690)
			}
			return true
		l689:
			position, tokenIndex = position689, tokenIndex689
			return false
		},
		/* 96 CapAuthorWord <- <(AuthorUpperChar AuthorLowerChar*)> */
		func() bool {
			position703, tokenIndex703 := position, tokenIndex
			{
				position704 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l703
				}
			l705:
				{
					position706, tokenIndex706 := position, tokenIndex
					if !_rules[ruleAuthorLowerChar]() {
						goto l706
					}
					goto l705
				l706:
					position, tokenIndex = position706, tokenIndex706
				}
				add(ruleCapAuthorWord, position704)
			}
			return true
		l703:
			position, tokenIndex = position703, tokenIndex703
			return false
		},
		/* 97 AllCapsAuthorWord <- <(AuthorUpperChar AuthorUpperChar+)> */
		func() bool {
			position707, tokenIndex707 := position, tokenIndex
			{
				position708 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l707
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l707
				}
			l709:
				{
					position710, tokenIndex710 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l710
					}
					goto l709
				l710:
					position, tokenIndex = position710, tokenIndex710
				}
				add(ruleAllCapsAuthorWord, position708)
			}
			return true
		l707:
			position, tokenIndex = position707, tokenIndex707
			return false
		},
		/* 98 Filius <- <(FiliusF / ('f' 'i' 'l' '.') / ('f' 'i' 'l' 'i' 'u' 's'))> */
		func() bool {
			position711, tokenIndex711 := position, tokenIndex
			{
				position712 := position
				{
					position713, tokenIndex713 := position, tokenIndex
					if !_rules[ruleFiliusF]() {
						goto l714
					}
					goto l713
				l714:
					position, tokenIndex = position713, tokenIndex713
					if buffer[position] != rune('f') {
						goto l715
					}
					position++
					if buffer[position] != rune('i') {
						goto l715
					}
					position++
					if buffer[position] != rune('l') {
						goto l715
					}
					position++
					if buffer[position] != rune('.') {
						goto l715
					}
					position++
					goto l713
				l715:
					position, tokenIndex = position713, tokenIndex713
					if buffer[position] != rune('f') {
						goto l711
					}
					position++
					if buffer[position] != rune('i') {
						goto l711
					}
					position++
					if buffer[position] != rune('l') {
						goto l711
					}
					position++
					if buffer[position] != rune('i') {
						goto l711
					}
					position++
					if buffer[position] != rune('u') {
						goto l711
					}
					position++
					if buffer[position] != rune('s') {
						goto l711
					}
					position++
				}
			l713:
				add(ruleFilius, position712)
			}
			return true
		l711:
			position, tokenIndex = position711, tokenIndex711
			return false
		},
		/* 99 FiliusF <- <('f' '.' !(_ Word))> */
		func() bool {
			position716, tokenIndex716 := position, tokenIndex
			{
				position717 := position
				if buffer[position] != rune('f') {
					goto l716
				}
				position++
				if buffer[position] != rune('.') {
					goto l716
				}
				position++
				{
					position718, tokenIndex718 := position, tokenIndex
					if !_rules[rule_]() {
						goto l718
					}
					if !_rules[ruleWord]() {
						goto l718
					}
					goto l716
				l718:
					position, tokenIndex = position718, tokenIndex718
				}
				add(ruleFiliusF, position717)
			}
			return true
		l716:
			position, tokenIndex = position716, tokenIndex716
			return false
		},
		/* 100 FiliusFNoSpace <- <('f' '.')> */
		func() bool {
			position719, tokenIndex719 := position, tokenIndex
			{
				position720 := position
				if buffer[position] != rune('f') {
					goto l719
				}
				position++
				if buffer[position] != rune('.') {
					goto l719
				}
				position++
				add(ruleFiliusFNoSpace, position720)
			}
			return true
		l719:
			position, tokenIndex = position719, tokenIndex719
			return false
		},
		/* 101 AuthorSuffix <- <('b' 'i' 's')> */
		func() bool {
			position721, tokenIndex721 := position, tokenIndex
			{
				position722 := position
				if buffer[position] != rune('b') {
					goto l721
				}
				position++
				if buffer[position] != rune('i') {
					goto l721
				}
				position++
				if buffer[position] != rune('s') {
					goto l721
				}
				position++
				add(ruleAuthorSuffix, position722)
			}
			return true
		l721:
			position, tokenIndex = position721, tokenIndex721
			return false
		},
		/* 102 AuthorPrefixGlued <- <(('d' / 'O' / 'L' / ('M' 'c') / 'M') Apostrophe)> */
		func() bool {
			position723, tokenIndex723 := position, tokenIndex
			{
				position724 := position
				{
					position725, tokenIndex725 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l726
					}
					position++
					goto l725
				l726:
					position, tokenIndex = position725, tokenIndex725
					if buffer[position] != rune('O') {
						goto l727
					}
					position++
					goto l725
				l727:
					position, tokenIndex = position725, tokenIndex725
					if buffer[position] != rune('L') {
						goto l728
					}
					position++
					goto l725
				l728:
					position, tokenIndex = position725, tokenIndex725
					if buffer[position] != rune('M') {
						goto l729
					}
					position++
					if buffer[position] != rune('c') {
						goto l729
					}
					position++
					goto l725
				l729:
					position, tokenIndex = position725, tokenIndex725
					if buffer[position] != rune('M') {
						goto l723
					}
					position++
				}
			l725:
				if !_rules[ruleApostrophe]() {
					goto l723
				}
				add(ruleAuthorPrefixGlued, position724)
			}
			return true
		l723:
			position, tokenIndex = position723, tokenIndex723
			return false
		},
		/* 103 AuthorPrefix <- <(AuthorPrefix1 / AuthorPrefix2)> */
		func() bool {
			position730, tokenIndex730 := position, tokenIndex
			{
				position731 := position
				{
					position732, tokenIndex732 := position, tokenIndex
					if !_rules[ruleAuthorPrefix1]() {
						goto l733
					}
					goto l732
				l733:
					position, tokenIndex = position732, tokenIndex732
					if !_rules[ruleAuthorPrefix2]() {
						goto l730
					}
				}
			l732:
				add(ruleAuthorPrefix, position731)
			}
			return true
		l730:
			position, tokenIndex = position730, tokenIndex730
			return false
		},
		/* 104 AuthorPrefix2 <- <(('v' '.' (_? ('d' '.'))?) / (Apostrophe 't'))> */
		func() bool {
			position734, tokenIndex734 := position, tokenIndex
			{
				position735 := position
				{
					position736, tokenIndex736 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l737
					}
					position++
					if buffer[position] != rune('.') {
						goto l737
					}
					position++
					{
						position738, tokenIndex738 := position, tokenIndex
						{
							position740, tokenIndex740 := position, tokenIndex
							if !_rules[rule_]() {
								goto l740
							}
							goto l741
						l740:
							position, tokenIndex = position740, tokenIndex740
						}
					l741:
						if buffer[position] != rune('d') {
							goto l738
						}
						position++
						if buffer[position] != rune('.') {
							goto l738
						}
						position++
						goto l739
					l738:
						position, tokenIndex = position738, tokenIndex738
					}
				l739:
					goto l736
				l737:
					position, tokenIndex = position736, tokenIndex736
					if !_rules[ruleApostrophe]() {
						goto l734
					}
					if buffer[position] != rune('t') {
						goto l734
					}
					position++
				}
			l736:
				add(ruleAuthorPrefix2, position735)
			}
			return true
		l734:
			position, tokenIndex = position734, tokenIndex734
			return false
		},
		/* 105 AuthorPrefix1 <- <((('a' 'b') / ('a' 'f') / ('b' 'i' 's') / ('d' 'a') / ('d' 'e' 'r') / ('d' 'e' 's') / ('d' 'e' 'n') / ('d' 'e' 'l') / ('d' 'e' 'l' 'l' 'a') / ('d' 'e' 'l' 'a') / ('d' 'e') / ('d' 'i') / ('d' 'u') / ('e' 'l') / ('l' 'a') / ('l' 'e') / ('t' 'e' 'r') / ('v' 'a' 'n') / ('d' Apostrophe) / ('i' 'n' Apostrophe 't') / ('z' 'u' 'r') / ('z' 'u') / ('v' 'o' 'n' (_ (('d' '.') / ('d' 'e' 'm')))?) / ('v' (_ 'd')?)) &_)> */
		func() bool {
			position742, tokenIndex742 := position, tokenIndex
			{
				position743 := position
				{
					position744, tokenIndex744 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l745
					}
					position++
					if buffer[position] != rune('b') {
						goto l745
					}
					position++
					goto l744
				l745:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('a') {
						goto l746
					}
					position++
					if buffer[position] != rune('f') {
						goto l746
					}
					position++
					goto l744
				l746:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('b') {
						goto l747
					}
					position++
					if buffer[position] != rune('i') {
						goto l747
					}
					position++
					if buffer[position] != rune('s') {
						goto l747
					}
					position++
					goto l744
				l747:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('d') {
						goto l748
					}
					position++
					if buffer[position] != rune('a') {
						goto l748
					}
					position++
					goto l744
				l748:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('d') {
						goto l749
					}
					position++
					if buffer[position] != rune('e') {
						goto l749
					}
					position++
					if buffer[position] != rune('r') {
						goto l749
					}
					position++
					goto l744
				l749:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('d') {
						goto l750
					}
					position++
					if buffer[position] != rune('e') {
						goto l750
					}
					position++
					if buffer[position] != rune('s') {
						goto l750
					}
					position++
					goto l744
				l750:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('d') {
						goto l751
					}
					position++
					if buffer[position] != rune('e') {
						goto l751
					}
					position++
					if buffer[position] != rune('n') {
						goto l751
					}
					position++
					goto l744
				l751:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('d') {
						goto l752
					}
					position++
					if buffer[position] != rune('e') {
						goto l752
					}
					position++
					if buffer[position] != rune('l') {
						goto l752
					}
					position++
					goto l744
				l752:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('d') {
						goto l753
					}
					position++
					if buffer[position] != rune('e') {
						goto l753
					}
					position++
					if buffer[position] != rune('l') {
						goto l753
					}
					position++
					if buffer[position] != rune('l') {
						goto l753
					}
					position++
					if buffer[position] != rune('a') {
						goto l753
					}
					position++
					goto l744
				l753:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('d') {
						goto l754
					}
					position++
					if buffer[position] != rune('e') {
						goto l754
					}
					position++
					if buffer[position] != rune('l') {
						goto l754
					}
					position++
					if buffer[position] != rune('a') {
						goto l754
					}
					position++
					goto l744
				l754:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('d') {
						goto l755
					}
					position++
					if buffer[position] != rune('e') {
						goto l755
					}
					position++
					goto l744
				l755:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('d') {
						goto l756
					}
					position++
					if buffer[position] != rune('i') {
						goto l756
					}
					position++
					goto l744
				l756:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('d') {
						goto l757
					}
					position++
					if buffer[position] != rune('u') {
						goto l757
					}
					position++
					goto l744
				l757:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('e') {
						goto l758
					}
					position++
					if buffer[position] != rune('l') {
						goto l758
					}
					position++
					goto l744
				l758:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('l') {
						goto l759
					}
					position++
					if buffer[position] != rune('a') {
						goto l759
					}
					position++
					goto l744
				l759:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('l') {
						goto l760
					}
					position++
					if buffer[position] != rune('e') {
						goto l760
					}
					position++
					goto l744
				l760:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('t') {
						goto l761
					}
					position++
					if buffer[position] != rune('e') {
						goto l761
					}
					position++
					if buffer[position] != rune('r') {
						goto l761
					}
					position++
					goto l744
				l761:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('v') {
						goto l762
					}
					position++
					if buffer[position] != rune('a') {
						goto l762
					}
					position++
					if buffer[position] != rune('n') {
						goto l762
					}
					position++
					goto l744
				l762:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('d') {
						goto l763
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l763
					}
					goto l744
				l763:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('i') {
						goto l764
					}
					position++
					if buffer[position] != rune('n') {
						goto l764
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l764
					}
					if buffer[position] != rune('t') {
						goto l764
					}
					position++
					goto l744
				l764:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('z') {
						goto l765
					}
					position++
					if buffer[position] != rune('u') {
						goto l765
					}
					position++
					if buffer[position] != rune('r') {
						goto l765
					}
					position++
					goto l744
				l765:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('z') {
						goto l766
					}
					position++
					if buffer[position] != rune('u') {
						goto l766
					}
					position++
					goto l744
				l766:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('v') {
						goto l767
					}
					position++
					if buffer[position] != rune('o') {
						goto l767
					}
					position++
					if buffer[position] != rune('n') {
						goto l767
					}
					position++
					{
						position768, tokenIndex768 := position, tokenIndex
						if !_rules[rule_]() {
							goto l768
						}
						{
							position770, tokenIndex770 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l771
							}
							position++
							if buffer[position] != rune('.') {
								goto l771
							}
							position++
							goto l770
						l771:
							position, tokenIndex = position770, tokenIndex770
							if buffer[position] != rune('d') {
								goto l768
							}
							position++
							if buffer[position] != rune('e') {
								goto l768
							}
							position++
							if buffer[position] != rune('m') {
								goto l768
							}
							position++
						}
					l770:
						goto l769
					l768:
						position, tokenIndex = position768, tokenIndex768
					}
				l769:
					goto l744
				l767:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('v') {
						goto l742
					}
					position++
					{
						position772, tokenIndex772 := position, tokenIndex
						if !_rules[rule_]() {
							goto l772
						}
						if buffer[position] != rune('d') {
							goto l772
						}
						position++
						goto l773
					l772:
						position, tokenIndex = position772, tokenIndex772
					}
				l773:
				}
			l744:
				{
					position774, tokenIndex774 := position, tokenIndex
					if !_rules[rule_]() {
						goto l742
					}
					position, tokenIndex = position774, tokenIndex774
				}
				add(ruleAuthorPrefix1, position743)
			}
			return true
		l742:
			position, tokenIndex = position742, tokenIndex742
			return false
		},
		/* 106 AuthorUpperChar <- <(UpperASCII / MiscodedChar / ('À' / 'Á' / 'Â' / 'Ã' / 'Ä' / 'Å' / 'Æ' / 'Ç' / 'È' / 'É' / 'Ê' / 'Ë' / 'Ì' / 'Í' / 'Î' / 'Ï' / 'Ð' / 'Ñ' / 'Ò' / 'Ó' / 'Ô' / 'Õ' / 'Ö' / 'Ø' / 'Ù' / 'Ú' / 'Û' / 'Ü' / 'Ý' / 'Ć' / 'Č' / 'Ď' / 'İ' / 'Ķ' / 'Ĺ' / 'ĺ' / 'Ľ' / 'ľ' / 'Ł' / 'ł' / 'Ņ' / 'Ō' / 'Ő' / 'Œ' / 'Ř' / 'Ś' / 'Ŝ' / 'Ş' / 'Š' / 'Ÿ' / 'Ź' / 'Ż' / 'Ž' / 'ƒ' / 'Ǿ' / 'Ș' / 'Ț'))> */
		func() bool {
			position775, tokenIndex775 := position, tokenIndex
			{
				position776 := position
				{
					position777, tokenIndex777 := position, tokenIndex
					if !_rules[ruleUpperASCII]() {
						goto l778
					}
					goto l777
				l778:
					position, tokenIndex = position777, tokenIndex777
					if !_rules[ruleMiscodedChar]() {
						goto l779
					}
					goto l777
				l779:
					position, tokenIndex = position777, tokenIndex777
					{
						position780, tokenIndex780 := position, tokenIndex
						if buffer[position] != rune('À') {
							goto l781
						}
						position++
						goto l780
					l781:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Á') {
							goto l782
						}
						position++
						goto l780
					l782:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Â') {
							goto l783
						}
						position++
						goto l780
					l783:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ã') {
							goto l784
						}
						position++
						goto l780
					l784:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ä') {
							goto l785
						}
						position++
						goto l780
					l785:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Å') {
							goto l786
						}
						position++
						goto l780
					l786:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Æ') {
							goto l787
						}
						position++
						goto l780
					l787:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ç') {
							goto l788
						}
						position++
						goto l780
					l788:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('È') {
							goto l789
						}
						position++
						goto l780
					l789:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('É') {
							goto l790
						}
						position++
						goto l780
					l790:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ê') {
							goto l791
						}
						position++
						goto l780
					l791:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ë') {
							goto l792
						}
						position++
						goto l780
					l792:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ì') {
							goto l793
						}
						position++
						goto l780
					l793:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Í') {
							goto l794
						}
						position++
						goto l780
					l794:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Î') {
							goto l795
						}
						position++
						goto l780
					l795:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ï') {
							goto l796
						}
						position++
						goto l780
					l796:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ð') {
							goto l797
						}
						position++
						goto l780
					l797:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ñ') {
							goto l798
						}
						position++
						goto l780
					l798:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ò') {
							goto l799
						}
						position++
						goto l780
					l799:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ó') {
							goto l800
						}
						position++
						goto l780
					l800:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ô') {
							goto l801
						}
						position++
						goto l780
					l801:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Õ') {
							goto l802
						}
						position++
						goto l780
					l802:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ö') {
							goto l803
						}
						position++
						goto l780
					l803:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ø') {
							goto l804
						}
						position++
						goto l780
					l804:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ù') {
							goto l805
						}
						position++
						goto l780
					l805:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ú') {
							goto l806
						}
						position++
						goto l780
					l806:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Û') {
							goto l807
						}
						position++
						goto l780
					l807:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ü') {
							goto l808
						}
						position++
						goto l780
					l808:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ý') {
							goto l809
						}
						position++
						goto l780
					l809:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ć') {
							goto l810
						}
						position++
						goto l780
					l810:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Č') {
							goto l811
						}
						position++
						goto l780
					l811:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ď') {
							goto l812
						}
						position++
						goto l780
					l812:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('İ') {
							goto l813
						}
						position++
						goto l780
					l813:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ķ') {
							goto l814
						}
						position++
						goto l780
					l814:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ĺ') {
							goto l815
						}
						position++
						goto l780
					l815:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('ĺ') {
							goto l816
						}
						position++
						goto l780
					l816:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ľ') {
							goto l817
						}
						position++
						goto l780
					l817:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('ľ') {
							goto l818
						}
						position++
						goto l780
					l818:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ł') {
							goto l819
						}
						position++
						goto l780
					l819:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('ł') {
							goto l820
						}
						position++
						goto l780
					l820:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ņ') {
							goto l821
						}
						position++
						goto l780
					l821:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ō') {
							goto l822
						}
						position++
						goto l780
					l822:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ő') {
							goto l823
						}
						position++
						goto l780
					l823:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Œ') {
							goto l824
						}
						position++
						goto l780
					l824:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ř') {
							goto l825
						}
						position++
						goto l780
					l825:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ś') {
							goto l826
						}
						position++
						goto l780
					l826:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ŝ') {
							goto l827
						}
						position++
						goto l780
					l827:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ş') {
							goto l828
						}
						position++
						goto l780
					l828:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Š') {
							goto l829
						}
						position++
						goto l780
					l829:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ÿ') {
							goto l830
						}
						position++
						goto l780
					l830:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ź') {
							goto l831
						}
						position++
						goto l780
					l831:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ż') {
							goto l832
						}
						position++
						goto l780
					l832:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ž') {
							goto l833
						}
						position++
						goto l780
					l833:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('ƒ') {
							goto l834
						}
						position++
						goto l780
					l834:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ǿ') {
							goto l835
						}
						position++
						goto l780
					l835:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ș') {
							goto l836
						}
						position++
						goto l780
					l836:
						position, tokenIndex = position780, tokenIndex780
						if buffer[position] != rune('Ț') {
							goto l775
						}
						position++
					}
				l780:
				}
			l777:
				add(ruleAuthorUpperChar, position776)
			}
			return true
		l775:
			position, tokenIndex = position775, tokenIndex775
			return false
		},
		/* 107 AuthorLowerChar <- <(LowerASCII / MiscodedChar / ('à' / 'á' / 'â' / 'ã' / 'ä' / 'å' / 'æ' / 'ç' / 'è' / 'é' / 'ê' / 'ë' / 'ì' / 'í' / 'î' / 'ï' / 'ð' / 'ñ' / 'ò' / 'ó' / 'ó' / 'ô' / 'õ' / 'ö' / 'ø' / 'ù' / 'ú' / 'û' / 'ü' / 'ý' / 'ÿ' / 'ā' / 'ă' / 'ą' / 'ć' / 'ĉ' / 'č' / 'ď' / 'đ' / '\'' / 'ē' / 'ĕ' / 'ė' / 'ę' / 'ě' / 'ğ' / 'ī' / 'ĭ' / 'İ' / 'ı' / 'ĺ' / 'ľ' / 'ł' / 'ń' / 'ņ' / 'ň' / 'ŏ' / 'ő' / 'œ' / 'ŕ' / 'ř' / 'ś' / 'ş' / 'š' / 'ţ' / 'ť' / 'ũ' / 'ū' / 'ŭ' / 'ů' / 'ű' / 'ź' / 'ż' / 'ž' / 'ſ' / 'ǎ' / 'ǔ' / 'ǧ' / 'ș' / 'ț' / 'ȳ' / 'ß'))> */
		func() bool {
			position837, tokenIndex837 := position, tokenIndex
			{
				position838 := position
				{
					position839, tokenIndex839 := position, tokenIndex
					if !_rules[ruleLowerASCII]() {
						goto l840
					}
					goto l839
				l840:
					position, tokenIndex = position839, tokenIndex839
					if !_rules[ruleMiscodedChar]() {
						goto l841
					}
					goto l839
				l841:
					position, tokenIndex = position839, tokenIndex839
					{
						position842, tokenIndex842 := position, tokenIndex
						if buffer[position] != rune('à') {
							goto l843
						}
						position++
						goto l842
					l843:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('á') {
							goto l844
						}
						position++
						goto l842
					l844:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('â') {
							goto l845
						}
						position++
						goto l842
					l845:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ã') {
							goto l846
						}
						position++
						goto l842
					l846:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ä') {
							goto l847
						}
						position++
						goto l842
					l847:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('å') {
							goto l848
						}
						position++
						goto l842
					l848:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('æ') {
							goto l849
						}
						position++
						goto l842
					l849:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ç') {
							goto l850
						}
						position++
						goto l842
					l850:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('è') {
							goto l851
						}
						position++
						goto l842
					l851:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('é') {
							goto l852
						}
						position++
						goto l842
					l852:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ê') {
							goto l853
						}
						position++
						goto l842
					l853:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ë') {
							goto l854
						}
						position++
						goto l842
					l854:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ì') {
							goto l855
						}
						position++
						goto l842
					l855:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('í') {
							goto l856
						}
						position++
						goto l842
					l856:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('î') {
							goto l857
						}
						position++
						goto l842
					l857:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ï') {
							goto l858
						}
						position++
						goto l842
					l858:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ð') {
							goto l859
						}
						position++
						goto l842
					l859:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ñ') {
							goto l860
						}
						position++
						goto l842
					l860:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ò') {
							goto l861
						}
						position++
						goto l842
					l861:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ó') {
							goto l862
						}
						position++
						goto l842
					l862:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ó') {
							goto l863
						}
						position++
						goto l842
					l863:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ô') {
							goto l864
						}
						position++
						goto l842
					l864:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('õ') {
							goto l865
						}
						position++
						goto l842
					l865:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ö') {
							goto l866
						}
						position++
						goto l842
					l866:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ø') {
							goto l867
						}
						position++
						goto l842
					l867:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ù') {
							goto l868
						}
						position++
						goto l842
					l868:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ú') {
							goto l869
						}
						position++
						goto l842
					l869:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('û') {
							goto l870
						}
						position++
						goto l842
					l870:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ü') {
							goto l871
						}
						position++
						goto l842
					l871:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ý') {
							goto l872
						}
						position++
						goto l842
					l872:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ÿ') {
							goto l873
						}
						position++
						goto l842
					l873:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ā') {
							goto l874
						}
						position++
						goto l842
					l874:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ă') {
							goto l875
						}
						position++
						goto l842
					l875:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ą') {
							goto l876
						}
						position++
						goto l842
					l876:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ć') {
							goto l877
						}
						position++
						goto l842
					l877:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ĉ') {
							goto l878
						}
						position++
						goto l842
					l878:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('č') {
							goto l879
						}
						position++
						goto l842
					l879:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ď') {
							goto l880
						}
						position++
						goto l842
					l880:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('đ') {
							goto l881
						}
						position++
						goto l842
					l881:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('\'') {
							goto l882
						}
						position++
						goto l842
					l882:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ē') {
							goto l883
						}
						position++
						goto l842
					l883:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ĕ') {
							goto l884
						}
						position++
						goto l842
					l884:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ė') {
							goto l885
						}
						position++
						goto l842
					l885:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ę') {
							goto l886
						}
						position++
						goto l842
					l886:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ě') {
							goto l887
						}
						position++
						goto l842
					l887:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ğ') {
							goto l888
						}
						position++
						goto l842
					l888:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ī') {
							goto l889
						}
						position++
						goto l842
					l889:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ĭ') {
							goto l890
						}
						position++
						goto l842
					l890:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('İ') {
							goto l891
						}
						position++
						goto l842
					l891:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ı') {
							goto l892
						}
						position++
						goto l842
					l892:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ĺ') {
							goto l893
						}
						position++
						goto l842
					l893:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ľ') {
							goto l894
						}
						position++
						goto l842
					l894:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ł') {
							goto l895
						}
						position++
						goto l842
					l895:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ń') {
							goto l896
						}
						position++
						goto l842
					l896:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ņ') {
							goto l897
						}
						position++
						goto l842
					l897:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ň') {
							goto l898
						}
						position++
						goto l842
					l898:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ŏ') {
							goto l899
						}
						position++
						goto l842
					l899:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ő') {
							goto l900
						}
						position++
						goto l842
					l900:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('œ') {
							goto l901
						}
						position++
						goto l842
					l901:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ŕ') {
							goto l902
						}
						position++
						goto l842
					l902:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ř') {
							goto l903
						}
						position++
						goto l842
					l903:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ś') {
							goto l904
						}
						position++
						goto l842
					l904:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ş') {
							goto l905
						}
						position++
						goto l842
					l905:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('š') {
							goto l906
						}
						position++
						goto l842
					l906:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ţ') {
							goto l907
						}
						position++
						goto l842
					l907:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ť') {
							goto l908
						}
						position++
						goto l842
					l908:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ũ') {
							goto l909
						}
						position++
						goto l842
					l909:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ū') {
							goto l910
						}
						position++
						goto l842
					l910:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ŭ') {
							goto l911
						}
						position++
						goto l842
					l911:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ů') {
							goto l912
						}
						position++
						goto l842
					l912:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ű') {
							goto l913
						}
						position++
						goto l842
					l913:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ź') {
							goto l914
						}
						position++
						goto l842
					l914:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ż') {
							goto l915
						}
						position++
						goto l842
					l915:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ž') {
							goto l916
						}
						position++
						goto l842
					l916:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ſ') {
							goto l917
						}
						position++
						goto l842
					l917:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ǎ') {
							goto l918
						}
						position++
						goto l842
					l918:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ǔ') {
							goto l919
						}
						position++
						goto l842
					l919:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ǧ') {
							goto l920
						}
						position++
						goto l842
					l920:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ș') {
							goto l921
						}
						position++
						goto l842
					l921:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ț') {
							goto l922
						}
						position++
						goto l842
					l922:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ȳ') {
							goto l923
						}
						position++
						goto l842
					l923:
						position, tokenIndex = position842, tokenIndex842
						if buffer[position] != rune('ß') {
							goto l837
						}
						position++
					}
				l842:
				}
			l839:
				add(ruleAuthorLowerChar, position838)
			}
			return true
		l837:
			position, tokenIndex = position837, tokenIndex837
			return false
		},
		/* 108 Year <- <(YearRange / YearApprox / YearWithParens / YearWithPage / YearWithDot / YearWithChar / YearNum)> */
		func() bool {
			position924, tokenIndex924 := position, tokenIndex
			{
				position925 := position
				{
					position926, tokenIndex926 := position, tokenIndex
					if !_rules[ruleYearRange]() {
						goto l927
					}
					goto l926
				l927:
					position, tokenIndex = position926, tokenIndex926
					if !_rules[ruleYearApprox]() {
						goto l928
					}
					goto l926
				l928:
					position, tokenIndex = position926, tokenIndex926
					if !_rules[ruleYearWithParens]() {
						goto l929
					}
					goto l926
				l929:
					position, tokenIndex = position926, tokenIndex926
					if !_rules[ruleYearWithPage]() {
						goto l930
					}
					goto l926
				l930:
					position, tokenIndex = position926, tokenIndex926
					if !_rules[ruleYearWithDot]() {
						goto l931
					}
					goto l926
				l931:
					position, tokenIndex = position926, tokenIndex926
					if !_rules[ruleYearWithChar]() {
						goto l932
					}
					goto l926
				l932:
					position, tokenIndex = position926, tokenIndex926
					if !_rules[ruleYearNum]() {
						goto l924
					}
				}
			l926:
				add(ruleYear, position925)
			}
			return true
		l924:
			position, tokenIndex = position924, tokenIndex924
			return false
		},
		/* 109 YearRange <- <(YearNum (Dash / Slash) (Nums+ ('a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'l' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z' / '?')*))> */
		func() bool {
			position933, tokenIndex933 := position, tokenIndex
			{
				position934 := position
				if !_rules[ruleYearNum]() {
					goto l933
				}
				{
					position935, tokenIndex935 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l936
					}
					goto l935
				l936:
					position, tokenIndex = position935, tokenIndex935
					if !_rules[ruleSlash]() {
						goto l933
					}
				}
			l935:
				if !_rules[ruleNums]() {
					goto l933
				}
			l937:
				{
					position938, tokenIndex938 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l938
					}
					goto l937
				l938:
					position, tokenIndex = position938, tokenIndex938
				}
			l939:
				{
					position940, tokenIndex940 := position, tokenIndex
					{
						position941, tokenIndex941 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l942
						}
						position++
						goto l941
					l942:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('b') {
							goto l943
						}
						position++
						goto l941
					l943:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('c') {
							goto l944
						}
						position++
						goto l941
					l944:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('d') {
							goto l945
						}
						position++
						goto l941
					l945:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('e') {
							goto l946
						}
						position++
						goto l941
					l946:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('f') {
							goto l947
						}
						position++
						goto l941
					l947:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('g') {
							goto l948
						}
						position++
						goto l941
					l948:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('h') {
							goto l949
						}
						position++
						goto l941
					l949:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('i') {
							goto l950
						}
						position++
						goto l941
					l950:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('j') {
							goto l951
						}
						position++
						goto l941
					l951:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('k') {
							goto l952
						}
						position++
						goto l941
					l952:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('l') {
							goto l953
						}
						position++
						goto l941
					l953:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('m') {
							goto l954
						}
						position++
						goto l941
					l954:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('n') {
							goto l955
						}
						position++
						goto l941
					l955:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('o') {
							goto l956
						}
						position++
						goto l941
					l956:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('p') {
							goto l957
						}
						position++
						goto l941
					l957:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('q') {
							goto l958
						}
						position++
						goto l941
					l958:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('r') {
							goto l959
						}
						position++
						goto l941
					l959:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('s') {
							goto l960
						}
						position++
						goto l941
					l960:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('t') {
							goto l961
						}
						position++
						goto l941
					l961:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('u') {
							goto l962
						}
						position++
						goto l941
					l962:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('v') {
							goto l963
						}
						position++
						goto l941
					l963:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('w') {
							goto l964
						}
						position++
						goto l941
					l964:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('x') {
							goto l965
						}
						position++
						goto l941
					l965:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('y') {
							goto l966
						}
						position++
						goto l941
					l966:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('z') {
							goto l967
						}
						position++
						goto l941
					l967:
						position, tokenIndex = position941, tokenIndex941
						if buffer[position] != rune('?') {
							goto l940
						}
						position++
					}
				l941:
					goto l939
				l940:
					position, tokenIndex = position940, tokenIndex940
				}
				add(ruleYearRange, position934)
			}
			return true
		l933:
			position, tokenIndex = position933, tokenIndex933
			return false
		},
		/* 110 YearWithDot <- <(YearNum '.')> */
		func() bool {
			position968, tokenIndex968 := position, tokenIndex
			{
				position969 := position
				if !_rules[ruleYearNum]() {
					goto l968
				}
				if buffer[position] != rune('.') {
					goto l968
				}
				position++
				add(ruleYearWithDot, position969)
			}
			return true
		l968:
			position, tokenIndex = position968, tokenIndex968
			return false
		},
		/* 111 YearApprox <- <('[' _? YearNum _? ']')> */
		func() bool {
			position970, tokenIndex970 := position, tokenIndex
			{
				position971 := position
				if buffer[position] != rune('[') {
					goto l970
				}
				position++
				{
					position972, tokenIndex972 := position, tokenIndex
					if !_rules[rule_]() {
						goto l972
					}
					goto l973
				l972:
					position, tokenIndex = position972, tokenIndex972
				}
			l973:
				if !_rules[ruleYearNum]() {
					goto l970
				}
				{
					position974, tokenIndex974 := position, tokenIndex
					if !_rules[rule_]() {
						goto l974
					}
					goto l975
				l974:
					position, tokenIndex = position974, tokenIndex974
				}
			l975:
				if buffer[position] != rune(']') {
					goto l970
				}
				position++
				add(ruleYearApprox, position971)
			}
			return true
		l970:
			position, tokenIndex = position970, tokenIndex970
			return false
		},
		/* 112 YearWithPage <- <((YearWithChar / YearNum) _? ':' _? Nums+)> */
		func() bool {
			position976, tokenIndex976 := position, tokenIndex
			{
				position977 := position
				{
					position978, tokenIndex978 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l979
					}
					goto l978
				l979:
					position, tokenIndex = position978, tokenIndex978
					if !_rules[ruleYearNum]() {
						goto l976
					}
				}
			l978:
				{
					position980, tokenIndex980 := position, tokenIndex
					if !_rules[rule_]() {
						goto l980
					}
					goto l981
				l980:
					position, tokenIndex = position980, tokenIndex980
				}
			l981:
				if buffer[position] != rune(':') {
					goto l976
				}
				position++
				{
					position982, tokenIndex982 := position, tokenIndex
					if !_rules[rule_]() {
						goto l982
					}
					goto l983
				l982:
					position, tokenIndex = position982, tokenIndex982
				}
			l983:
				if !_rules[ruleNums]() {
					goto l976
				}
			l984:
				{
					position985, tokenIndex985 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l985
					}
					goto l984
				l985:
					position, tokenIndex = position985, tokenIndex985
				}
				add(ruleYearWithPage, position977)
			}
			return true
		l976:
			position, tokenIndex = position976, tokenIndex976
			return false
		},
		/* 113 YearWithParens <- <('(' (YearWithChar / YearNum) ')')> */
		func() bool {
			position986, tokenIndex986 := position, tokenIndex
			{
				position987 := position
				if buffer[position] != rune('(') {
					goto l986
				}
				position++
				{
					position988, tokenIndex988 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l989
					}
					goto l988
				l989:
					position, tokenIndex = position988, tokenIndex988
					if !_rules[ruleYearNum]() {
						goto l986
					}
				}
			l988:
				if buffer[position] != rune(')') {
					goto l986
				}
				position++
				add(ruleYearWithParens, position987)
			}
			return true
		l986:
			position, tokenIndex = position986, tokenIndex986
			return false
		},
		/* 114 YearWithChar <- <(YearNum LowerASCII)> */
		func() bool {
			position990, tokenIndex990 := position, tokenIndex
			{
				position991 := position
				if !_rules[ruleYearNum]() {
					goto l990
				}
				if !_rules[ruleLowerASCII]() {
					goto l990
				}
				add(ruleYearWithChar, position991)
			}
			return true
		l990:
			position, tokenIndex = position990, tokenIndex990
			return false
		},
		/* 115 YearNum <- <(('1' / '2') ('0' / '7' / '8' / '9') Nums (Nums / '?') '?'*)> */
		func() bool {
			position992, tokenIndex992 := position, tokenIndex
			{
				position993 := position
				{
					position994, tokenIndex994 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l995
					}
					position++
					goto l994
				l995:
					position, tokenIndex = position994, tokenIndex994
					if buffer[position] != rune('2') {
						goto l992
					}
					position++
				}
			l994:
				{
					position996, tokenIndex996 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l997
					}
					position++
					goto l996
				l997:
					position, tokenIndex = position996, tokenIndex996
					if buffer[position] != rune('7') {
						goto l998
					}
					position++
					goto l996
				l998:
					position, tokenIndex = position996, tokenIndex996
					if buffer[position] != rune('8') {
						goto l999
					}
					position++
					goto l996
				l999:
					position, tokenIndex = position996, tokenIndex996
					if buffer[position] != rune('9') {
						goto l992
					}
					position++
				}
			l996:
				if !_rules[ruleNums]() {
					goto l992
				}
				{
					position1000, tokenIndex1000 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1001
					}
					goto l1000
				l1001:
					position, tokenIndex = position1000, tokenIndex1000
					if buffer[position] != rune('?') {
						goto l992
					}
					position++
				}
			l1000:
			l1002:
				{
					position1003, tokenIndex1003 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l1003
					}
					position++
					goto l1002
				l1003:
					position, tokenIndex = position1003, tokenIndex1003
				}
				add(ruleYearNum, position993)
			}
			return true
		l992:
			position, tokenIndex = position992, tokenIndex992
			return false
		},
		/* 116 NameUpperChar <- <(UpperChar / UpperCharExtended)> */
		func() bool {
			position1004, tokenIndex1004 := position, tokenIndex
			{
				position1005 := position
				{
					position1006, tokenIndex1006 := position, tokenIndex
					if !_rules[ruleUpperChar]() {
						goto l1007
					}
					goto l1006
				l1007:
					position, tokenIndex = position1006, tokenIndex1006
					if !_rules[ruleUpperCharExtended]() {
						goto l1004
					}
				}
			l1006:
				add(ruleNameUpperChar, position1005)
			}
			return true
		l1004:
			position, tokenIndex = position1004, tokenIndex1004
			return false
		},
		/* 117 UpperCharExtended <- <('Æ' / 'Œ' / 'Ö')> */
		func() bool {
			position1008, tokenIndex1008 := position, tokenIndex
			{
				position1009 := position
				{
					position1010, tokenIndex1010 := position, tokenIndex
					if buffer[position] != rune('Æ') {
						goto l1011
					}
					position++
					goto l1010
				l1011:
					position, tokenIndex = position1010, tokenIndex1010
					if buffer[position] != rune('Œ') {
						goto l1012
					}
					position++
					goto l1010
				l1012:
					position, tokenIndex = position1010, tokenIndex1010
					if buffer[position] != rune('Ö') {
						goto l1008
					}
					position++
				}
			l1010:
				add(ruleUpperCharExtended, position1009)
			}
			return true
		l1008:
			position, tokenIndex = position1008, tokenIndex1008
			return false
		},
		/* 118 UpperChar <- <UpperASCII> */
		func() bool {
			position1013, tokenIndex1013 := position, tokenIndex
			{
				position1014 := position
				if !_rules[ruleUpperASCII]() {
					goto l1013
				}
				add(ruleUpperChar, position1014)
			}
			return true
		l1013:
			position, tokenIndex = position1013, tokenIndex1013
			return false
		},
		/* 119 NameLowerChar <- <(LowerChar / LowerCharExtended / MiscodedChar)> */
		func() bool {
			position1015, tokenIndex1015 := position, tokenIndex
			{
				position1016 := position
				{
					position1017, tokenIndex1017 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l1018
					}
					goto l1017
				l1018:
					position, tokenIndex = position1017, tokenIndex1017
					if !_rules[ruleLowerCharExtended]() {
						goto l1019
					}
					goto l1017
				l1019:
					position, tokenIndex = position1017, tokenIndex1017
					if !_rules[ruleMiscodedChar]() {
						goto l1015
					}
				}
			l1017:
				add(ruleNameLowerChar, position1016)
			}
			return true
		l1015:
			position, tokenIndex = position1015, tokenIndex1015
			return false
		},
		/* 120 MiscodedChar <- <'�'> */
		func() bool {
			position1020, tokenIndex1020 := position, tokenIndex
			{
				position1021 := position
				if buffer[position] != rune('�') {
					goto l1020
				}
				position++
				add(ruleMiscodedChar, position1021)
			}
			return true
		l1020:
			position, tokenIndex = position1020, tokenIndex1020
			return false
		},
		/* 121 LowerCharExtended <- <('æ' / 'œ' / 'à' / 'â' / 'å' / 'ã' / 'ä' / 'á' / 'ç' / 'č' / 'é' / 'è' / 'ë' / 'í' / 'ì' / 'ï' / 'ň' / 'ñ' / 'ñ' / 'ó' / 'ò' / 'ô' / 'ø' / 'õ' / 'ö' / 'ú' / 'ù' / 'ü' / 'ŕ' / 'ř' / 'ŗ' / 'ſ' / 'š' / 'š' / 'ş' / 'ß' / 'ž')> */
		func() bool {
			position1022, tokenIndex1022 := position, tokenIndex
			{
				position1023 := position
				{
					position1024, tokenIndex1024 := position, tokenIndex
					if buffer[position] != rune('æ') {
						goto l1025
					}
					position++
					goto l1024
				l1025:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('œ') {
						goto l1026
					}
					position++
					goto l1024
				l1026:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('à') {
						goto l1027
					}
					position++
					goto l1024
				l1027:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('â') {
						goto l1028
					}
					position++
					goto l1024
				l1028:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('å') {
						goto l1029
					}
					position++
					goto l1024
				l1029:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ã') {
						goto l1030
					}
					position++
					goto l1024
				l1030:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ä') {
						goto l1031
					}
					position++
					goto l1024
				l1031:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('á') {
						goto l1032
					}
					position++
					goto l1024
				l1032:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ç') {
						goto l1033
					}
					position++
					goto l1024
				l1033:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('č') {
						goto l1034
					}
					position++
					goto l1024
				l1034:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('é') {
						goto l1035
					}
					position++
					goto l1024
				l1035:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('è') {
						goto l1036
					}
					position++
					goto l1024
				l1036:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ë') {
						goto l1037
					}
					position++
					goto l1024
				l1037:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('í') {
						goto l1038
					}
					position++
					goto l1024
				l1038:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ì') {
						goto l1039
					}
					position++
					goto l1024
				l1039:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ï') {
						goto l1040
					}
					position++
					goto l1024
				l1040:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ň') {
						goto l1041
					}
					position++
					goto l1024
				l1041:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ñ') {
						goto l1042
					}
					position++
					goto l1024
				l1042:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ñ') {
						goto l1043
					}
					position++
					goto l1024
				l1043:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ó') {
						goto l1044
					}
					position++
					goto l1024
				l1044:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ò') {
						goto l1045
					}
					position++
					goto l1024
				l1045:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ô') {
						goto l1046
					}
					position++
					goto l1024
				l1046:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ø') {
						goto l1047
					}
					position++
					goto l1024
				l1047:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('õ') {
						goto l1048
					}
					position++
					goto l1024
				l1048:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ö') {
						goto l1049
					}
					position++
					goto l1024
				l1049:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ú') {
						goto l1050
					}
					position++
					goto l1024
				l1050:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ù') {
						goto l1051
					}
					position++
					goto l1024
				l1051:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ü') {
						goto l1052
					}
					position++
					goto l1024
				l1052:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ŕ') {
						goto l1053
					}
					position++
					goto l1024
				l1053:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ř') {
						goto l1054
					}
					position++
					goto l1024
				l1054:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ŗ') {
						goto l1055
					}
					position++
					goto l1024
				l1055:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ſ') {
						goto l1056
					}
					position++
					goto l1024
				l1056:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('š') {
						goto l1057
					}
					position++
					goto l1024
				l1057:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('š') {
						goto l1058
					}
					position++
					goto l1024
				l1058:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ş') {
						goto l1059
					}
					position++
					goto l1024
				l1059:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ß') {
						goto l1060
					}
					position++
					goto l1024
				l1060:
					position, tokenIndex = position1024, tokenIndex1024
					if buffer[position] != rune('ž') {
						goto l1022
					}
					position++
				}
			l1024:
				add(ruleLowerCharExtended, position1023)
			}
			return true
		l1022:
			position, tokenIndex = position1022, tokenIndex1022
			return false
		},
		/* 122 LowerChar <- <LowerASCII> */
		func() bool {
			position1061, tokenIndex1061 := position, tokenIndex
			{
				position1062 := position
				if !_rules[ruleLowerASCII]() {
					goto l1061
				}
				add(ruleLowerChar, position1062)
			}
			return true
		l1061:
			position, tokenIndex = position1061, tokenIndex1061
			return false
		},
		/* 123 SpaceCharEOI <- <(_ / !.)> */
		func() bool {
			position1063, tokenIndex1063 := position, tokenIndex
			{
				position1064 := position
				{
					position1065, tokenIndex1065 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1066
					}
					goto l1065
				l1066:
					position, tokenIndex = position1065, tokenIndex1065
					{
						position1067, tokenIndex1067 := position, tokenIndex
						if !matchDot() {
							goto l1067
						}
						goto l1063
					l1067:
						position, tokenIndex = position1067, tokenIndex1067
					}
				}
			l1065:
				add(ruleSpaceCharEOI, position1064)
			}
			return true
		l1063:
			position, tokenIndex = position1063, tokenIndex1063
			return false
		},
		/* 124 Nums <- <[0-9]> */
		func() bool {
			position1068, tokenIndex1068 := position, tokenIndex
			{
				position1069 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l1068
				}
				position++
				add(ruleNums, position1069)
			}
			return true
		l1068:
			position, tokenIndex = position1068, tokenIndex1068
			return false
		},
		/* 125 LowerGreek <- <[α-ω]> */
		func() bool {
			position1070, tokenIndex1070 := position, tokenIndex
			{
				position1071 := position
				if c := buffer[position]; c < rune('α') || c > rune('ω') {
					goto l1070
				}
				position++
				add(ruleLowerGreek, position1071)
			}
			return true
		l1070:
			position, tokenIndex = position1070, tokenIndex1070
			return false
		},
		/* 126 LowerASCII <- <[a-z]> */
		func() bool {
			position1072, tokenIndex1072 := position, tokenIndex
			{
				position1073 := position
				if c := buffer[position]; c < rune('a') || c > rune('z') {
					goto l1072
				}
				position++
				add(ruleLowerASCII, position1073)
			}
			return true
		l1072:
			position, tokenIndex = position1072, tokenIndex1072
			return false
		},
		/* 127 UpperASCII <- <[A-Z]> */
		func() bool {
			position1074, tokenIndex1074 := position, tokenIndex
			{
				position1075 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l1074
				}
				position++
				add(ruleUpperASCII, position1075)
			}
			return true
		l1074:
			position, tokenIndex = position1074, tokenIndex1074
			return false
		},
		/* 128 Apostrophe <- <(ApostrOther / ApostrASCII)> */
		func() bool {
			position1076, tokenIndex1076 := position, tokenIndex
			{
				position1077 := position
				{
					position1078, tokenIndex1078 := position, tokenIndex
					if !_rules[ruleApostrOther]() {
						goto l1079
					}
					goto l1078
				l1079:
					position, tokenIndex = position1078, tokenIndex1078
					if !_rules[ruleApostrASCII]() {
						goto l1076
					}
				}
			l1078:
				add(ruleApostrophe, position1077)
			}
			return true
		l1076:
			position, tokenIndex = position1076, tokenIndex1076
			return false
		},
		/* 129 ApostrASCII <- <'\''> */
		func() bool {
			position1080, tokenIndex1080 := position, tokenIndex
			{
				position1081 := position
				if buffer[position] != rune('\'') {
					goto l1080
				}
				position++
				add(ruleApostrASCII, position1081)
			}
			return true
		l1080:
			position, tokenIndex = position1080, tokenIndex1080
			return false
		},
		/* 130 ApostrOther <- <('‘' / '’')> */
		func() bool {
			position1082, tokenIndex1082 := position, tokenIndex
			{
				position1083 := position
				{
					position1084, tokenIndex1084 := position, tokenIndex
					if buffer[position] != rune('‘') {
						goto l1085
					}
					position++
					goto l1084
				l1085:
					position, tokenIndex = position1084, tokenIndex1084
					if buffer[position] != rune('’') {
						goto l1082
					}
					position++
				}
			l1084:
				add(ruleApostrOther, position1083)
			}
			return true
		l1082:
			position, tokenIndex = position1082, tokenIndex1082
			return false
		},
		/* 131 Dash <- <'-'> */
		func() bool {
			position1086, tokenIndex1086 := position, tokenIndex
			{
				position1087 := position
				if buffer[position] != rune('-') {
					goto l1086
				}
				position++
				add(ruleDash, position1087)
			}
			return true
		l1086:
			position, tokenIndex = position1086, tokenIndex1086
			return false
		},
		/* 132 Slash <- <'/'> */
		func() bool {
			position1088, tokenIndex1088 := position, tokenIndex
			{
				position1089 := position
				if buffer[position] != rune('/') {
					goto l1088
				}
				position++
				add(ruleSlash, position1089)
			}
			return true
		l1088:
			position, tokenIndex = position1088, tokenIndex1088
			return false
		},
		/* 133 _ <- <(MultipleSpace / SingleSpace)> */
		func() bool {
			position1090, tokenIndex1090 := position, tokenIndex
			{
				position1091 := position
				{
					position1092, tokenIndex1092 := position, tokenIndex
					if !_rules[ruleMultipleSpace]() {
						goto l1093
					}
					goto l1092
				l1093:
					position, tokenIndex = position1092, tokenIndex1092
					if !_rules[ruleSingleSpace]() {
						goto l1090
					}
				}
			l1092:
				add(rule_, position1091)
			}
			return true
		l1090:
			position, tokenIndex = position1090, tokenIndex1090
			return false
		},
		/* 134 MultipleSpace <- <(SingleSpace SingleSpace+)> */
		func() bool {
			position1094, tokenIndex1094 := position, tokenIndex
			{
				position1095 := position
				if !_rules[ruleSingleSpace]() {
					goto l1094
				}
				if !_rules[ruleSingleSpace]() {
					goto l1094
				}
			l1096:
				{
					position1097, tokenIndex1097 := position, tokenIndex
					if !_rules[ruleSingleSpace]() {
						goto l1097
					}
					goto l1096
				l1097:
					position, tokenIndex = position1097, tokenIndex1097
				}
				add(ruleMultipleSpace, position1095)
			}
			return true
		l1094:
			position, tokenIndex = position1094, tokenIndex1094
			return false
		},
		/* 135 SingleSpace <- <(' ' / OtherSpace)> */
		func() bool {
			position1098, tokenIndex1098 := position, tokenIndex
			{
				position1099 := position
				{
					position1100, tokenIndex1100 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l1101
					}
					position++
					goto l1100
				l1101:
					position, tokenIndex = position1100, tokenIndex1100
					if !_rules[ruleOtherSpace]() {
						goto l1098
					}
				}
			l1100:
				add(ruleSingleSpace, position1099)
			}
			return true
		l1098:
			position, tokenIndex = position1098, tokenIndex1098
			return false
		},
		/* 136 OtherSpace <- <('\u3000' / '\u00a0' / '\t' / '\r' / '\n' / '\f' / '\v')> */
		func() bool {
			position1102, tokenIndex1102 := position, tokenIndex
			{
				position1103 := position
				{
					position1104, tokenIndex1104 := position, tokenIndex
					if buffer[position] != rune('\u3000') {
						goto l1105
					}
					position++
					goto l1104
				l1105:
					position, tokenIndex = position1104, tokenIndex1104
					if buffer[position] != rune('\u00a0') {
						goto l1106
					}
					position++
					goto l1104
				l1106:
					position, tokenIndex = position1104, tokenIndex1104
					if buffer[position] != rune('\t') {
						goto l1107
					}
					position++
					goto l1104
				l1107:
					position, tokenIndex = position1104, tokenIndex1104
					if buffer[position] != rune('\r') {
						goto l1108
					}
					position++
					goto l1104
				l1108:
					position, tokenIndex = position1104, tokenIndex1104
					if buffer[position] != rune('\n') {
						goto l1109
					}
					position++
					goto l1104
				l1109:
					position, tokenIndex = position1104, tokenIndex1104
					if buffer[position] != rune('\f') {
						goto l1110
					}
					position++
					goto l1104
				l1110:
					position, tokenIndex = position1104, tokenIndex1104
					if buffer[position] != rune('\v') {
						goto l1102
					}
					position++
				}
			l1104:
				add(ruleOtherSpace, position1103)
			}
			return true
		l1102:
			position, tokenIndex = position1102, tokenIndex1102
			return false
		},
		/* 137 END <- <!.> */
		func() bool {
			position1111, tokenIndex1111 := position, tokenIndex
			{
				position1112 := position
				{
					position1113, tokenIndex1113 := position, tokenIndex
					if !matchDot() {
						goto l1113
					}
					goto l1111
				l1113:
					position, tokenIndex = position1113, tokenIndex1113
				}
				add(ruleEND, position1112)
			}
			return true
		l1111:
			position, tokenIndex = position1111, tokenIndex1111
			return false
		},
	}
	p.rules = _rules
	return nil
}
