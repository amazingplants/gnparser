package parser

// Code generated by peg grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleSciName
	ruleTail
	ruleName
	ruleHybridFormula
	ruleHybridFormulaFull
	ruleHybridFormulaPart
	ruleNamedHybrid
	ruleNamedSpeciesHybrid
	ruleNamedGenusHybrid
	ruleCandidatusName
	ruleCandidatus
	ruleSingleName
	ruleNameUninomial
	ruleNameApprox
	ruleNameComp
	ruleNameSpecies
	ruleGenusWord
	ruleInfraspGroup
	ruleInfraspEpithet
	ruleCultivarWordGroup
	ruleCultivar
	ruleRankCultivar
	ruleNotHybridChar
	ruleCultivarRecursive
	ruleCultivarApostrophe
	ruleSpeciesEpithet
	ruleComparison
	ruleRank
	ruleRankNotho
	ruleRankOtherUncommon
	ruleRankOther
	ruleRankVar
	ruleRankForma
	ruleRankSsp
	ruleRankAgamo
	ruleSubgenusOrSuperspecies
	ruleSubgenus
	ruleSubgenus2
	ruleSubgenus1
	ruleUninomialCombo
	ruleUninomialCombo1
	ruleUninomialCombo2
	ruleRankUninomial
	ruleRankUninomialPlain
	ruleRankUninomialNotho
	ruleUninomial
	ruleUninomialWord
	ruleAbbrSubgenus
	ruleAbbrGenus
	ruleCapWord
	ruleCapWord1
	ruleCapWordWithDash
	ruleUpperAfterDash
	ruleLowerAfterDash
	ruleTwoLetterGenus
	ruleWord
	ruleWord1
	ruleWordStartsWithDigit
	ruleWord2
	ruleWordApostr
	ruleWord4
	ruleMultiDashedWord
	ruleHybridChar
	ruleApproxNameIgnored
	ruleApproximation
	ruleAuthorship
	ruleAuthorshipCombo
	ruleOriginalAuthorship
	ruleOriginalAuthorshipComb
	ruleCombinationAuthorship
	ruleBasionymAuthorshipMissingParens
	ruleMissingParensStart
	ruleMissingParensEnd
	ruleBasionymAuthorshipYearMisformed
	ruleBasionymAuthorship
	ruleBasionymAuthorship1
	ruleBasionymAuthorship2Parens
	ruleAuthorsGroup
	ruleAuthorsTeam
	ruleAuthorSep
	ruleAuthorSep1
	ruleAuthorSep2
	ruleAuthorSepSpanish
	ruleAuthorEx
	ruleAuthorEmend
	ruleAuthor
	ruleAuthor0
	ruleAuthor1
	ruleAuthor2
	ruleUnknownAuthor
	ruleAuthorWord
	ruleAuthorEtAl
	ruleAuthorWord2
	ruleAuthorWord3
	ruleAuthorDashInitials
	ruleAuthorWordSoft
	ruleCapAuthorWord
	ruleAllCapsAuthorWord
	ruleFilius
	ruleFiliusF
	ruleFiliusFNoSpace
	ruleAuthorSuffix
	ruleAuthorPrefixGlued
	ruleAuthorPrefix
	ruleAuthorPrefix2
	ruleAuthorPrefix1
	ruleAuthorUpperChar
	ruleAuthorLowerChar
	ruleYear
	ruleYearRange
	ruleYearWithDot
	ruleYearApprox
	ruleYearWithPage
	ruleYearWithParens
	ruleYearWithChar
	ruleYearNum
	ruleNameUpperChar
	ruleUpperCharExtended
	ruleUpperChar
	ruleNameLowerChar
	ruleMiscodedChar
	ruleLowerCharExtended
	ruleLowerChar
	ruleSpaceCharEOI
	ruleNums
	ruleLowerGreek
	ruleLowerASCII
	ruleUpperASCII
	ruleApostrophe
	ruleApostrASCII
	ruleApostrOther
	ruleDash
	ruleSlash
	rule_
	ruleMultipleSpace
	ruleSingleSpace
	ruleOtherSpace
	ruleEND
)

var rul3s = [...]string{
	"Unknown",
	"SciName",
	"Tail",
	"Name",
	"HybridFormula",
	"HybridFormulaFull",
	"HybridFormulaPart",
	"NamedHybrid",
	"NamedSpeciesHybrid",
	"NamedGenusHybrid",
	"CandidatusName",
	"Candidatus",
	"SingleName",
	"NameUninomial",
	"NameApprox",
	"NameComp",
	"NameSpecies",
	"GenusWord",
	"InfraspGroup",
	"InfraspEpithet",
	"CultivarWordGroup",
	"Cultivar",
	"RankCultivar",
	"NotHybridChar",
	"CultivarRecursive",
	"CultivarApostrophe",
	"SpeciesEpithet",
	"Comparison",
	"Rank",
	"RankNotho",
	"RankOtherUncommon",
	"RankOther",
	"RankVar",
	"RankForma",
	"RankSsp",
	"RankAgamo",
	"SubgenusOrSuperspecies",
	"Subgenus",
	"Subgenus2",
	"Subgenus1",
	"UninomialCombo",
	"UninomialCombo1",
	"UninomialCombo2",
	"RankUninomial",
	"RankUninomialPlain",
	"RankUninomialNotho",
	"Uninomial",
	"UninomialWord",
	"AbbrSubgenus",
	"AbbrGenus",
	"CapWord",
	"CapWord1",
	"CapWordWithDash",
	"UpperAfterDash",
	"LowerAfterDash",
	"TwoLetterGenus",
	"Word",
	"Word1",
	"WordStartsWithDigit",
	"Word2",
	"WordApostr",
	"Word4",
	"MultiDashedWord",
	"HybridChar",
	"ApproxNameIgnored",
	"Approximation",
	"Authorship",
	"AuthorshipCombo",
	"OriginalAuthorship",
	"OriginalAuthorshipComb",
	"CombinationAuthorship",
	"BasionymAuthorshipMissingParens",
	"MissingParensStart",
	"MissingParensEnd",
	"BasionymAuthorshipYearMisformed",
	"BasionymAuthorship",
	"BasionymAuthorship1",
	"BasionymAuthorship2Parens",
	"AuthorsGroup",
	"AuthorsTeam",
	"AuthorSep",
	"AuthorSep1",
	"AuthorSep2",
	"AuthorSepSpanish",
	"AuthorEx",
	"AuthorEmend",
	"Author",
	"Author0",
	"Author1",
	"Author2",
	"UnknownAuthor",
	"AuthorWord",
	"AuthorEtAl",
	"AuthorWord2",
	"AuthorWord3",
	"AuthorDashInitials",
	"AuthorWordSoft",
	"CapAuthorWord",
	"AllCapsAuthorWord",
	"Filius",
	"FiliusF",
	"FiliusFNoSpace",
	"AuthorSuffix",
	"AuthorPrefixGlued",
	"AuthorPrefix",
	"AuthorPrefix2",
	"AuthorPrefix1",
	"AuthorUpperChar",
	"AuthorLowerChar",
	"Year",
	"YearRange",
	"YearWithDot",
	"YearApprox",
	"YearWithPage",
	"YearWithParens",
	"YearWithChar",
	"YearNum",
	"NameUpperChar",
	"UpperCharExtended",
	"UpperChar",
	"NameLowerChar",
	"MiscodedChar",
	"LowerCharExtended",
	"LowerChar",
	"SpaceCharEOI",
	"Nums",
	"LowerGreek",
	"LowerASCII",
	"UpperASCII",
	"Apostrophe",
	"ApostrASCII",
	"ApostrOther",
	"Dash",
	"Slash",
	"_",
	"MultipleSpace",
	"SingleSpace",
	"OtherSpace",
	"END",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Engine struct {
	baseEngine

	Buffer string
	buffer []rune
	rules  [139]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Engine) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Engine) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Engine
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Engine) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Engine) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Engine) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Engine) error {
	return func(p *Engine) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Engine) error {
	return func(p *Engine) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Engine) Init(options ...func(*Engine) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 SciName <- <(_? Name Tail END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[rule_]() {
						goto l2
					}
					goto l3
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
			l3:
				if !_rules[ruleName]() {
					goto l0
				}
				if !_rules[ruleTail]() {
					goto l0
				}
				if !_rules[ruleEND]() {
					goto l0
				}
				add(ruleSciName, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Tail <- <((_ / ';' / ',') .*)?> */
		func() bool {
			{
				position5 := position
				{
					position6, tokenIndex6 := position, tokenIndex
					{
						position8, tokenIndex8 := position, tokenIndex
						if !_rules[rule_]() {
							goto l9
						}
						goto l8
					l9:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(';') {
							goto l10
						}
						position++
						goto l8
					l10:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(',') {
							goto l6
						}
						position++
					}
				l8:
				l11:
					{
						position12, tokenIndex12 := position, tokenIndex
						if !matchDot() {
							goto l12
						}
						goto l11
					l12:
						position, tokenIndex = position12, tokenIndex12
					}
					goto l7
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
			l7:
				add(ruleTail, position5)
			}
			return true
		},
		/* 2 Name <- <(NamedHybrid / HybridFormula / CandidatusName / SingleName)> */
		func() bool {
			position13, tokenIndex13 := position, tokenIndex
			{
				position14 := position
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleNamedHybrid]() {
						goto l16
					}
					goto l15
				l16:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleHybridFormula]() {
						goto l17
					}
					goto l15
				l17:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleCandidatusName]() {
						goto l18
					}
					goto l15
				l18:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleSingleName]() {
						goto l13
					}
				}
			l15:
				add(ruleName, position14)
			}
			return true
		l13:
			position, tokenIndex = position13, tokenIndex13
			return false
		},
		/* 3 HybridFormula <- <(SingleName (_ (HybridFormulaPart / HybridFormulaFull))+)> */
		func() bool {
			position19, tokenIndex19 := position, tokenIndex
			{
				position20 := position
				if !_rules[ruleSingleName]() {
					goto l19
				}
				if !_rules[rule_]() {
					goto l19
				}
				{
					position23, tokenIndex23 := position, tokenIndex
					if !_rules[ruleHybridFormulaPart]() {
						goto l24
					}
					goto l23
				l24:
					position, tokenIndex = position23, tokenIndex23
					if !_rules[ruleHybridFormulaFull]() {
						goto l19
					}
				}
			l23:
			l21:
				{
					position22, tokenIndex22 := position, tokenIndex
					if !_rules[rule_]() {
						goto l22
					}
					{
						position25, tokenIndex25 := position, tokenIndex
						if !_rules[ruleHybridFormulaPart]() {
							goto l26
						}
						goto l25
					l26:
						position, tokenIndex = position25, tokenIndex25
						if !_rules[ruleHybridFormulaFull]() {
							goto l22
						}
					}
				l25:
					goto l21
				l22:
					position, tokenIndex = position22, tokenIndex22
				}
				add(ruleHybridFormula, position20)
			}
			return true
		l19:
			position, tokenIndex = position19, tokenIndex19
			return false
		},
		/* 4 HybridFormulaFull <- <(HybridChar (_ SingleName)?)> */
		func() bool {
			position27, tokenIndex27 := position, tokenIndex
			{
				position28 := position
				if !_rules[ruleHybridChar]() {
					goto l27
				}
				{
					position29, tokenIndex29 := position, tokenIndex
					if !_rules[rule_]() {
						goto l29
					}
					if !_rules[ruleSingleName]() {
						goto l29
					}
					goto l30
				l29:
					position, tokenIndex = position29, tokenIndex29
				}
			l30:
				add(ruleHybridFormulaFull, position28)
			}
			return true
		l27:
			position, tokenIndex = position27, tokenIndex27
			return false
		},
		/* 5 HybridFormulaPart <- <(HybridChar _ SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position31, tokenIndex31 := position, tokenIndex
			{
				position32 := position
				if !_rules[ruleHybridChar]() {
					goto l31
				}
				if !_rules[rule_]() {
					goto l31
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l31
				}
				{
					position33, tokenIndex33 := position, tokenIndex
					if !_rules[rule_]() {
						goto l33
					}
					if !_rules[ruleInfraspGroup]() {
						goto l33
					}
					goto l34
				l33:
					position, tokenIndex = position33, tokenIndex33
				}
			l34:
				add(ruleHybridFormulaPart, position32)
			}
			return true
		l31:
			position, tokenIndex = position31, tokenIndex31
			return false
		},
		/* 6 NamedHybrid <- <(NamedGenusHybrid / NamedSpeciesHybrid)> */
		func() bool {
			position35, tokenIndex35 := position, tokenIndex
			{
				position36 := position
				{
					position37, tokenIndex37 := position, tokenIndex
					if !_rules[ruleNamedGenusHybrid]() {
						goto l38
					}
					goto l37
				l38:
					position, tokenIndex = position37, tokenIndex37
					if !_rules[ruleNamedSpeciesHybrid]() {
						goto l35
					}
				}
			l37:
				add(ruleNamedHybrid, position36)
			}
			return true
		l35:
			position, tokenIndex = position35, tokenIndex35
			return false
		},
		/* 7 NamedSpeciesHybrid <- <(GenusWord (_ Subgenus)? (_ Comparison)? _ HybridChar _? SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position39, tokenIndex39 := position, tokenIndex
			{
				position40 := position
				if !_rules[ruleGenusWord]() {
					goto l39
				}
				{
					position41, tokenIndex41 := position, tokenIndex
					if !_rules[rule_]() {
						goto l41
					}
					if !_rules[ruleSubgenus]() {
						goto l41
					}
					goto l42
				l41:
					position, tokenIndex = position41, tokenIndex41
				}
			l42:
				{
					position43, tokenIndex43 := position, tokenIndex
					if !_rules[rule_]() {
						goto l43
					}
					if !_rules[ruleComparison]() {
						goto l43
					}
					goto l44
				l43:
					position, tokenIndex = position43, tokenIndex43
				}
			l44:
				if !_rules[rule_]() {
					goto l39
				}
				if !_rules[ruleHybridChar]() {
					goto l39
				}
				{
					position45, tokenIndex45 := position, tokenIndex
					if !_rules[rule_]() {
						goto l45
					}
					goto l46
				l45:
					position, tokenIndex = position45, tokenIndex45
				}
			l46:
				if !_rules[ruleSpeciesEpithet]() {
					goto l39
				}
				{
					position47, tokenIndex47 := position, tokenIndex
					if !_rules[rule_]() {
						goto l47
					}
					if !_rules[ruleInfraspGroup]() {
						goto l47
					}
					goto l48
				l47:
					position, tokenIndex = position47, tokenIndex47
				}
			l48:
				add(ruleNamedSpeciesHybrid, position40)
			}
			return true
		l39:
			position, tokenIndex = position39, tokenIndex39
			return false
		},
		/* 8 NamedGenusHybrid <- <(HybridChar _? SingleName)> */
		func() bool {
			position49, tokenIndex49 := position, tokenIndex
			{
				position50 := position
				if !_rules[ruleHybridChar]() {
					goto l49
				}
				{
					position51, tokenIndex51 := position, tokenIndex
					if !_rules[rule_]() {
						goto l51
					}
					goto l52
				l51:
					position, tokenIndex = position51, tokenIndex51
				}
			l52:
				if !_rules[ruleSingleName]() {
					goto l49
				}
				add(ruleNamedGenusHybrid, position50)
			}
			return true
		l49:
			position, tokenIndex = position49, tokenIndex49
			return false
		},
		/* 9 CandidatusName <- <(Candidatus _ SingleName)> */
		func() bool {
			position53, tokenIndex53 := position, tokenIndex
			{
				position54 := position
				if !_rules[ruleCandidatus]() {
					goto l53
				}
				if !_rules[rule_]() {
					goto l53
				}
				if !_rules[ruleSingleName]() {
					goto l53
				}
				add(ruleCandidatusName, position54)
			}
			return true
		l53:
			position, tokenIndex = position53, tokenIndex53
			return false
		},
		/* 10 Candidatus <- <('C' 'a' 'n' 'd' 'i' 'd' 'a' 't' 'u' 's')> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				if buffer[position] != rune('C') {
					goto l55
				}
				position++
				if buffer[position] != rune('a') {
					goto l55
				}
				position++
				if buffer[position] != rune('n') {
					goto l55
				}
				position++
				if buffer[position] != rune('d') {
					goto l55
				}
				position++
				if buffer[position] != rune('i') {
					goto l55
				}
				position++
				if buffer[position] != rune('d') {
					goto l55
				}
				position++
				if buffer[position] != rune('a') {
					goto l55
				}
				position++
				if buffer[position] != rune('t') {
					goto l55
				}
				position++
				if buffer[position] != rune('u') {
					goto l55
				}
				position++
				if buffer[position] != rune('s') {
					goto l55
				}
				position++
				add(ruleCandidatus, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
		/* 11 SingleName <- <(NameComp / NameApprox / NameSpecies / NameUninomial)> */
		func() bool {
			position57, tokenIndex57 := position, tokenIndex
			{
				position58 := position
				{
					position59, tokenIndex59 := position, tokenIndex
					if !_rules[ruleNameComp]() {
						goto l60
					}
					goto l59
				l60:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleNameApprox]() {
						goto l61
					}
					goto l59
				l61:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleNameSpecies]() {
						goto l62
					}
					goto l59
				l62:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleNameUninomial]() {
						goto l57
					}
				}
			l59:
				add(ruleSingleName, position58)
			}
			return true
		l57:
			position, tokenIndex = position57, tokenIndex57
			return false
		},
		/* 12 NameUninomial <- <((UninomialCombo / Uninomial) (_ CultivarWordGroup)?)> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				{
					position65, tokenIndex65 := position, tokenIndex
					if !_rules[ruleUninomialCombo]() {
						goto l66
					}
					goto l65
				l66:
					position, tokenIndex = position65, tokenIndex65
					if !_rules[ruleUninomial]() {
						goto l63
					}
				}
			l65:
				{
					position67, tokenIndex67 := position, tokenIndex
					if !_rules[rule_]() {
						goto l67
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l67
					}
					goto l68
				l67:
					position, tokenIndex = position67, tokenIndex67
				}
			l68:
				add(ruleNameUninomial, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 13 NameApprox <- <(GenusWord (_ SpeciesEpithet)? _ Approximation ApproxNameIgnored)> */
		func() bool {
			position69, tokenIndex69 := position, tokenIndex
			{
				position70 := position
				if !_rules[ruleGenusWord]() {
					goto l69
				}
				{
					position71, tokenIndex71 := position, tokenIndex
					if !_rules[rule_]() {
						goto l71
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l71
					}
					goto l72
				l71:
					position, tokenIndex = position71, tokenIndex71
				}
			l72:
				if !_rules[rule_]() {
					goto l69
				}
				if !_rules[ruleApproximation]() {
					goto l69
				}
				if !_rules[ruleApproxNameIgnored]() {
					goto l69
				}
				add(ruleNameApprox, position70)
			}
			return true
		l69:
			position, tokenIndex = position69, tokenIndex69
			return false
		},
		/* 14 NameComp <- <(GenusWord _ Comparison (_ SpeciesEpithet)?)> */
		func() bool {
			position73, tokenIndex73 := position, tokenIndex
			{
				position74 := position
				if !_rules[ruleGenusWord]() {
					goto l73
				}
				if !_rules[rule_]() {
					goto l73
				}
				if !_rules[ruleComparison]() {
					goto l73
				}
				{
					position75, tokenIndex75 := position, tokenIndex
					if !_rules[rule_]() {
						goto l75
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l75
					}
					goto l76
				l75:
					position, tokenIndex = position75, tokenIndex75
				}
			l76:
				add(ruleNameComp, position74)
			}
			return true
		l73:
			position, tokenIndex = position73, tokenIndex73
			return false
		},
		/* 15 NameSpecies <- <(GenusWord (_? (Subgenus / SubgenusOrSuperspecies))? _ SpeciesEpithet (_ InfraspGroup)? (_ CultivarWordGroup)?)> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				if !_rules[ruleGenusWord]() {
					goto l77
				}
				{
					position79, tokenIndex79 := position, tokenIndex
					{
						position81, tokenIndex81 := position, tokenIndex
						if !_rules[rule_]() {
							goto l81
						}
						goto l82
					l81:
						position, tokenIndex = position81, tokenIndex81
					}
				l82:
					{
						position83, tokenIndex83 := position, tokenIndex
						if !_rules[ruleSubgenus]() {
							goto l84
						}
						goto l83
					l84:
						position, tokenIndex = position83, tokenIndex83
						if !_rules[ruleSubgenusOrSuperspecies]() {
							goto l79
						}
					}
				l83:
					goto l80
				l79:
					position, tokenIndex = position79, tokenIndex79
				}
			l80:
				if !_rules[rule_]() {
					goto l77
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l77
				}
				{
					position85, tokenIndex85 := position, tokenIndex
					if !_rules[rule_]() {
						goto l85
					}
					if !_rules[ruleInfraspGroup]() {
						goto l85
					}
					goto l86
				l85:
					position, tokenIndex = position85, tokenIndex85
				}
			l86:
				{
					position87, tokenIndex87 := position, tokenIndex
					if !_rules[rule_]() {
						goto l87
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l87
					}
					goto l88
				l87:
					position, tokenIndex = position87, tokenIndex87
				}
			l88:
				add(ruleNameSpecies, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 16 GenusWord <- <((AbbrGenus / UninomialWord) !(_ AuthorWord))> */
		func() bool {
			position89, tokenIndex89 := position, tokenIndex
			{
				position90 := position
				{
					position91, tokenIndex91 := position, tokenIndex
					if !_rules[ruleAbbrGenus]() {
						goto l92
					}
					goto l91
				l92:
					position, tokenIndex = position91, tokenIndex91
					if !_rules[ruleUninomialWord]() {
						goto l89
					}
				}
			l91:
				{
					position93, tokenIndex93 := position, tokenIndex
					if !_rules[rule_]() {
						goto l93
					}
					if !_rules[ruleAuthorWord]() {
						goto l93
					}
					goto l89
				l93:
					position, tokenIndex = position93, tokenIndex93
				}
				add(ruleGenusWord, position90)
			}
			return true
		l89:
			position, tokenIndex = position89, tokenIndex89
			return false
		},
		/* 17 InfraspGroup <- <(InfraspEpithet (_ InfraspEpithet)? (_ InfraspEpithet)?)> */
		func() bool {
			position94, tokenIndex94 := position, tokenIndex
			{
				position95 := position
				if !_rules[ruleInfraspEpithet]() {
					goto l94
				}
				{
					position96, tokenIndex96 := position, tokenIndex
					if !_rules[rule_]() {
						goto l96
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l96
					}
					goto l97
				l96:
					position, tokenIndex = position96, tokenIndex96
				}
			l97:
				{
					position98, tokenIndex98 := position, tokenIndex
					if !_rules[rule_]() {
						goto l98
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l98
					}
					goto l99
				l98:
					position, tokenIndex = position98, tokenIndex98
				}
			l99:
				add(ruleInfraspGroup, position95)
			}
			return true
		l94:
			position, tokenIndex = position94, tokenIndex94
			return false
		},
		/* 18 InfraspEpithet <- <((Rank _?)? !AuthorEx Word (_ Authorship)?)> */
		func() bool {
			position100, tokenIndex100 := position, tokenIndex
			{
				position101 := position
				{
					position102, tokenIndex102 := position, tokenIndex
					if !_rules[ruleRank]() {
						goto l102
					}
					{
						position104, tokenIndex104 := position, tokenIndex
						if !_rules[rule_]() {
							goto l104
						}
						goto l105
					l104:
						position, tokenIndex = position104, tokenIndex104
					}
				l105:
					goto l103
				l102:
					position, tokenIndex = position102, tokenIndex102
				}
			l103:
				{
					position106, tokenIndex106 := position, tokenIndex
					if !_rules[ruleAuthorEx]() {
						goto l106
					}
					goto l100
				l106:
					position, tokenIndex = position106, tokenIndex106
				}
				if !_rules[ruleWord]() {
					goto l100
				}
				{
					position107, tokenIndex107 := position, tokenIndex
					if !_rules[rule_]() {
						goto l107
					}
					if !_rules[ruleAuthorship]() {
						goto l107
					}
					goto l108
				l107:
					position, tokenIndex = position107, tokenIndex107
				}
			l108:
				add(ruleInfraspEpithet, position101)
			}
			return true
		l100:
			position, tokenIndex = position100, tokenIndex100
			return false
		},
		/* 19 CultivarWordGroup <- <(((RankCultivar _)? CultivarApostrophe CultivarRecursive CultivarApostrophe) / (RankCultivar _ Cultivar))> */
		func() bool {
			position109, tokenIndex109 := position, tokenIndex
			{
				position110 := position
				{
					position111, tokenIndex111 := position, tokenIndex
					{
						position113, tokenIndex113 := position, tokenIndex
						if !_rules[ruleRankCultivar]() {
							goto l113
						}
						if !_rules[rule_]() {
							goto l113
						}
						goto l114
					l113:
						position, tokenIndex = position113, tokenIndex113
					}
				l114:
					if !_rules[ruleCultivarApostrophe]() {
						goto l112
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l112
					}
					if !_rules[ruleCultivarApostrophe]() {
						goto l112
					}
					goto l111
				l112:
					position, tokenIndex = position111, tokenIndex111
					if !_rules[ruleRankCultivar]() {
						goto l109
					}
					if !_rules[rule_]() {
						goto l109
					}
					if !_rules[ruleCultivar]() {
						goto l109
					}
				}
			l111:
				add(ruleCultivarWordGroup, position110)
			}
			return true
		l109:
			position, tokenIndex = position109, tokenIndex109
			return false
		},
		/* 20 Cultivar <- <NotHybridChar+> */
		func() bool {
			position115, tokenIndex115 := position, tokenIndex
			{
				position116 := position
				if !_rules[ruleNotHybridChar]() {
					goto l115
				}
			l117:
				{
					position118, tokenIndex118 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l118
					}
					goto l117
				l118:
					position, tokenIndex = position118, tokenIndex118
				}
				add(ruleCultivar, position116)
			}
			return true
		l115:
			position, tokenIndex = position115, tokenIndex115
			return false
		},
		/* 21 RankCultivar <- <('c' 'v' '.'?)> */
		func() bool {
			position119, tokenIndex119 := position, tokenIndex
			{
				position120 := position
				if buffer[position] != rune('c') {
					goto l119
				}
				position++
				if buffer[position] != rune('v') {
					goto l119
				}
				position++
				{
					position121, tokenIndex121 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l121
					}
					position++
					goto l122
				l121:
					position, tokenIndex = position121, tokenIndex121
				}
			l122:
				add(ruleRankCultivar, position120)
			}
			return true
		l119:
			position, tokenIndex = position119, tokenIndex119
			return false
		},
		/* 22 NotHybridChar <- <(!(_ HybridChar) .)> */
		func() bool {
			position123, tokenIndex123 := position, tokenIndex
			{
				position124 := position
				{
					position125, tokenIndex125 := position, tokenIndex
					if !_rules[rule_]() {
						goto l125
					}
					if !_rules[ruleHybridChar]() {
						goto l125
					}
					goto l123
				l125:
					position, tokenIndex = position125, tokenIndex125
				}
				if !matchDot() {
					goto l123
				}
				add(ruleNotHybridChar, position124)
			}
			return true
		l123:
			position, tokenIndex = position123, tokenIndex123
			return false
		},
		/* 23 CultivarRecursive <- <((NotHybridChar CultivarRecursive) / &CultivarApostrophe)> */
		func() bool {
			position126, tokenIndex126 := position, tokenIndex
			{
				position127 := position
				{
					position128, tokenIndex128 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l129
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l129
					}
					goto l128
				l129:
					position, tokenIndex = position128, tokenIndex128
					{
						position130, tokenIndex130 := position, tokenIndex
						if !_rules[ruleCultivarApostrophe]() {
							goto l126
						}
						position, tokenIndex = position130, tokenIndex130
					}
				}
			l128:
				add(ruleCultivarRecursive, position127)
			}
			return true
		l126:
			position, tokenIndex = position126, tokenIndex126
			return false
		},
		/* 24 CultivarApostrophe <- <('\'' / '‘' / '’' / '"' / '“' / '”')> */
		func() bool {
			position131, tokenIndex131 := position, tokenIndex
			{
				position132 := position
				{
					position133, tokenIndex133 := position, tokenIndex
					if buffer[position] != rune('\'') {
						goto l134
					}
					position++
					goto l133
				l134:
					position, tokenIndex = position133, tokenIndex133
					if buffer[position] != rune('‘') {
						goto l135
					}
					position++
					goto l133
				l135:
					position, tokenIndex = position133, tokenIndex133
					if buffer[position] != rune('’') {
						goto l136
					}
					position++
					goto l133
				l136:
					position, tokenIndex = position133, tokenIndex133
					if buffer[position] != rune('"') {
						goto l137
					}
					position++
					goto l133
				l137:
					position, tokenIndex = position133, tokenIndex133
					if buffer[position] != rune('“') {
						goto l138
					}
					position++
					goto l133
				l138:
					position, tokenIndex = position133, tokenIndex133
					if buffer[position] != rune('”') {
						goto l131
					}
					position++
				}
			l133:
				add(ruleCultivarApostrophe, position132)
			}
			return true
		l131:
			position, tokenIndex = position131, tokenIndex131
			return false
		},
		/* 25 SpeciesEpithet <- <(!AuthorEx Word (_? Authorship)?)> */
		func() bool {
			position139, tokenIndex139 := position, tokenIndex
			{
				position140 := position
				{
					position141, tokenIndex141 := position, tokenIndex
					if !_rules[ruleAuthorEx]() {
						goto l141
					}
					goto l139
				l141:
					position, tokenIndex = position141, tokenIndex141
				}
				if !_rules[ruleWord]() {
					goto l139
				}
				{
					position142, tokenIndex142 := position, tokenIndex
					{
						position144, tokenIndex144 := position, tokenIndex
						if !_rules[rule_]() {
							goto l144
						}
						goto l145
					l144:
						position, tokenIndex = position144, tokenIndex144
					}
				l145:
					if !_rules[ruleAuthorship]() {
						goto l142
					}
					goto l143
				l142:
					position, tokenIndex = position142, tokenIndex142
				}
			l143:
				add(ruleSpeciesEpithet, position140)
			}
			return true
		l139:
			position, tokenIndex = position139, tokenIndex139
			return false
		},
		/* 26 Comparison <- <('c' 'f' '.'?)> */
		func() bool {
			position146, tokenIndex146 := position, tokenIndex
			{
				position147 := position
				if buffer[position] != rune('c') {
					goto l146
				}
				position++
				if buffer[position] != rune('f') {
					goto l146
				}
				position++
				{
					position148, tokenIndex148 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l148
					}
					position++
					goto l149
				l148:
					position, tokenIndex = position148, tokenIndex148
				}
			l149:
				add(ruleComparison, position147)
			}
			return true
		l146:
			position, tokenIndex = position146, tokenIndex146
			return false
		},
		/* 27 Rank <- <((RankForma / RankVar / RankSsp / RankOther / RankOtherUncommon / RankAgamo / RankNotho) (_? LowerGreek ('.' / &SpaceCharEOI))?)> */
		func() bool {
			position150, tokenIndex150 := position, tokenIndex
			{
				position151 := position
				{
					position152, tokenIndex152 := position, tokenIndex
					if !_rules[ruleRankForma]() {
						goto l153
					}
					goto l152
				l153:
					position, tokenIndex = position152, tokenIndex152
					if !_rules[ruleRankVar]() {
						goto l154
					}
					goto l152
				l154:
					position, tokenIndex = position152, tokenIndex152
					if !_rules[ruleRankSsp]() {
						goto l155
					}
					goto l152
				l155:
					position, tokenIndex = position152, tokenIndex152
					if !_rules[ruleRankOther]() {
						goto l156
					}
					goto l152
				l156:
					position, tokenIndex = position152, tokenIndex152
					if !_rules[ruleRankOtherUncommon]() {
						goto l157
					}
					goto l152
				l157:
					position, tokenIndex = position152, tokenIndex152
					if !_rules[ruleRankAgamo]() {
						goto l158
					}
					goto l152
				l158:
					position, tokenIndex = position152, tokenIndex152
					if !_rules[ruleRankNotho]() {
						goto l150
					}
				}
			l152:
				{
					position159, tokenIndex159 := position, tokenIndex
					{
						position161, tokenIndex161 := position, tokenIndex
						if !_rules[rule_]() {
							goto l161
						}
						goto l162
					l161:
						position, tokenIndex = position161, tokenIndex161
					}
				l162:
					if !_rules[ruleLowerGreek]() {
						goto l159
					}
					{
						position163, tokenIndex163 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l164
						}
						position++
						goto l163
					l164:
						position, tokenIndex = position163, tokenIndex163
						{
							position165, tokenIndex165 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l159
							}
							position, tokenIndex = position165, tokenIndex165
						}
					}
				l163:
					goto l160
				l159:
					position, tokenIndex = position159, tokenIndex159
				}
			l160:
				add(ruleRank, position151)
			}
			return true
		l150:
			position, tokenIndex = position150, tokenIndex150
			return false
		},
		/* 28 RankNotho <- <((('n' 'o' 't' 'h' 'o' (('v' 'a' 'r') / ('f' 'o') / 'f' / ('s' 'u' 'b' 's' 'p') / ('s' 's' 'p') / ('s' 'p') / ('m' 'o' 'r' 't' 'h') / ('s' 'u' 'p' 's' 'p') / ('s' 'u'))) / ('n' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position166, tokenIndex166 := position, tokenIndex
			{
				position167 := position
				{
					position168, tokenIndex168 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l169
					}
					position++
					if buffer[position] != rune('o') {
						goto l169
					}
					position++
					if buffer[position] != rune('t') {
						goto l169
					}
					position++
					if buffer[position] != rune('h') {
						goto l169
					}
					position++
					if buffer[position] != rune('o') {
						goto l169
					}
					position++
					{
						position170, tokenIndex170 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l171
						}
						position++
						if buffer[position] != rune('a') {
							goto l171
						}
						position++
						if buffer[position] != rune('r') {
							goto l171
						}
						position++
						goto l170
					l171:
						position, tokenIndex = position170, tokenIndex170
						if buffer[position] != rune('f') {
							goto l172
						}
						position++
						if buffer[position] != rune('o') {
							goto l172
						}
						position++
						goto l170
					l172:
						position, tokenIndex = position170, tokenIndex170
						if buffer[position] != rune('f') {
							goto l173
						}
						position++
						goto l170
					l173:
						position, tokenIndex = position170, tokenIndex170
						if buffer[position] != rune('s') {
							goto l174
						}
						position++
						if buffer[position] != rune('u') {
							goto l174
						}
						position++
						if buffer[position] != rune('b') {
							goto l174
						}
						position++
						if buffer[position] != rune('s') {
							goto l174
						}
						position++
						if buffer[position] != rune('p') {
							goto l174
						}
						position++
						goto l170
					l174:
						position, tokenIndex = position170, tokenIndex170
						if buffer[position] != rune('s') {
							goto l175
						}
						position++
						if buffer[position] != rune('s') {
							goto l175
						}
						position++
						if buffer[position] != rune('p') {
							goto l175
						}
						position++
						goto l170
					l175:
						position, tokenIndex = position170, tokenIndex170
						if buffer[position] != rune('s') {
							goto l176
						}
						position++
						if buffer[position] != rune('p') {
							goto l176
						}
						position++
						goto l170
					l176:
						position, tokenIndex = position170, tokenIndex170
						if buffer[position] != rune('m') {
							goto l177
						}
						position++
						if buffer[position] != rune('o') {
							goto l177
						}
						position++
						if buffer[position] != rune('r') {
							goto l177
						}
						position++
						if buffer[position] != rune('t') {
							goto l177
						}
						position++
						if buffer[position] != rune('h') {
							goto l177
						}
						position++
						goto l170
					l177:
						position, tokenIndex = position170, tokenIndex170
						if buffer[position] != rune('s') {
							goto l178
						}
						position++
						if buffer[position] != rune('u') {
							goto l178
						}
						position++
						if buffer[position] != rune('p') {
							goto l178
						}
						position++
						if buffer[position] != rune('s') {
							goto l178
						}
						position++
						if buffer[position] != rune('p') {
							goto l178
						}
						position++
						goto l170
					l178:
						position, tokenIndex = position170, tokenIndex170
						if buffer[position] != rune('s') {
							goto l169
						}
						position++
						if buffer[position] != rune('u') {
							goto l169
						}
						position++
					}
				l170:
					goto l168
				l169:
					position, tokenIndex = position168, tokenIndex168
					if buffer[position] != rune('n') {
						goto l166
					}
					position++
					if buffer[position] != rune('v') {
						goto l166
					}
					position++
					if buffer[position] != rune('a') {
						goto l166
					}
					position++
					if buffer[position] != rune('r') {
						goto l166
					}
					position++
				}
			l168:
				{
					position179, tokenIndex179 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l180
					}
					position++
					goto l179
				l180:
					position, tokenIndex = position179, tokenIndex179
					{
						position181, tokenIndex181 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l166
						}
						position, tokenIndex = position181, tokenIndex181
					}
				}
			l179:
				add(ruleRankNotho, position167)
			}
			return true
		l166:
			position, tokenIndex = position166, tokenIndex166
			return false
		},
		/* 29 RankOtherUncommon <- <(('*' / ('n' 'a' 't' 'i' 'o') / ('n' 'a' 't' '.') / ('n' 'a' 't') / ('f' '.' 's' 'p') / 'α' / ('β' 'β') / 'β' / 'γ' / 'δ' / 'ε' / 'φ' / 'θ' / 'μ' / ('a' '.') / ('b' '.') / ('c' '.') / ('d' '.') / ('e' '.') / ('g' '.') / ('k' '.') / ('m' 'u' 't' '.')) &SpaceCharEOI)> */
		func() bool {
			position182, tokenIndex182 := position, tokenIndex
			{
				position183 := position
				{
					position184, tokenIndex184 := position, tokenIndex
					if buffer[position] != rune('*') {
						goto l185
					}
					position++
					goto l184
				l185:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('n') {
						goto l186
					}
					position++
					if buffer[position] != rune('a') {
						goto l186
					}
					position++
					if buffer[position] != rune('t') {
						goto l186
					}
					position++
					if buffer[position] != rune('i') {
						goto l186
					}
					position++
					if buffer[position] != rune('o') {
						goto l186
					}
					position++
					goto l184
				l186:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('n') {
						goto l187
					}
					position++
					if buffer[position] != rune('a') {
						goto l187
					}
					position++
					if buffer[position] != rune('t') {
						goto l187
					}
					position++
					if buffer[position] != rune('.') {
						goto l187
					}
					position++
					goto l184
				l187:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('n') {
						goto l188
					}
					position++
					if buffer[position] != rune('a') {
						goto l188
					}
					position++
					if buffer[position] != rune('t') {
						goto l188
					}
					position++
					goto l184
				l188:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('f') {
						goto l189
					}
					position++
					if buffer[position] != rune('.') {
						goto l189
					}
					position++
					if buffer[position] != rune('s') {
						goto l189
					}
					position++
					if buffer[position] != rune('p') {
						goto l189
					}
					position++
					goto l184
				l189:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('α') {
						goto l190
					}
					position++
					goto l184
				l190:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('β') {
						goto l191
					}
					position++
					if buffer[position] != rune('β') {
						goto l191
					}
					position++
					goto l184
				l191:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('β') {
						goto l192
					}
					position++
					goto l184
				l192:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('γ') {
						goto l193
					}
					position++
					goto l184
				l193:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('δ') {
						goto l194
					}
					position++
					goto l184
				l194:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('ε') {
						goto l195
					}
					position++
					goto l184
				l195:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('φ') {
						goto l196
					}
					position++
					goto l184
				l196:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('θ') {
						goto l197
					}
					position++
					goto l184
				l197:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('μ') {
						goto l198
					}
					position++
					goto l184
				l198:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('a') {
						goto l199
					}
					position++
					if buffer[position] != rune('.') {
						goto l199
					}
					position++
					goto l184
				l199:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('b') {
						goto l200
					}
					position++
					if buffer[position] != rune('.') {
						goto l200
					}
					position++
					goto l184
				l200:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('c') {
						goto l201
					}
					position++
					if buffer[position] != rune('.') {
						goto l201
					}
					position++
					goto l184
				l201:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('d') {
						goto l202
					}
					position++
					if buffer[position] != rune('.') {
						goto l202
					}
					position++
					goto l184
				l202:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('e') {
						goto l203
					}
					position++
					if buffer[position] != rune('.') {
						goto l203
					}
					position++
					goto l184
				l203:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('g') {
						goto l204
					}
					position++
					if buffer[position] != rune('.') {
						goto l204
					}
					position++
					goto l184
				l204:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('k') {
						goto l205
					}
					position++
					if buffer[position] != rune('.') {
						goto l205
					}
					position++
					goto l184
				l205:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('m') {
						goto l182
					}
					position++
					if buffer[position] != rune('u') {
						goto l182
					}
					position++
					if buffer[position] != rune('t') {
						goto l182
					}
					position++
					if buffer[position] != rune('.') {
						goto l182
					}
					position++
				}
			l184:
				{
					position206, tokenIndex206 := position, tokenIndex
					if !_rules[ruleSpaceCharEOI]() {
						goto l182
					}
					position, tokenIndex = position206, tokenIndex206
				}
				add(ruleRankOtherUncommon, position183)
			}
			return true
		l182:
			position, tokenIndex = position182, tokenIndex182
			return false
		},
		/* 30 RankOther <- <((('m' 'o' 'r' 'p' 'h') / ('c' 'o' 'n' 'v' 'a' 'r') / ('p' 's' 'e' 'u' 'd' 'o' 'v' 'a' 'r') / ('s' 'e' 'c' 't') / ('s' 'e' 'r') / ('s' 'u' 'b' 'v' 'a' 'r') / ('s' 'u' 'b' 'f') / ('r' 'a' 'c' 'e') / ('p' 'v') / ('p' 'a' 't' 'h' 'o' 'v' 'a' 'r') / ('a' 'b' '.' (_? ('n' '.'))?) / ('s' 't')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position207, tokenIndex207 := position, tokenIndex
			{
				position208 := position
				{
					position209, tokenIndex209 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l210
					}
					position++
					if buffer[position] != rune('o') {
						goto l210
					}
					position++
					if buffer[position] != rune('r') {
						goto l210
					}
					position++
					if buffer[position] != rune('p') {
						goto l210
					}
					position++
					if buffer[position] != rune('h') {
						goto l210
					}
					position++
					goto l209
				l210:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('c') {
						goto l211
					}
					position++
					if buffer[position] != rune('o') {
						goto l211
					}
					position++
					if buffer[position] != rune('n') {
						goto l211
					}
					position++
					if buffer[position] != rune('v') {
						goto l211
					}
					position++
					if buffer[position] != rune('a') {
						goto l211
					}
					position++
					if buffer[position] != rune('r') {
						goto l211
					}
					position++
					goto l209
				l211:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('p') {
						goto l212
					}
					position++
					if buffer[position] != rune('s') {
						goto l212
					}
					position++
					if buffer[position] != rune('e') {
						goto l212
					}
					position++
					if buffer[position] != rune('u') {
						goto l212
					}
					position++
					if buffer[position] != rune('d') {
						goto l212
					}
					position++
					if buffer[position] != rune('o') {
						goto l212
					}
					position++
					if buffer[position] != rune('v') {
						goto l212
					}
					position++
					if buffer[position] != rune('a') {
						goto l212
					}
					position++
					if buffer[position] != rune('r') {
						goto l212
					}
					position++
					goto l209
				l212:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('s') {
						goto l213
					}
					position++
					if buffer[position] != rune('e') {
						goto l213
					}
					position++
					if buffer[position] != rune('c') {
						goto l213
					}
					position++
					if buffer[position] != rune('t') {
						goto l213
					}
					position++
					goto l209
				l213:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('s') {
						goto l214
					}
					position++
					if buffer[position] != rune('e') {
						goto l214
					}
					position++
					if buffer[position] != rune('r') {
						goto l214
					}
					position++
					goto l209
				l214:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('s') {
						goto l215
					}
					position++
					if buffer[position] != rune('u') {
						goto l215
					}
					position++
					if buffer[position] != rune('b') {
						goto l215
					}
					position++
					if buffer[position] != rune('v') {
						goto l215
					}
					position++
					if buffer[position] != rune('a') {
						goto l215
					}
					position++
					if buffer[position] != rune('r') {
						goto l215
					}
					position++
					goto l209
				l215:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('s') {
						goto l216
					}
					position++
					if buffer[position] != rune('u') {
						goto l216
					}
					position++
					if buffer[position] != rune('b') {
						goto l216
					}
					position++
					if buffer[position] != rune('f') {
						goto l216
					}
					position++
					goto l209
				l216:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('r') {
						goto l217
					}
					position++
					if buffer[position] != rune('a') {
						goto l217
					}
					position++
					if buffer[position] != rune('c') {
						goto l217
					}
					position++
					if buffer[position] != rune('e') {
						goto l217
					}
					position++
					goto l209
				l217:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('p') {
						goto l218
					}
					position++
					if buffer[position] != rune('v') {
						goto l218
					}
					position++
					goto l209
				l218:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('p') {
						goto l219
					}
					position++
					if buffer[position] != rune('a') {
						goto l219
					}
					position++
					if buffer[position] != rune('t') {
						goto l219
					}
					position++
					if buffer[position] != rune('h') {
						goto l219
					}
					position++
					if buffer[position] != rune('o') {
						goto l219
					}
					position++
					if buffer[position] != rune('v') {
						goto l219
					}
					position++
					if buffer[position] != rune('a') {
						goto l219
					}
					position++
					if buffer[position] != rune('r') {
						goto l219
					}
					position++
					goto l209
				l219:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('a') {
						goto l220
					}
					position++
					if buffer[position] != rune('b') {
						goto l220
					}
					position++
					if buffer[position] != rune('.') {
						goto l220
					}
					position++
					{
						position221, tokenIndex221 := position, tokenIndex
						{
							position223, tokenIndex223 := position, tokenIndex
							if !_rules[rule_]() {
								goto l223
							}
							goto l224
						l223:
							position, tokenIndex = position223, tokenIndex223
						}
					l224:
						if buffer[position] != rune('n') {
							goto l221
						}
						position++
						if buffer[position] != rune('.') {
							goto l221
						}
						position++
						goto l222
					l221:
						position, tokenIndex = position221, tokenIndex221
					}
				l222:
					goto l209
				l220:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('s') {
						goto l207
					}
					position++
					if buffer[position] != rune('t') {
						goto l207
					}
					position++
				}
			l209:
				{
					position225, tokenIndex225 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l226
					}
					position++
					goto l225
				l226:
					position, tokenIndex = position225, tokenIndex225
					{
						position227, tokenIndex227 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l207
						}
						position, tokenIndex = position227, tokenIndex227
					}
				}
			l225:
				add(ruleRankOther, position208)
			}
			return true
		l207:
			position, tokenIndex = position207, tokenIndex207
			return false
		},
		/* 31 RankVar <- <((('v' 'a' 'r' 'i' 'e' 't' 'y') / ('[' 'v' 'a' 'r' '.' ']') / ('v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position228, tokenIndex228 := position, tokenIndex
			{
				position229 := position
				{
					position230, tokenIndex230 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l231
					}
					position++
					if buffer[position] != rune('a') {
						goto l231
					}
					position++
					if buffer[position] != rune('r') {
						goto l231
					}
					position++
					if buffer[position] != rune('i') {
						goto l231
					}
					position++
					if buffer[position] != rune('e') {
						goto l231
					}
					position++
					if buffer[position] != rune('t') {
						goto l231
					}
					position++
					if buffer[position] != rune('y') {
						goto l231
					}
					position++
					goto l230
				l231:
					position, tokenIndex = position230, tokenIndex230
					if buffer[position] != rune('[') {
						goto l232
					}
					position++
					if buffer[position] != rune('v') {
						goto l232
					}
					position++
					if buffer[position] != rune('a') {
						goto l232
					}
					position++
					if buffer[position] != rune('r') {
						goto l232
					}
					position++
					if buffer[position] != rune('.') {
						goto l232
					}
					position++
					if buffer[position] != rune(']') {
						goto l232
					}
					position++
					goto l230
				l232:
					position, tokenIndex = position230, tokenIndex230
					if buffer[position] != rune('v') {
						goto l228
					}
					position++
					if buffer[position] != rune('a') {
						goto l228
					}
					position++
					if buffer[position] != rune('r') {
						goto l228
					}
					position++
				}
			l230:
				{
					position233, tokenIndex233 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l234
					}
					position++
					goto l233
				l234:
					position, tokenIndex = position233, tokenIndex233
					{
						position235, tokenIndex235 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l228
						}
						position, tokenIndex = position235, tokenIndex235
					}
				}
			l233:
				add(ruleRankVar, position229)
			}
			return true
		l228:
			position, tokenIndex = position228, tokenIndex228
			return false
		},
		/* 32 RankForma <- <((('f' 'o' 'r' 'm' 'a') / ('f' 'm' 'a') / ('f' 'm') / ('f' 'o' 'r' 'm') / ('f' 'o') / 'f') ('.' / &SpaceCharEOI))> */
		func() bool {
			position236, tokenIndex236 := position, tokenIndex
			{
				position237 := position
				{
					position238, tokenIndex238 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l239
					}
					position++
					if buffer[position] != rune('o') {
						goto l239
					}
					position++
					if buffer[position] != rune('r') {
						goto l239
					}
					position++
					if buffer[position] != rune('m') {
						goto l239
					}
					position++
					if buffer[position] != rune('a') {
						goto l239
					}
					position++
					goto l238
				l239:
					position, tokenIndex = position238, tokenIndex238
					if buffer[position] != rune('f') {
						goto l240
					}
					position++
					if buffer[position] != rune('m') {
						goto l240
					}
					position++
					if buffer[position] != rune('a') {
						goto l240
					}
					position++
					goto l238
				l240:
					position, tokenIndex = position238, tokenIndex238
					if buffer[position] != rune('f') {
						goto l241
					}
					position++
					if buffer[position] != rune('m') {
						goto l241
					}
					position++
					goto l238
				l241:
					position, tokenIndex = position238, tokenIndex238
					if buffer[position] != rune('f') {
						goto l242
					}
					position++
					if buffer[position] != rune('o') {
						goto l242
					}
					position++
					if buffer[position] != rune('r') {
						goto l242
					}
					position++
					if buffer[position] != rune('m') {
						goto l242
					}
					position++
					goto l238
				l242:
					position, tokenIndex = position238, tokenIndex238
					if buffer[position] != rune('f') {
						goto l243
					}
					position++
					if buffer[position] != rune('o') {
						goto l243
					}
					position++
					goto l238
				l243:
					position, tokenIndex = position238, tokenIndex238
					if buffer[position] != rune('f') {
						goto l236
					}
					position++
				}
			l238:
				{
					position244, tokenIndex244 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l245
					}
					position++
					goto l244
				l245:
					position, tokenIndex = position244, tokenIndex244
					{
						position246, tokenIndex246 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l236
						}
						position, tokenIndex = position246, tokenIndex246
					}
				}
			l244:
				add(ruleRankForma, position237)
			}
			return true
		l236:
			position, tokenIndex = position236, tokenIndex236
			return false
		},
		/* 33 RankSsp <- <((('s' 's' 'p') / ('s' 'u' 'b' 's' 'p' 'e' 'c') / ('s' 'u' 'b' 's' 'p')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position247, tokenIndex247 := position, tokenIndex
			{
				position248 := position
				{
					position249, tokenIndex249 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l250
					}
					position++
					if buffer[position] != rune('s') {
						goto l250
					}
					position++
					if buffer[position] != rune('p') {
						goto l250
					}
					position++
					goto l249
				l250:
					position, tokenIndex = position249, tokenIndex249
					if buffer[position] != rune('s') {
						goto l251
					}
					position++
					if buffer[position] != rune('u') {
						goto l251
					}
					position++
					if buffer[position] != rune('b') {
						goto l251
					}
					position++
					if buffer[position] != rune('s') {
						goto l251
					}
					position++
					if buffer[position] != rune('p') {
						goto l251
					}
					position++
					if buffer[position] != rune('e') {
						goto l251
					}
					position++
					if buffer[position] != rune('c') {
						goto l251
					}
					position++
					goto l249
				l251:
					position, tokenIndex = position249, tokenIndex249
					if buffer[position] != rune('s') {
						goto l247
					}
					position++
					if buffer[position] != rune('u') {
						goto l247
					}
					position++
					if buffer[position] != rune('b') {
						goto l247
					}
					position++
					if buffer[position] != rune('s') {
						goto l247
					}
					position++
					if buffer[position] != rune('p') {
						goto l247
					}
					position++
				}
			l249:
				{
					position252, tokenIndex252 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l253
					}
					position++
					goto l252
				l253:
					position, tokenIndex = position252, tokenIndex252
					{
						position254, tokenIndex254 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l247
						}
						position, tokenIndex = position254, tokenIndex254
					}
				}
			l252:
				add(ruleRankSsp, position248)
			}
			return true
		l247:
			position, tokenIndex = position247, tokenIndex247
			return false
		},
		/* 34 RankAgamo <- <((('a' 'g' 'a' 'm' 'o' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 's' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position255, tokenIndex255 := position, tokenIndex
			{
				position256 := position
				{
					position257, tokenIndex257 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l258
					}
					position++
					if buffer[position] != rune('g') {
						goto l258
					}
					position++
					if buffer[position] != rune('a') {
						goto l258
					}
					position++
					if buffer[position] != rune('m') {
						goto l258
					}
					position++
					if buffer[position] != rune('o') {
						goto l258
					}
					position++
					if buffer[position] != rune('s') {
						goto l258
					}
					position++
					if buffer[position] != rune('p') {
						goto l258
					}
					position++
					goto l257
				l258:
					position, tokenIndex = position257, tokenIndex257
					if buffer[position] != rune('a') {
						goto l259
					}
					position++
					if buffer[position] != rune('g') {
						goto l259
					}
					position++
					if buffer[position] != rune('a') {
						goto l259
					}
					position++
					if buffer[position] != rune('m') {
						goto l259
					}
					position++
					if buffer[position] != rune('o') {
						goto l259
					}
					position++
					if buffer[position] != rune('s') {
						goto l259
					}
					position++
					if buffer[position] != rune('s') {
						goto l259
					}
					position++
					if buffer[position] != rune('p') {
						goto l259
					}
					position++
					goto l257
				l259:
					position, tokenIndex = position257, tokenIndex257
					if buffer[position] != rune('a') {
						goto l255
					}
					position++
					if buffer[position] != rune('g') {
						goto l255
					}
					position++
					if buffer[position] != rune('a') {
						goto l255
					}
					position++
					if buffer[position] != rune('m') {
						goto l255
					}
					position++
					if buffer[position] != rune('o') {
						goto l255
					}
					position++
					if buffer[position] != rune('v') {
						goto l255
					}
					position++
					if buffer[position] != rune('a') {
						goto l255
					}
					position++
					if buffer[position] != rune('r') {
						goto l255
					}
					position++
				}
			l257:
				{
					position260, tokenIndex260 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l261
					}
					position++
					goto l260
				l261:
					position, tokenIndex = position260, tokenIndex260
					{
						position262, tokenIndex262 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l255
						}
						position, tokenIndex = position262, tokenIndex262
					}
				}
			l260:
				add(ruleRankAgamo, position256)
			}
			return true
		l255:
			position, tokenIndex = position255, tokenIndex255
			return false
		},
		/* 35 SubgenusOrSuperspecies <- <('(' _? NameLowerChar+ _? ')')> */
		func() bool {
			position263, tokenIndex263 := position, tokenIndex
			{
				position264 := position
				if buffer[position] != rune('(') {
					goto l263
				}
				position++
				{
					position265, tokenIndex265 := position, tokenIndex
					if !_rules[rule_]() {
						goto l265
					}
					goto l266
				l265:
					position, tokenIndex = position265, tokenIndex265
				}
			l266:
				if !_rules[ruleNameLowerChar]() {
					goto l263
				}
			l267:
				{
					position268, tokenIndex268 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l268
					}
					goto l267
				l268:
					position, tokenIndex = position268, tokenIndex268
				}
				{
					position269, tokenIndex269 := position, tokenIndex
					if !_rules[rule_]() {
						goto l269
					}
					goto l270
				l269:
					position, tokenIndex = position269, tokenIndex269
				}
			l270:
				if buffer[position] != rune(')') {
					goto l263
				}
				position++
				add(ruleSubgenusOrSuperspecies, position264)
			}
			return true
		l263:
			position, tokenIndex = position263, tokenIndex263
			return false
		},
		/* 36 Subgenus <- <(Subgenus2 / Subgenus1)> */
		func() bool {
			position271, tokenIndex271 := position, tokenIndex
			{
				position272 := position
				{
					position273, tokenIndex273 := position, tokenIndex
					if !_rules[ruleSubgenus2]() {
						goto l274
					}
					goto l273
				l274:
					position, tokenIndex = position273, tokenIndex273
					if !_rules[ruleSubgenus1]() {
						goto l271
					}
				}
			l273:
				add(ruleSubgenus, position272)
			}
			return true
		l271:
			position, tokenIndex = position271, tokenIndex271
			return false
		},
		/* 37 Subgenus2 <- <('(' _? AbbrSubgenus _? ')' !(_? NameUpperChar))> */
		func() bool {
			position275, tokenIndex275 := position, tokenIndex
			{
				position276 := position
				if buffer[position] != rune('(') {
					goto l275
				}
				position++
				{
					position277, tokenIndex277 := position, tokenIndex
					if !_rules[rule_]() {
						goto l277
					}
					goto l278
				l277:
					position, tokenIndex = position277, tokenIndex277
				}
			l278:
				if !_rules[ruleAbbrSubgenus]() {
					goto l275
				}
				{
					position279, tokenIndex279 := position, tokenIndex
					if !_rules[rule_]() {
						goto l279
					}
					goto l280
				l279:
					position, tokenIndex = position279, tokenIndex279
				}
			l280:
				if buffer[position] != rune(')') {
					goto l275
				}
				position++
				{
					position281, tokenIndex281 := position, tokenIndex
					{
						position282, tokenIndex282 := position, tokenIndex
						if !_rules[rule_]() {
							goto l282
						}
						goto l283
					l282:
						position, tokenIndex = position282, tokenIndex282
					}
				l283:
					if !_rules[ruleNameUpperChar]() {
						goto l281
					}
					goto l275
				l281:
					position, tokenIndex = position281, tokenIndex281
				}
				add(ruleSubgenus2, position276)
			}
			return true
		l275:
			position, tokenIndex = position275, tokenIndex275
			return false
		},
		/* 38 Subgenus1 <- <('(' _? UninomialWord _? ')')> */
		func() bool {
			position284, tokenIndex284 := position, tokenIndex
			{
				position285 := position
				if buffer[position] != rune('(') {
					goto l284
				}
				position++
				{
					position286, tokenIndex286 := position, tokenIndex
					if !_rules[rule_]() {
						goto l286
					}
					goto l287
				l286:
					position, tokenIndex = position286, tokenIndex286
				}
			l287:
				if !_rules[ruleUninomialWord]() {
					goto l284
				}
				{
					position288, tokenIndex288 := position, tokenIndex
					if !_rules[rule_]() {
						goto l288
					}
					goto l289
				l288:
					position, tokenIndex = position288, tokenIndex288
				}
			l289:
				if buffer[position] != rune(')') {
					goto l284
				}
				position++
				add(ruleSubgenus1, position285)
			}
			return true
		l284:
			position, tokenIndex = position284, tokenIndex284
			return false
		},
		/* 39 UninomialCombo <- <(UninomialCombo1 / UninomialCombo2)> */
		func() bool {
			position290, tokenIndex290 := position, tokenIndex
			{
				position291 := position
				{
					position292, tokenIndex292 := position, tokenIndex
					if !_rules[ruleUninomialCombo1]() {
						goto l293
					}
					goto l292
				l293:
					position, tokenIndex = position292, tokenIndex292
					if !_rules[ruleUninomialCombo2]() {
						goto l290
					}
				}
			l292:
				add(ruleUninomialCombo, position291)
			}
			return true
		l290:
			position, tokenIndex = position290, tokenIndex290
			return false
		},
		/* 40 UninomialCombo1 <- <(UninomialWord _? Subgenus (_? Authorship)?)> */
		func() bool {
			position294, tokenIndex294 := position, tokenIndex
			{
				position295 := position
				if !_rules[ruleUninomialWord]() {
					goto l294
				}
				{
					position296, tokenIndex296 := position, tokenIndex
					if !_rules[rule_]() {
						goto l296
					}
					goto l297
				l296:
					position, tokenIndex = position296, tokenIndex296
				}
			l297:
				if !_rules[ruleSubgenus]() {
					goto l294
				}
				{
					position298, tokenIndex298 := position, tokenIndex
					{
						position300, tokenIndex300 := position, tokenIndex
						if !_rules[rule_]() {
							goto l300
						}
						goto l301
					l300:
						position, tokenIndex = position300, tokenIndex300
					}
				l301:
					if !_rules[ruleAuthorship]() {
						goto l298
					}
					goto l299
				l298:
					position, tokenIndex = position298, tokenIndex298
				}
			l299:
				add(ruleUninomialCombo1, position295)
			}
			return true
		l294:
			position, tokenIndex = position294, tokenIndex294
			return false
		},
		/* 41 UninomialCombo2 <- <(Uninomial _ RankUninomial _ Uninomial)> */
		func() bool {
			position302, tokenIndex302 := position, tokenIndex
			{
				position303 := position
				if !_rules[ruleUninomial]() {
					goto l302
				}
				if !_rules[rule_]() {
					goto l302
				}
				if !_rules[ruleRankUninomial]() {
					goto l302
				}
				if !_rules[rule_]() {
					goto l302
				}
				if !_rules[ruleUninomial]() {
					goto l302
				}
				add(ruleUninomialCombo2, position303)
			}
			return true
		l302:
			position, tokenIndex = position302, tokenIndex302
			return false
		},
		/* 42 RankUninomial <- <(RankUninomialPlain / RankUninomialNotho)> */
		func() bool {
			position304, tokenIndex304 := position, tokenIndex
			{
				position305 := position
				{
					position306, tokenIndex306 := position, tokenIndex
					if !_rules[ruleRankUninomialPlain]() {
						goto l307
					}
					goto l306
				l307:
					position, tokenIndex = position306, tokenIndex306
					if !_rules[ruleRankUninomialNotho]() {
						goto l304
					}
				}
			l306:
				add(ruleRankUninomial, position305)
			}
			return true
		l304:
			position, tokenIndex = position304, tokenIndex304
			return false
		},
		/* 43 RankUninomialPlain <- <((('s' 'e' 'c' 't') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('t' 'r' 'i' 'b') / ('s' 'u' 'b' 't' 'r' 'i' 'b') / ('s' 'u' 'b' 's' 'e' 'r') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('f' 'a' 'm') / ('s' 'u' 'b' 'f' 'a' 'm') / ('s' 'u' 'p' 'e' 'r' 't' 'r' 'i' 'b')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position308, tokenIndex308 := position, tokenIndex
			{
				position309 := position
				{
					position310, tokenIndex310 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l311
					}
					position++
					if buffer[position] != rune('e') {
						goto l311
					}
					position++
					if buffer[position] != rune('c') {
						goto l311
					}
					position++
					if buffer[position] != rune('t') {
						goto l311
					}
					position++
					goto l310
				l311:
					position, tokenIndex = position310, tokenIndex310
					if buffer[position] != rune('s') {
						goto l312
					}
					position++
					if buffer[position] != rune('u') {
						goto l312
					}
					position++
					if buffer[position] != rune('b') {
						goto l312
					}
					position++
					if buffer[position] != rune('s') {
						goto l312
					}
					position++
					if buffer[position] != rune('e') {
						goto l312
					}
					position++
					if buffer[position] != rune('c') {
						goto l312
					}
					position++
					if buffer[position] != rune('t') {
						goto l312
					}
					position++
					goto l310
				l312:
					position, tokenIndex = position310, tokenIndex310
					if buffer[position] != rune('t') {
						goto l313
					}
					position++
					if buffer[position] != rune('r') {
						goto l313
					}
					position++
					if buffer[position] != rune('i') {
						goto l313
					}
					position++
					if buffer[position] != rune('b') {
						goto l313
					}
					position++
					goto l310
				l313:
					position, tokenIndex = position310, tokenIndex310
					if buffer[position] != rune('s') {
						goto l314
					}
					position++
					if buffer[position] != rune('u') {
						goto l314
					}
					position++
					if buffer[position] != rune('b') {
						goto l314
					}
					position++
					if buffer[position] != rune('t') {
						goto l314
					}
					position++
					if buffer[position] != rune('r') {
						goto l314
					}
					position++
					if buffer[position] != rune('i') {
						goto l314
					}
					position++
					if buffer[position] != rune('b') {
						goto l314
					}
					position++
					goto l310
				l314:
					position, tokenIndex = position310, tokenIndex310
					if buffer[position] != rune('s') {
						goto l315
					}
					position++
					if buffer[position] != rune('u') {
						goto l315
					}
					position++
					if buffer[position] != rune('b') {
						goto l315
					}
					position++
					if buffer[position] != rune('s') {
						goto l315
					}
					position++
					if buffer[position] != rune('e') {
						goto l315
					}
					position++
					if buffer[position] != rune('r') {
						goto l315
					}
					position++
					goto l310
				l315:
					position, tokenIndex = position310, tokenIndex310
					if buffer[position] != rune('s') {
						goto l316
					}
					position++
					if buffer[position] != rune('e') {
						goto l316
					}
					position++
					if buffer[position] != rune('r') {
						goto l316
					}
					position++
					goto l310
				l316:
					position, tokenIndex = position310, tokenIndex310
					if buffer[position] != rune('s') {
						goto l317
					}
					position++
					if buffer[position] != rune('u') {
						goto l317
					}
					position++
					if buffer[position] != rune('b') {
						goto l317
					}
					position++
					if buffer[position] != rune('g') {
						goto l317
					}
					position++
					if buffer[position] != rune('e') {
						goto l317
					}
					position++
					if buffer[position] != rune('n') {
						goto l317
					}
					position++
					goto l310
				l317:
					position, tokenIndex = position310, tokenIndex310
					if buffer[position] != rune('s') {
						goto l318
					}
					position++
					if buffer[position] != rune('u') {
						goto l318
					}
					position++
					if buffer[position] != rune('b') {
						goto l318
					}
					position++
					if buffer[position] != rune('g') {
						goto l318
					}
					position++
					goto l310
				l318:
					position, tokenIndex = position310, tokenIndex310
					if buffer[position] != rune('f') {
						goto l319
					}
					position++
					if buffer[position] != rune('a') {
						goto l319
					}
					position++
					if buffer[position] != rune('m') {
						goto l319
					}
					position++
					goto l310
				l319:
					position, tokenIndex = position310, tokenIndex310
					if buffer[position] != rune('s') {
						goto l320
					}
					position++
					if buffer[position] != rune('u') {
						goto l320
					}
					position++
					if buffer[position] != rune('b') {
						goto l320
					}
					position++
					if buffer[position] != rune('f') {
						goto l320
					}
					position++
					if buffer[position] != rune('a') {
						goto l320
					}
					position++
					if buffer[position] != rune('m') {
						goto l320
					}
					position++
					goto l310
				l320:
					position, tokenIndex = position310, tokenIndex310
					if buffer[position] != rune('s') {
						goto l308
					}
					position++
					if buffer[position] != rune('u') {
						goto l308
					}
					position++
					if buffer[position] != rune('p') {
						goto l308
					}
					position++
					if buffer[position] != rune('e') {
						goto l308
					}
					position++
					if buffer[position] != rune('r') {
						goto l308
					}
					position++
					if buffer[position] != rune('t') {
						goto l308
					}
					position++
					if buffer[position] != rune('r') {
						goto l308
					}
					position++
					if buffer[position] != rune('i') {
						goto l308
					}
					position++
					if buffer[position] != rune('b') {
						goto l308
					}
					position++
				}
			l310:
				{
					position321, tokenIndex321 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l322
					}
					position++
					goto l321
				l322:
					position, tokenIndex = position321, tokenIndex321
					{
						position323, tokenIndex323 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l308
						}
						position, tokenIndex = position323, tokenIndex323
					}
				}
			l321:
				add(ruleRankUninomialPlain, position309)
			}
			return true
		l308:
			position, tokenIndex = position308, tokenIndex308
			return false
		},
		/* 44 RankUninomialNotho <- <('n' 'o' 't' 'h' 'o' _? (('s' 'e' 'c' 't') / ('g' 'e' 'n') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'e' 'n') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('s' 'u' 'b' 't' 'r' 'i' 'b')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position324, tokenIndex324 := position, tokenIndex
			{
				position325 := position
				if buffer[position] != rune('n') {
					goto l324
				}
				position++
				if buffer[position] != rune('o') {
					goto l324
				}
				position++
				if buffer[position] != rune('t') {
					goto l324
				}
				position++
				if buffer[position] != rune('h') {
					goto l324
				}
				position++
				if buffer[position] != rune('o') {
					goto l324
				}
				position++
				{
					position326, tokenIndex326 := position, tokenIndex
					if !_rules[rule_]() {
						goto l326
					}
					goto l327
				l326:
					position, tokenIndex = position326, tokenIndex326
				}
			l327:
				{
					position328, tokenIndex328 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l329
					}
					position++
					if buffer[position] != rune('e') {
						goto l329
					}
					position++
					if buffer[position] != rune('c') {
						goto l329
					}
					position++
					if buffer[position] != rune('t') {
						goto l329
					}
					position++
					goto l328
				l329:
					position, tokenIndex = position328, tokenIndex328
					if buffer[position] != rune('g') {
						goto l330
					}
					position++
					if buffer[position] != rune('e') {
						goto l330
					}
					position++
					if buffer[position] != rune('n') {
						goto l330
					}
					position++
					goto l328
				l330:
					position, tokenIndex = position328, tokenIndex328
					if buffer[position] != rune('s') {
						goto l331
					}
					position++
					if buffer[position] != rune('e') {
						goto l331
					}
					position++
					if buffer[position] != rune('r') {
						goto l331
					}
					position++
					goto l328
				l331:
					position, tokenIndex = position328, tokenIndex328
					if buffer[position] != rune('s') {
						goto l332
					}
					position++
					if buffer[position] != rune('u') {
						goto l332
					}
					position++
					if buffer[position] != rune('b') {
						goto l332
					}
					position++
					if buffer[position] != rune('g') {
						goto l332
					}
					position++
					if buffer[position] != rune('e') {
						goto l332
					}
					position++
					if buffer[position] != rune('e') {
						goto l332
					}
					position++
					if buffer[position] != rune('n') {
						goto l332
					}
					position++
					goto l328
				l332:
					position, tokenIndex = position328, tokenIndex328
					if buffer[position] != rune('s') {
						goto l333
					}
					position++
					if buffer[position] != rune('u') {
						goto l333
					}
					position++
					if buffer[position] != rune('b') {
						goto l333
					}
					position++
					if buffer[position] != rune('g') {
						goto l333
					}
					position++
					if buffer[position] != rune('e') {
						goto l333
					}
					position++
					if buffer[position] != rune('n') {
						goto l333
					}
					position++
					goto l328
				l333:
					position, tokenIndex = position328, tokenIndex328
					if buffer[position] != rune('s') {
						goto l334
					}
					position++
					if buffer[position] != rune('u') {
						goto l334
					}
					position++
					if buffer[position] != rune('b') {
						goto l334
					}
					position++
					if buffer[position] != rune('g') {
						goto l334
					}
					position++
					goto l328
				l334:
					position, tokenIndex = position328, tokenIndex328
					if buffer[position] != rune('s') {
						goto l335
					}
					position++
					if buffer[position] != rune('u') {
						goto l335
					}
					position++
					if buffer[position] != rune('b') {
						goto l335
					}
					position++
					if buffer[position] != rune('s') {
						goto l335
					}
					position++
					if buffer[position] != rune('e') {
						goto l335
					}
					position++
					if buffer[position] != rune('c') {
						goto l335
					}
					position++
					if buffer[position] != rune('t') {
						goto l335
					}
					position++
					goto l328
				l335:
					position, tokenIndex = position328, tokenIndex328
					if buffer[position] != rune('s') {
						goto l324
					}
					position++
					if buffer[position] != rune('u') {
						goto l324
					}
					position++
					if buffer[position] != rune('b') {
						goto l324
					}
					position++
					if buffer[position] != rune('t') {
						goto l324
					}
					position++
					if buffer[position] != rune('r') {
						goto l324
					}
					position++
					if buffer[position] != rune('i') {
						goto l324
					}
					position++
					if buffer[position] != rune('b') {
						goto l324
					}
					position++
				}
			l328:
				{
					position336, tokenIndex336 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l337
					}
					position++
					goto l336
				l337:
					position, tokenIndex = position336, tokenIndex336
					{
						position338, tokenIndex338 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l324
						}
						position, tokenIndex = position338, tokenIndex338
					}
				}
			l336:
				add(ruleRankUninomialNotho, position325)
			}
			return true
		l324:
			position, tokenIndex = position324, tokenIndex324
			return false
		},
		/* 45 Uninomial <- <(UninomialWord (_ Authorship !(_ LowerCharExtended LowerCharExtended LowerCharExtended))?)> */
		func() bool {
			position339, tokenIndex339 := position, tokenIndex
			{
				position340 := position
				if !_rules[ruleUninomialWord]() {
					goto l339
				}
				{
					position341, tokenIndex341 := position, tokenIndex
					if !_rules[rule_]() {
						goto l341
					}
					if !_rules[ruleAuthorship]() {
						goto l341
					}
					{
						position343, tokenIndex343 := position, tokenIndex
						if !_rules[rule_]() {
							goto l343
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l343
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l343
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l343
						}
						goto l341
					l343:
						position, tokenIndex = position343, tokenIndex343
					}
					goto l342
				l341:
					position, tokenIndex = position341, tokenIndex341
				}
			l342:
				add(ruleUninomial, position340)
			}
			return true
		l339:
			position, tokenIndex = position339, tokenIndex339
			return false
		},
		/* 46 UninomialWord <- <(CapWord / TwoLetterGenus)> */
		func() bool {
			position344, tokenIndex344 := position, tokenIndex
			{
				position345 := position
				{
					position346, tokenIndex346 := position, tokenIndex
					if !_rules[ruleCapWord]() {
						goto l347
					}
					goto l346
				l347:
					position, tokenIndex = position346, tokenIndex346
					if !_rules[ruleTwoLetterGenus]() {
						goto l344
					}
				}
			l346:
				add(ruleUninomialWord, position345)
			}
			return true
		l344:
			position, tokenIndex = position344, tokenIndex344
			return false
		},
		/* 47 AbbrSubgenus <- <(UpperChar LowerChar* '.')> */
		func() bool {
			position348, tokenIndex348 := position, tokenIndex
			{
				position349 := position
				if !_rules[ruleUpperChar]() {
					goto l348
				}
			l350:
				{
					position351, tokenIndex351 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l351
					}
					goto l350
				l351:
					position, tokenIndex = position351, tokenIndex351
				}
				if buffer[position] != rune('.') {
					goto l348
				}
				position++
				add(ruleAbbrSubgenus, position349)
			}
			return true
		l348:
			position, tokenIndex = position348, tokenIndex348
			return false
		},
		/* 48 AbbrGenus <- <(UpperChar LowerChar? '.')> */
		func() bool {
			position352, tokenIndex352 := position, tokenIndex
			{
				position353 := position
				if !_rules[ruleUpperChar]() {
					goto l352
				}
				{
					position354, tokenIndex354 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l354
					}
					goto l355
				l354:
					position, tokenIndex = position354, tokenIndex354
				}
			l355:
				if buffer[position] != rune('.') {
					goto l352
				}
				position++
				add(ruleAbbrGenus, position353)
			}
			return true
		l352:
			position, tokenIndex = position352, tokenIndex352
			return false
		},
		/* 49 CapWord <- <(CapWordWithDash / CapWord1)> */
		func() bool {
			position356, tokenIndex356 := position, tokenIndex
			{
				position357 := position
				{
					position358, tokenIndex358 := position, tokenIndex
					if !_rules[ruleCapWordWithDash]() {
						goto l359
					}
					goto l358
				l359:
					position, tokenIndex = position358, tokenIndex358
					if !_rules[ruleCapWord1]() {
						goto l356
					}
				}
			l358:
				add(ruleCapWord, position357)
			}
			return true
		l356:
			position, tokenIndex = position356, tokenIndex356
			return false
		},
		/* 50 CapWord1 <- <(NameUpperChar NameLowerChar NameLowerChar+ '?'?)> */
		func() bool {
			position360, tokenIndex360 := position, tokenIndex
			{
				position361 := position
				if !_rules[ruleNameUpperChar]() {
					goto l360
				}
				if !_rules[ruleNameLowerChar]() {
					goto l360
				}
				if !_rules[ruleNameLowerChar]() {
					goto l360
				}
			l362:
				{
					position363, tokenIndex363 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l363
					}
					goto l362
				l363:
					position, tokenIndex = position363, tokenIndex363
				}
				{
					position364, tokenIndex364 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l364
					}
					position++
					goto l365
				l364:
					position, tokenIndex = position364, tokenIndex364
				}
			l365:
				add(ruleCapWord1, position361)
			}
			return true
		l360:
			position, tokenIndex = position360, tokenIndex360
			return false
		},
		/* 51 CapWordWithDash <- <(CapWord1 Dash (UpperAfterDash / LowerAfterDash))> */
		func() bool {
			position366, tokenIndex366 := position, tokenIndex
			{
				position367 := position
				if !_rules[ruleCapWord1]() {
					goto l366
				}
				if !_rules[ruleDash]() {
					goto l366
				}
				{
					position368, tokenIndex368 := position, tokenIndex
					if !_rules[ruleUpperAfterDash]() {
						goto l369
					}
					goto l368
				l369:
					position, tokenIndex = position368, tokenIndex368
					if !_rules[ruleLowerAfterDash]() {
						goto l366
					}
				}
			l368:
				add(ruleCapWordWithDash, position367)
			}
			return true
		l366:
			position, tokenIndex = position366, tokenIndex366
			return false
		},
		/* 52 UpperAfterDash <- <CapWord1> */
		func() bool {
			position370, tokenIndex370 := position, tokenIndex
			{
				position371 := position
				if !_rules[ruleCapWord1]() {
					goto l370
				}
				add(ruleUpperAfterDash, position371)
			}
			return true
		l370:
			position, tokenIndex = position370, tokenIndex370
			return false
		},
		/* 53 LowerAfterDash <- <Word1> */
		func() bool {
			position372, tokenIndex372 := position, tokenIndex
			{
				position373 := position
				if !_rules[ruleWord1]() {
					goto l372
				}
				add(ruleLowerAfterDash, position373)
			}
			return true
		l372:
			position, tokenIndex = position372, tokenIndex372
			return false
		},
		/* 54 TwoLetterGenus <- <(('C' 'a') / ('D' 'o') / ('E' 'a') / ('G' 'e') / ('I' 'a') / ('I' 'o') / ('I' 'x') / ('L' 'o') / ('O' 'a') / ('O' 'o') / ('N' 'u') / ('R' 'a') / ('T' 'y') / ('U' 'a') / ('A' 'a') / ('J' 'a') / ('Z' 'u') / ('L' 'a') / ('Q' 'u') / ('A' 's') / ('B' 'a'))> */
		func() bool {
			position374, tokenIndex374 := position, tokenIndex
			{
				position375 := position
				{
					position376, tokenIndex376 := position, tokenIndex
					if buffer[position] != rune('C') {
						goto l377
					}
					position++
					if buffer[position] != rune('a') {
						goto l377
					}
					position++
					goto l376
				l377:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('D') {
						goto l378
					}
					position++
					if buffer[position] != rune('o') {
						goto l378
					}
					position++
					goto l376
				l378:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('E') {
						goto l379
					}
					position++
					if buffer[position] != rune('a') {
						goto l379
					}
					position++
					goto l376
				l379:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('G') {
						goto l380
					}
					position++
					if buffer[position] != rune('e') {
						goto l380
					}
					position++
					goto l376
				l380:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('I') {
						goto l381
					}
					position++
					if buffer[position] != rune('a') {
						goto l381
					}
					position++
					goto l376
				l381:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('I') {
						goto l382
					}
					position++
					if buffer[position] != rune('o') {
						goto l382
					}
					position++
					goto l376
				l382:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('I') {
						goto l383
					}
					position++
					if buffer[position] != rune('x') {
						goto l383
					}
					position++
					goto l376
				l383:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('L') {
						goto l384
					}
					position++
					if buffer[position] != rune('o') {
						goto l384
					}
					position++
					goto l376
				l384:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('O') {
						goto l385
					}
					position++
					if buffer[position] != rune('a') {
						goto l385
					}
					position++
					goto l376
				l385:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('O') {
						goto l386
					}
					position++
					if buffer[position] != rune('o') {
						goto l386
					}
					position++
					goto l376
				l386:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('N') {
						goto l387
					}
					position++
					if buffer[position] != rune('u') {
						goto l387
					}
					position++
					goto l376
				l387:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('R') {
						goto l388
					}
					position++
					if buffer[position] != rune('a') {
						goto l388
					}
					position++
					goto l376
				l388:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('T') {
						goto l389
					}
					position++
					if buffer[position] != rune('y') {
						goto l389
					}
					position++
					goto l376
				l389:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('U') {
						goto l390
					}
					position++
					if buffer[position] != rune('a') {
						goto l390
					}
					position++
					goto l376
				l390:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('A') {
						goto l391
					}
					position++
					if buffer[position] != rune('a') {
						goto l391
					}
					position++
					goto l376
				l391:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('J') {
						goto l392
					}
					position++
					if buffer[position] != rune('a') {
						goto l392
					}
					position++
					goto l376
				l392:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('Z') {
						goto l393
					}
					position++
					if buffer[position] != rune('u') {
						goto l393
					}
					position++
					goto l376
				l393:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('L') {
						goto l394
					}
					position++
					if buffer[position] != rune('a') {
						goto l394
					}
					position++
					goto l376
				l394:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('Q') {
						goto l395
					}
					position++
					if buffer[position] != rune('u') {
						goto l395
					}
					position++
					goto l376
				l395:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('A') {
						goto l396
					}
					position++
					if buffer[position] != rune('s') {
						goto l396
					}
					position++
					goto l376
				l396:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('B') {
						goto l374
					}
					position++
					if buffer[position] != rune('a') {
						goto l374
					}
					position++
				}
			l376:
				add(ruleTwoLetterGenus, position375)
			}
			return true
		l374:
			position, tokenIndex = position374, tokenIndex374
			return false
		},
		/* 55 Word <- <(!((('e' 'x') / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd') / ('p' 'r' 'o') / ('c' 'v') / ('c' 'u' 'l' 't' 'i' 'v' 'a' 'r') / AuthorPrefix / RankUninomial / Approximation / Word4) SpaceCharEOI) (WordApostr / WordStartsWithDigit / MultiDashedWord / Word2 / Word1) &(SpaceCharEOI / '('))> */
		func() bool {
			position397, tokenIndex397 := position, tokenIndex
			{
				position398 := position
				{
					position399, tokenIndex399 := position, tokenIndex
					{
						position400, tokenIndex400 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l401
						}
						position++
						if buffer[position] != rune('x') {
							goto l401
						}
						position++
						goto l400
					l401:
						position, tokenIndex = position400, tokenIndex400
						if buffer[position] != rune('e') {
							goto l402
						}
						position++
						if buffer[position] != rune('t') {
							goto l402
						}
						position++
						goto l400
					l402:
						position, tokenIndex = position400, tokenIndex400
						if buffer[position] != rune('a') {
							goto l403
						}
						position++
						if buffer[position] != rune('n') {
							goto l403
						}
						position++
						if buffer[position] != rune('d') {
							goto l403
						}
						position++
						goto l400
					l403:
						position, tokenIndex = position400, tokenIndex400
						if buffer[position] != rune('a') {
							goto l404
						}
						position++
						if buffer[position] != rune('p') {
							goto l404
						}
						position++
						if buffer[position] != rune('u') {
							goto l404
						}
						position++
						if buffer[position] != rune('d') {
							goto l404
						}
						position++
						goto l400
					l404:
						position, tokenIndex = position400, tokenIndex400
						if buffer[position] != rune('p') {
							goto l405
						}
						position++
						if buffer[position] != rune('r') {
							goto l405
						}
						position++
						if buffer[position] != rune('o') {
							goto l405
						}
						position++
						goto l400
					l405:
						position, tokenIndex = position400, tokenIndex400
						if buffer[position] != rune('c') {
							goto l406
						}
						position++
						if buffer[position] != rune('v') {
							goto l406
						}
						position++
						goto l400
					l406:
						position, tokenIndex = position400, tokenIndex400
						if buffer[position] != rune('c') {
							goto l407
						}
						position++
						if buffer[position] != rune('u') {
							goto l407
						}
						position++
						if buffer[position] != rune('l') {
							goto l407
						}
						position++
						if buffer[position] != rune('t') {
							goto l407
						}
						position++
						if buffer[position] != rune('i') {
							goto l407
						}
						position++
						if buffer[position] != rune('v') {
							goto l407
						}
						position++
						if buffer[position] != rune('a') {
							goto l407
						}
						position++
						if buffer[position] != rune('r') {
							goto l407
						}
						position++
						goto l400
					l407:
						position, tokenIndex = position400, tokenIndex400
						if !_rules[ruleAuthorPrefix]() {
							goto l408
						}
						goto l400
					l408:
						position, tokenIndex = position400, tokenIndex400
						if !_rules[ruleRankUninomial]() {
							goto l409
						}
						goto l400
					l409:
						position, tokenIndex = position400, tokenIndex400
						if !_rules[ruleApproximation]() {
							goto l410
						}
						goto l400
					l410:
						position, tokenIndex = position400, tokenIndex400
						if !_rules[ruleWord4]() {
							goto l399
						}
					}
				l400:
					if !_rules[ruleSpaceCharEOI]() {
						goto l399
					}
					goto l397
				l399:
					position, tokenIndex = position399, tokenIndex399
				}
				{
					position411, tokenIndex411 := position, tokenIndex
					if !_rules[ruleWordApostr]() {
						goto l412
					}
					goto l411
				l412:
					position, tokenIndex = position411, tokenIndex411
					if !_rules[ruleWordStartsWithDigit]() {
						goto l413
					}
					goto l411
				l413:
					position, tokenIndex = position411, tokenIndex411
					if !_rules[ruleMultiDashedWord]() {
						goto l414
					}
					goto l411
				l414:
					position, tokenIndex = position411, tokenIndex411
					if !_rules[ruleWord2]() {
						goto l415
					}
					goto l411
				l415:
					position, tokenIndex = position411, tokenIndex411
					if !_rules[ruleWord1]() {
						goto l397
					}
				}
			l411:
				{
					position416, tokenIndex416 := position, tokenIndex
					{
						position417, tokenIndex417 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l418
						}
						goto l417
					l418:
						position, tokenIndex = position417, tokenIndex417
						if buffer[position] != rune('(') {
							goto l397
						}
						position++
					}
				l417:
					position, tokenIndex = position416, tokenIndex416
				}
				add(ruleWord, position398)
			}
			return true
		l397:
			position, tokenIndex = position397, tokenIndex397
			return false
		},
		/* 56 Word1 <- <((LowerASCII Dash)? NameLowerChar NameLowerChar+)> */
		func() bool {
			position419, tokenIndex419 := position, tokenIndex
			{
				position420 := position
				{
					position421, tokenIndex421 := position, tokenIndex
					if !_rules[ruleLowerASCII]() {
						goto l421
					}
					if !_rules[ruleDash]() {
						goto l421
					}
					goto l422
				l421:
					position, tokenIndex = position421, tokenIndex421
				}
			l422:
				if !_rules[ruleNameLowerChar]() {
					goto l419
				}
				if !_rules[ruleNameLowerChar]() {
					goto l419
				}
			l423:
				{
					position424, tokenIndex424 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l424
					}
					goto l423
				l424:
					position, tokenIndex = position424, tokenIndex424
				}
				add(ruleWord1, position420)
			}
			return true
		l419:
			position, tokenIndex = position419, tokenIndex419
			return false
		},
		/* 57 WordStartsWithDigit <- <(('1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9') Nums? ('.' / Dash)? NameLowerChar NameLowerChar NameLowerChar NameLowerChar+)> */
		func() bool {
			position425, tokenIndex425 := position, tokenIndex
			{
				position426 := position
				{
					position427, tokenIndex427 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l428
					}
					position++
					goto l427
				l428:
					position, tokenIndex = position427, tokenIndex427
					if buffer[position] != rune('2') {
						goto l429
					}
					position++
					goto l427
				l429:
					position, tokenIndex = position427, tokenIndex427
					if buffer[position] != rune('3') {
						goto l430
					}
					position++
					goto l427
				l430:
					position, tokenIndex = position427, tokenIndex427
					if buffer[position] != rune('4') {
						goto l431
					}
					position++
					goto l427
				l431:
					position, tokenIndex = position427, tokenIndex427
					if buffer[position] != rune('5') {
						goto l432
					}
					position++
					goto l427
				l432:
					position, tokenIndex = position427, tokenIndex427
					if buffer[position] != rune('6') {
						goto l433
					}
					position++
					goto l427
				l433:
					position, tokenIndex = position427, tokenIndex427
					if buffer[position] != rune('7') {
						goto l434
					}
					position++
					goto l427
				l434:
					position, tokenIndex = position427, tokenIndex427
					if buffer[position] != rune('8') {
						goto l435
					}
					position++
					goto l427
				l435:
					position, tokenIndex = position427, tokenIndex427
					if buffer[position] != rune('9') {
						goto l425
					}
					position++
				}
			l427:
				{
					position436, tokenIndex436 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l436
					}
					goto l437
				l436:
					position, tokenIndex = position436, tokenIndex436
				}
			l437:
				{
					position438, tokenIndex438 := position, tokenIndex
					{
						position440, tokenIndex440 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l441
						}
						position++
						goto l440
					l441:
						position, tokenIndex = position440, tokenIndex440
						if !_rules[ruleDash]() {
							goto l438
						}
					}
				l440:
					goto l439
				l438:
					position, tokenIndex = position438, tokenIndex438
				}
			l439:
				if !_rules[ruleNameLowerChar]() {
					goto l425
				}
				if !_rules[ruleNameLowerChar]() {
					goto l425
				}
				if !_rules[ruleNameLowerChar]() {
					goto l425
				}
				if !_rules[ruleNameLowerChar]() {
					goto l425
				}
			l442:
				{
					position443, tokenIndex443 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l443
					}
					goto l442
				l443:
					position, tokenIndex = position443, tokenIndex443
				}
				add(ruleWordStartsWithDigit, position426)
			}
			return true
		l425:
			position, tokenIndex = position425, tokenIndex425
			return false
		},
		/* 58 Word2 <- <(NameLowerChar+ Dash? NameLowerChar+)> */
		func() bool {
			position444, tokenIndex444 := position, tokenIndex
			{
				position445 := position
				if !_rules[ruleNameLowerChar]() {
					goto l444
				}
			l446:
				{
					position447, tokenIndex447 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l447
					}
					goto l446
				l447:
					position, tokenIndex = position447, tokenIndex447
				}
				{
					position448, tokenIndex448 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l448
					}
					goto l449
				l448:
					position, tokenIndex = position448, tokenIndex448
				}
			l449:
				if !_rules[ruleNameLowerChar]() {
					goto l444
				}
			l450:
				{
					position451, tokenIndex451 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l451
					}
					goto l450
				l451:
					position, tokenIndex = position451, tokenIndex451
				}
				add(ruleWord2, position445)
			}
			return true
		l444:
			position, tokenIndex = position444, tokenIndex444
			return false
		},
		/* 59 WordApostr <- <(NameLowerChar NameLowerChar* Apostrophe Word1)> */
		func() bool {
			position452, tokenIndex452 := position, tokenIndex
			{
				position453 := position
				if !_rules[ruleNameLowerChar]() {
					goto l452
				}
			l454:
				{
					position455, tokenIndex455 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l455
					}
					goto l454
				l455:
					position, tokenIndex = position455, tokenIndex455
				}
				if !_rules[ruleApostrophe]() {
					goto l452
				}
				if !_rules[ruleWord1]() {
					goto l452
				}
				add(ruleWordApostr, position453)
			}
			return true
		l452:
			position, tokenIndex = position452, tokenIndex452
			return false
		},
		/* 60 Word4 <- <(NameLowerChar+ '.' NameLowerChar)> */
		func() bool {
			position456, tokenIndex456 := position, tokenIndex
			{
				position457 := position
				if !_rules[ruleNameLowerChar]() {
					goto l456
				}
			l458:
				{
					position459, tokenIndex459 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l459
					}
					goto l458
				l459:
					position, tokenIndex = position459, tokenIndex459
				}
				if buffer[position] != rune('.') {
					goto l456
				}
				position++
				if !_rules[ruleNameLowerChar]() {
					goto l456
				}
				add(ruleWord4, position457)
			}
			return true
		l456:
			position, tokenIndex = position456, tokenIndex456
			return false
		},
		/* 61 MultiDashedWord <- <(NameLowerChar+ Dash NameLowerChar+ Dash NameLowerChar+ (Dash NameLowerChar+)?)> */
		func() bool {
			position460, tokenIndex460 := position, tokenIndex
			{
				position461 := position
				if !_rules[ruleNameLowerChar]() {
					goto l460
				}
			l462:
				{
					position463, tokenIndex463 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l463
					}
					goto l462
				l463:
					position, tokenIndex = position463, tokenIndex463
				}
				if !_rules[ruleDash]() {
					goto l460
				}
				if !_rules[ruleNameLowerChar]() {
					goto l460
				}
			l464:
				{
					position465, tokenIndex465 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l465
					}
					goto l464
				l465:
					position, tokenIndex = position465, tokenIndex465
				}
				if !_rules[ruleDash]() {
					goto l460
				}
				if !_rules[ruleNameLowerChar]() {
					goto l460
				}
			l466:
				{
					position467, tokenIndex467 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l467
					}
					goto l466
				l467:
					position, tokenIndex = position467, tokenIndex467
				}
				{
					position468, tokenIndex468 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l468
					}
					if !_rules[ruleNameLowerChar]() {
						goto l468
					}
				l470:
					{
						position471, tokenIndex471 := position, tokenIndex
						if !_rules[ruleNameLowerChar]() {
							goto l471
						}
						goto l470
					l471:
						position, tokenIndex = position471, tokenIndex471
					}
					goto l469
				l468:
					position, tokenIndex = position468, tokenIndex468
				}
			l469:
				add(ruleMultiDashedWord, position461)
			}
			return true
		l460:
			position, tokenIndex = position460, tokenIndex460
			return false
		},
		/* 62 HybridChar <- <'×'> */
		func() bool {
			position472, tokenIndex472 := position, tokenIndex
			{
				position473 := position
				if buffer[position] != rune('×') {
					goto l472
				}
				position++
				add(ruleHybridChar, position473)
			}
			return true
		l472:
			position, tokenIndex = position472, tokenIndex472
			return false
		},
		/* 63 ApproxNameIgnored <- <.*> */
		func() bool {
			{
				position475 := position
			l476:
				{
					position477, tokenIndex477 := position, tokenIndex
					if !matchDot() {
						goto l477
					}
					goto l476
				l477:
					position, tokenIndex = position477, tokenIndex477
				}
				add(ruleApproxNameIgnored, position475)
			}
			return true
		},
		/* 64 Approximation <- <(('s' 'p' '.' _? ('n' 'r' '.')) / ('s' 'p' '.' _? ('a' 'f' 'f' '.')) / ('m' 'o' 'n' 's' 't' '.') / '?' / ((('s' 'p' 'p') / ('n' 'r') / ('s' 'p') / ('a' 'f' 'f') / ('s' 'p' 'e' 'c' 'i' 'e' 's')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position478, tokenIndex478 := position, tokenIndex
			{
				position479 := position
				{
					position480, tokenIndex480 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l481
					}
					position++
					if buffer[position] != rune('p') {
						goto l481
					}
					position++
					if buffer[position] != rune('.') {
						goto l481
					}
					position++
					{
						position482, tokenIndex482 := position, tokenIndex
						if !_rules[rule_]() {
							goto l482
						}
						goto l483
					l482:
						position, tokenIndex = position482, tokenIndex482
					}
				l483:
					if buffer[position] != rune('n') {
						goto l481
					}
					position++
					if buffer[position] != rune('r') {
						goto l481
					}
					position++
					if buffer[position] != rune('.') {
						goto l481
					}
					position++
					goto l480
				l481:
					position, tokenIndex = position480, tokenIndex480
					if buffer[position] != rune('s') {
						goto l484
					}
					position++
					if buffer[position] != rune('p') {
						goto l484
					}
					position++
					if buffer[position] != rune('.') {
						goto l484
					}
					position++
					{
						position485, tokenIndex485 := position, tokenIndex
						if !_rules[rule_]() {
							goto l485
						}
						goto l486
					l485:
						position, tokenIndex = position485, tokenIndex485
					}
				l486:
					if buffer[position] != rune('a') {
						goto l484
					}
					position++
					if buffer[position] != rune('f') {
						goto l484
					}
					position++
					if buffer[position] != rune('f') {
						goto l484
					}
					position++
					if buffer[position] != rune('.') {
						goto l484
					}
					position++
					goto l480
				l484:
					position, tokenIndex = position480, tokenIndex480
					if buffer[position] != rune('m') {
						goto l487
					}
					position++
					if buffer[position] != rune('o') {
						goto l487
					}
					position++
					if buffer[position] != rune('n') {
						goto l487
					}
					position++
					if buffer[position] != rune('s') {
						goto l487
					}
					position++
					if buffer[position] != rune('t') {
						goto l487
					}
					position++
					if buffer[position] != rune('.') {
						goto l487
					}
					position++
					goto l480
				l487:
					position, tokenIndex = position480, tokenIndex480
					if buffer[position] != rune('?') {
						goto l488
					}
					position++
					goto l480
				l488:
					position, tokenIndex = position480, tokenIndex480
					{
						position489, tokenIndex489 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l490
						}
						position++
						if buffer[position] != rune('p') {
							goto l490
						}
						position++
						if buffer[position] != rune('p') {
							goto l490
						}
						position++
						goto l489
					l490:
						position, tokenIndex = position489, tokenIndex489
						if buffer[position] != rune('n') {
							goto l491
						}
						position++
						if buffer[position] != rune('r') {
							goto l491
						}
						position++
						goto l489
					l491:
						position, tokenIndex = position489, tokenIndex489
						if buffer[position] != rune('s') {
							goto l492
						}
						position++
						if buffer[position] != rune('p') {
							goto l492
						}
						position++
						goto l489
					l492:
						position, tokenIndex = position489, tokenIndex489
						if buffer[position] != rune('a') {
							goto l493
						}
						position++
						if buffer[position] != rune('f') {
							goto l493
						}
						position++
						if buffer[position] != rune('f') {
							goto l493
						}
						position++
						goto l489
					l493:
						position, tokenIndex = position489, tokenIndex489
						if buffer[position] != rune('s') {
							goto l478
						}
						position++
						if buffer[position] != rune('p') {
							goto l478
						}
						position++
						if buffer[position] != rune('e') {
							goto l478
						}
						position++
						if buffer[position] != rune('c') {
							goto l478
						}
						position++
						if buffer[position] != rune('i') {
							goto l478
						}
						position++
						if buffer[position] != rune('e') {
							goto l478
						}
						position++
						if buffer[position] != rune('s') {
							goto l478
						}
						position++
					}
				l489:
					{
						position494, tokenIndex494 := position, tokenIndex
						{
							position496, tokenIndex496 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l495
							}
							position, tokenIndex = position496, tokenIndex496
						}
						goto l494
					l495:
						position, tokenIndex = position494, tokenIndex494
						if buffer[position] != rune('.') {
							goto l478
						}
						position++
					}
				l494:
				}
			l480:
				add(ruleApproximation, position479)
			}
			return true
		l478:
			position, tokenIndex = position478, tokenIndex478
			return false
		},
		/* 65 Authorship <- <((AuthorshipCombo / OriginalAuthorship) &(SpaceCharEOI / ';' / ','))> */
		func() bool {
			position497, tokenIndex497 := position, tokenIndex
			{
				position498 := position
				{
					position499, tokenIndex499 := position, tokenIndex
					if !_rules[ruleAuthorshipCombo]() {
						goto l500
					}
					goto l499
				l500:
					position, tokenIndex = position499, tokenIndex499
					if !_rules[ruleOriginalAuthorship]() {
						goto l497
					}
				}
			l499:
				{
					position501, tokenIndex501 := position, tokenIndex
					{
						position502, tokenIndex502 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l503
						}
						goto l502
					l503:
						position, tokenIndex = position502, tokenIndex502
						if buffer[position] != rune(';') {
							goto l504
						}
						position++
						goto l502
					l504:
						position, tokenIndex = position502, tokenIndex502
						if buffer[position] != rune(',') {
							goto l497
						}
						position++
					}
				l502:
					position, tokenIndex = position501, tokenIndex501
				}
				add(ruleAuthorship, position498)
			}
			return true
		l497:
			position, tokenIndex = position497, tokenIndex497
			return false
		},
		/* 66 AuthorshipCombo <- <(OriginalAuthorshipComb (_? CombinationAuthorship)?)> */
		func() bool {
			position505, tokenIndex505 := position, tokenIndex
			{
				position506 := position
				if !_rules[ruleOriginalAuthorshipComb]() {
					goto l505
				}
				{
					position507, tokenIndex507 := position, tokenIndex
					{
						position509, tokenIndex509 := position, tokenIndex
						if !_rules[rule_]() {
							goto l509
						}
						goto l510
					l509:
						position, tokenIndex = position509, tokenIndex509
					}
				l510:
					if !_rules[ruleCombinationAuthorship]() {
						goto l507
					}
					goto l508
				l507:
					position, tokenIndex = position507, tokenIndex507
				}
			l508:
				add(ruleAuthorshipCombo, position506)
			}
			return true
		l505:
			position, tokenIndex = position505, tokenIndex505
			return false
		},
		/* 67 OriginalAuthorship <- <AuthorsGroup> */
		func() bool {
			position511, tokenIndex511 := position, tokenIndex
			{
				position512 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l511
				}
				add(ruleOriginalAuthorship, position512)
			}
			return true
		l511:
			position, tokenIndex = position511, tokenIndex511
			return false
		},
		/* 68 OriginalAuthorshipComb <- <(BasionymAuthorshipYearMisformed / BasionymAuthorship / BasionymAuthorshipMissingParens)> */
		func() bool {
			position513, tokenIndex513 := position, tokenIndex
			{
				position514 := position
				{
					position515, tokenIndex515 := position, tokenIndex
					if !_rules[ruleBasionymAuthorshipYearMisformed]() {
						goto l516
					}
					goto l515
				l516:
					position, tokenIndex = position515, tokenIndex515
					if !_rules[ruleBasionymAuthorship]() {
						goto l517
					}
					goto l515
				l517:
					position, tokenIndex = position515, tokenIndex515
					if !_rules[ruleBasionymAuthorshipMissingParens]() {
						goto l513
					}
				}
			l515:
				add(ruleOriginalAuthorshipComb, position514)
			}
			return true
		l513:
			position, tokenIndex = position513, tokenIndex513
			return false
		},
		/* 69 CombinationAuthorship <- <AuthorsGroup> */
		func() bool {
			position518, tokenIndex518 := position, tokenIndex
			{
				position519 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l518
				}
				add(ruleCombinationAuthorship, position519)
			}
			return true
		l518:
			position, tokenIndex = position518, tokenIndex518
			return false
		},
		/* 70 BasionymAuthorshipMissingParens <- <(MissingParensStart / MissingParensEnd)> */
		func() bool {
			position520, tokenIndex520 := position, tokenIndex
			{
				position521 := position
				{
					position522, tokenIndex522 := position, tokenIndex
					if !_rules[ruleMissingParensStart]() {
						goto l523
					}
					goto l522
				l523:
					position, tokenIndex = position522, tokenIndex522
					if !_rules[ruleMissingParensEnd]() {
						goto l520
					}
				}
			l522:
				add(ruleBasionymAuthorshipMissingParens, position521)
			}
			return true
		l520:
			position, tokenIndex = position520, tokenIndex520
			return false
		},
		/* 71 MissingParensStart <- <('(' _? AuthorsGroup)> */
		func() bool {
			position524, tokenIndex524 := position, tokenIndex
			{
				position525 := position
				if buffer[position] != rune('(') {
					goto l524
				}
				position++
				{
					position526, tokenIndex526 := position, tokenIndex
					if !_rules[rule_]() {
						goto l526
					}
					goto l527
				l526:
					position, tokenIndex = position526, tokenIndex526
				}
			l527:
				if !_rules[ruleAuthorsGroup]() {
					goto l524
				}
				add(ruleMissingParensStart, position525)
			}
			return true
		l524:
			position, tokenIndex = position524, tokenIndex524
			return false
		},
		/* 72 MissingParensEnd <- <(AuthorsGroup _? ')')> */
		func() bool {
			position528, tokenIndex528 := position, tokenIndex
			{
				position529 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l528
				}
				{
					position530, tokenIndex530 := position, tokenIndex
					if !_rules[rule_]() {
						goto l530
					}
					goto l531
				l530:
					position, tokenIndex = position530, tokenIndex530
				}
			l531:
				if buffer[position] != rune(')') {
					goto l528
				}
				position++
				add(ruleMissingParensEnd, position529)
			}
			return true
		l528:
			position, tokenIndex = position528, tokenIndex528
			return false
		},
		/* 73 BasionymAuthorshipYearMisformed <- <('(' _? AuthorsGroup _? ')' (_? ',')? _? Year)> */
		func() bool {
			position532, tokenIndex532 := position, tokenIndex
			{
				position533 := position
				if buffer[position] != rune('(') {
					goto l532
				}
				position++
				{
					position534, tokenIndex534 := position, tokenIndex
					if !_rules[rule_]() {
						goto l534
					}
					goto l535
				l534:
					position, tokenIndex = position534, tokenIndex534
				}
			l535:
				if !_rules[ruleAuthorsGroup]() {
					goto l532
				}
				{
					position536, tokenIndex536 := position, tokenIndex
					if !_rules[rule_]() {
						goto l536
					}
					goto l537
				l536:
					position, tokenIndex = position536, tokenIndex536
				}
			l537:
				if buffer[position] != rune(')') {
					goto l532
				}
				position++
				{
					position538, tokenIndex538 := position, tokenIndex
					{
						position540, tokenIndex540 := position, tokenIndex
						if !_rules[rule_]() {
							goto l540
						}
						goto l541
					l540:
						position, tokenIndex = position540, tokenIndex540
					}
				l541:
					if buffer[position] != rune(',') {
						goto l538
					}
					position++
					goto l539
				l538:
					position, tokenIndex = position538, tokenIndex538
				}
			l539:
				{
					position542, tokenIndex542 := position, tokenIndex
					if !_rules[rule_]() {
						goto l542
					}
					goto l543
				l542:
					position, tokenIndex = position542, tokenIndex542
				}
			l543:
				if !_rules[ruleYear]() {
					goto l532
				}
				add(ruleBasionymAuthorshipYearMisformed, position533)
			}
			return true
		l532:
			position, tokenIndex = position532, tokenIndex532
			return false
		},
		/* 74 BasionymAuthorship <- <(BasionymAuthorship1 / BasionymAuthorship2Parens)> */
		func() bool {
			position544, tokenIndex544 := position, tokenIndex
			{
				position545 := position
				{
					position546, tokenIndex546 := position, tokenIndex
					if !_rules[ruleBasionymAuthorship1]() {
						goto l547
					}
					goto l546
				l547:
					position, tokenIndex = position546, tokenIndex546
					if !_rules[ruleBasionymAuthorship2Parens]() {
						goto l544
					}
				}
			l546:
				add(ruleBasionymAuthorship, position545)
			}
			return true
		l544:
			position, tokenIndex = position544, tokenIndex544
			return false
		},
		/* 75 BasionymAuthorship1 <- <('(' _? AuthorsGroup _? ')')> */
		func() bool {
			position548, tokenIndex548 := position, tokenIndex
			{
				position549 := position
				if buffer[position] != rune('(') {
					goto l548
				}
				position++
				{
					position550, tokenIndex550 := position, tokenIndex
					if !_rules[rule_]() {
						goto l550
					}
					goto l551
				l550:
					position, tokenIndex = position550, tokenIndex550
				}
			l551:
				if !_rules[ruleAuthorsGroup]() {
					goto l548
				}
				{
					position552, tokenIndex552 := position, tokenIndex
					if !_rules[rule_]() {
						goto l552
					}
					goto l553
				l552:
					position, tokenIndex = position552, tokenIndex552
				}
			l553:
				if buffer[position] != rune(')') {
					goto l548
				}
				position++
				add(ruleBasionymAuthorship1, position549)
			}
			return true
		l548:
			position, tokenIndex = position548, tokenIndex548
			return false
		},
		/* 76 BasionymAuthorship2Parens <- <('(' _? '(' _? AuthorsGroup _? ')' _? ')')> */
		func() bool {
			position554, tokenIndex554 := position, tokenIndex
			{
				position555 := position
				if buffer[position] != rune('(') {
					goto l554
				}
				position++
				{
					position556, tokenIndex556 := position, tokenIndex
					if !_rules[rule_]() {
						goto l556
					}
					goto l557
				l556:
					position, tokenIndex = position556, tokenIndex556
				}
			l557:
				if buffer[position] != rune('(') {
					goto l554
				}
				position++
				{
					position558, tokenIndex558 := position, tokenIndex
					if !_rules[rule_]() {
						goto l558
					}
					goto l559
				l558:
					position, tokenIndex = position558, tokenIndex558
				}
			l559:
				if !_rules[ruleAuthorsGroup]() {
					goto l554
				}
				{
					position560, tokenIndex560 := position, tokenIndex
					if !_rules[rule_]() {
						goto l560
					}
					goto l561
				l560:
					position, tokenIndex = position560, tokenIndex560
				}
			l561:
				if buffer[position] != rune(')') {
					goto l554
				}
				position++
				{
					position562, tokenIndex562 := position, tokenIndex
					if !_rules[rule_]() {
						goto l562
					}
					goto l563
				l562:
					position, tokenIndex = position562, tokenIndex562
				}
			l563:
				if buffer[position] != rune(')') {
					goto l554
				}
				position++
				add(ruleBasionymAuthorship2Parens, position555)
			}
			return true
		l554:
			position, tokenIndex = position554, tokenIndex554
			return false
		},
		/* 77 AuthorsGroup <- <(AuthorsTeam (_ (AuthorEmend / AuthorEx) AuthorsTeam)?)> */
		func() bool {
			position564, tokenIndex564 := position, tokenIndex
			{
				position565 := position
				if !_rules[ruleAuthorsTeam]() {
					goto l564
				}
				{
					position566, tokenIndex566 := position, tokenIndex
					if !_rules[rule_]() {
						goto l566
					}
					{
						position568, tokenIndex568 := position, tokenIndex
						if !_rules[ruleAuthorEmend]() {
							goto l569
						}
						goto l568
					l569:
						position, tokenIndex = position568, tokenIndex568
						if !_rules[ruleAuthorEx]() {
							goto l566
						}
					}
				l568:
					if !_rules[ruleAuthorsTeam]() {
						goto l566
					}
					goto l567
				l566:
					position, tokenIndex = position566, tokenIndex566
				}
			l567:
				add(ruleAuthorsGroup, position565)
			}
			return true
		l564:
			position, tokenIndex = position564, tokenIndex564
			return false
		},
		/* 78 AuthorsTeam <- <(Author (AuthorSep Author)* (_? ','? _? Year)?)> */
		func() bool {
			position570, tokenIndex570 := position, tokenIndex
			{
				position571 := position
				if !_rules[ruleAuthor]() {
					goto l570
				}
			l572:
				{
					position573, tokenIndex573 := position, tokenIndex
					if !_rules[ruleAuthorSep]() {
						goto l573
					}
					if !_rules[ruleAuthor]() {
						goto l573
					}
					goto l572
				l573:
					position, tokenIndex = position573, tokenIndex573
				}
				{
					position574, tokenIndex574 := position, tokenIndex
					{
						position576, tokenIndex576 := position, tokenIndex
						if !_rules[rule_]() {
							goto l576
						}
						goto l577
					l576:
						position, tokenIndex = position576, tokenIndex576
					}
				l577:
					{
						position578, tokenIndex578 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l578
						}
						position++
						goto l579
					l578:
						position, tokenIndex = position578, tokenIndex578
					}
				l579:
					{
						position580, tokenIndex580 := position, tokenIndex
						if !_rules[rule_]() {
							goto l580
						}
						goto l581
					l580:
						position, tokenIndex = position580, tokenIndex580
					}
				l581:
					if !_rules[ruleYear]() {
						goto l574
					}
					goto l575
				l574:
					position, tokenIndex = position574, tokenIndex574
				}
			l575:
				add(ruleAuthorsTeam, position571)
			}
			return true
		l570:
			position, tokenIndex = position570, tokenIndex570
			return false
		},
		/* 79 AuthorSep <- <(AuthorSep1 / AuthorSep2)> */
		func() bool {
			position582, tokenIndex582 := position, tokenIndex
			{
				position583 := position
				{
					position584, tokenIndex584 := position, tokenIndex
					if !_rules[ruleAuthorSep1]() {
						goto l585
					}
					goto l584
				l585:
					position, tokenIndex = position584, tokenIndex584
					if !_rules[ruleAuthorSep2]() {
						goto l582
					}
				}
			l584:
				add(ruleAuthorSep, position583)
			}
			return true
		l582:
			position, tokenIndex = position582, tokenIndex582
			return false
		},
		/* 80 AuthorSep1 <- <(_? (',' _)? ('&' / AuthorSepSpanish / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd')) _?)> */
		func() bool {
			position586, tokenIndex586 := position, tokenIndex
			{
				position587 := position
				{
					position588, tokenIndex588 := position, tokenIndex
					if !_rules[rule_]() {
						goto l588
					}
					goto l589
				l588:
					position, tokenIndex = position588, tokenIndex588
				}
			l589:
				{
					position590, tokenIndex590 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l590
					}
					position++
					if !_rules[rule_]() {
						goto l590
					}
					goto l591
				l590:
					position, tokenIndex = position590, tokenIndex590
				}
			l591:
				{
					position592, tokenIndex592 := position, tokenIndex
					if buffer[position] != rune('&') {
						goto l593
					}
					position++
					goto l592
				l593:
					position, tokenIndex = position592, tokenIndex592
					if !_rules[ruleAuthorSepSpanish]() {
						goto l594
					}
					goto l592
				l594:
					position, tokenIndex = position592, tokenIndex592
					if buffer[position] != rune('e') {
						goto l595
					}
					position++
					if buffer[position] != rune('t') {
						goto l595
					}
					position++
					goto l592
				l595:
					position, tokenIndex = position592, tokenIndex592
					if buffer[position] != rune('a') {
						goto l596
					}
					position++
					if buffer[position] != rune('n') {
						goto l596
					}
					position++
					if buffer[position] != rune('d') {
						goto l596
					}
					position++
					goto l592
				l596:
					position, tokenIndex = position592, tokenIndex592
					if buffer[position] != rune('a') {
						goto l586
					}
					position++
					if buffer[position] != rune('p') {
						goto l586
					}
					position++
					if buffer[position] != rune('u') {
						goto l586
					}
					position++
					if buffer[position] != rune('d') {
						goto l586
					}
					position++
				}
			l592:
				{
					position597, tokenIndex597 := position, tokenIndex
					if !_rules[rule_]() {
						goto l597
					}
					goto l598
				l597:
					position, tokenIndex = position597, tokenIndex597
				}
			l598:
				add(ruleAuthorSep1, position587)
			}
			return true
		l586:
			position, tokenIndex = position586, tokenIndex586
			return false
		},
		/* 81 AuthorSep2 <- <(_? ',' _?)> */
		func() bool {
			position599, tokenIndex599 := position, tokenIndex
			{
				position600 := position
				{
					position601, tokenIndex601 := position, tokenIndex
					if !_rules[rule_]() {
						goto l601
					}
					goto l602
				l601:
					position, tokenIndex = position601, tokenIndex601
				}
			l602:
				if buffer[position] != rune(',') {
					goto l599
				}
				position++
				{
					position603, tokenIndex603 := position, tokenIndex
					if !_rules[rule_]() {
						goto l603
					}
					goto l604
				l603:
					position, tokenIndex = position603, tokenIndex603
				}
			l604:
				add(ruleAuthorSep2, position600)
			}
			return true
		l599:
			position, tokenIndex = position599, tokenIndex599
			return false
		},
		/* 82 AuthorSepSpanish <- <(_? 'y' _?)> */
		func() bool {
			position605, tokenIndex605 := position, tokenIndex
			{
				position606 := position
				{
					position607, tokenIndex607 := position, tokenIndex
					if !_rules[rule_]() {
						goto l607
					}
					goto l608
				l607:
					position, tokenIndex = position607, tokenIndex607
				}
			l608:
				if buffer[position] != rune('y') {
					goto l605
				}
				position++
				{
					position609, tokenIndex609 := position, tokenIndex
					if !_rules[rule_]() {
						goto l609
					}
					goto l610
				l609:
					position, tokenIndex = position609, tokenIndex609
				}
			l610:
				add(ruleAuthorSepSpanish, position606)
			}
			return true
		l605:
			position, tokenIndex = position605, tokenIndex605
			return false
		},
		/* 83 AuthorEx <- <((('e' 'x' '.'?) / ('i' 'n')) _)> */
		func() bool {
			position611, tokenIndex611 := position, tokenIndex
			{
				position612 := position
				{
					position613, tokenIndex613 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l614
					}
					position++
					if buffer[position] != rune('x') {
						goto l614
					}
					position++
					{
						position615, tokenIndex615 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l615
						}
						position++
						goto l616
					l615:
						position, tokenIndex = position615, tokenIndex615
					}
				l616:
					goto l613
				l614:
					position, tokenIndex = position613, tokenIndex613
					if buffer[position] != rune('i') {
						goto l611
					}
					position++
					if buffer[position] != rune('n') {
						goto l611
					}
					position++
				}
			l613:
				if !_rules[rule_]() {
					goto l611
				}
				add(ruleAuthorEx, position612)
			}
			return true
		l611:
			position, tokenIndex = position611, tokenIndex611
			return false
		},
		/* 84 AuthorEmend <- <('e' 'm' 'e' 'n' 'd' '.'? _)> */
		func() bool {
			position617, tokenIndex617 := position, tokenIndex
			{
				position618 := position
				if buffer[position] != rune('e') {
					goto l617
				}
				position++
				if buffer[position] != rune('m') {
					goto l617
				}
				position++
				if buffer[position] != rune('e') {
					goto l617
				}
				position++
				if buffer[position] != rune('n') {
					goto l617
				}
				position++
				if buffer[position] != rune('d') {
					goto l617
				}
				position++
				{
					position619, tokenIndex619 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l619
					}
					position++
					goto l620
				l619:
					position, tokenIndex = position619, tokenIndex619
				}
			l620:
				if !_rules[rule_]() {
					goto l617
				}
				add(ruleAuthorEmend, position618)
			}
			return true
		l617:
			position, tokenIndex = position617, tokenIndex617
			return false
		},
		/* 85 Author <- <((Author0 / Author1 / Author2 / UnknownAuthor) (_ AuthorEtAl)?)> */
		func() bool {
			position621, tokenIndex621 := position, tokenIndex
			{
				position622 := position
				{
					position623, tokenIndex623 := position, tokenIndex
					if !_rules[ruleAuthor0]() {
						goto l624
					}
					goto l623
				l624:
					position, tokenIndex = position623, tokenIndex623
					if !_rules[ruleAuthor1]() {
						goto l625
					}
					goto l623
				l625:
					position, tokenIndex = position623, tokenIndex623
					if !_rules[ruleAuthor2]() {
						goto l626
					}
					goto l623
				l626:
					position, tokenIndex = position623, tokenIndex623
					if !_rules[ruleUnknownAuthor]() {
						goto l621
					}
				}
			l623:
				{
					position627, tokenIndex627 := position, tokenIndex
					if !_rules[rule_]() {
						goto l627
					}
					if !_rules[ruleAuthorEtAl]() {
						goto l627
					}
					goto l628
				l627:
					position, tokenIndex = position627, tokenIndex627
				}
			l628:
				add(ruleAuthor, position622)
			}
			return true
		l621:
			position, tokenIndex = position621, tokenIndex621
			return false
		},
		/* 86 Author0 <- <(Author2 FiliusFNoSpace)> */
		func() bool {
			position629, tokenIndex629 := position, tokenIndex
			{
				position630 := position
				if !_rules[ruleAuthor2]() {
					goto l629
				}
				if !_rules[ruleFiliusFNoSpace]() {
					goto l629
				}
				add(ruleAuthor0, position630)
			}
			return true
		l629:
			position, tokenIndex = position629, tokenIndex629
			return false
		},
		/* 87 Author1 <- <(Author2 _? (Filius / AuthorSuffix))> */
		func() bool {
			position631, tokenIndex631 := position, tokenIndex
			{
				position632 := position
				if !_rules[ruleAuthor2]() {
					goto l631
				}
				{
					position633, tokenIndex633 := position, tokenIndex
					if !_rules[rule_]() {
						goto l633
					}
					goto l634
				l633:
					position, tokenIndex = position633, tokenIndex633
				}
			l634:
				{
					position635, tokenIndex635 := position, tokenIndex
					if !_rules[ruleFilius]() {
						goto l636
					}
					goto l635
				l636:
					position, tokenIndex = position635, tokenIndex635
					if !_rules[ruleAuthorSuffix]() {
						goto l631
					}
				}
			l635:
				add(ruleAuthor1, position632)
			}
			return true
		l631:
			position, tokenIndex = position631, tokenIndex631
			return false
		},
		/* 88 Author2 <- <(AuthorWord (_? AuthorWord)*)> */
		func() bool {
			position637, tokenIndex637 := position, tokenIndex
			{
				position638 := position
				if !_rules[ruleAuthorWord]() {
					goto l637
				}
			l639:
				{
					position640, tokenIndex640 := position, tokenIndex
					{
						position641, tokenIndex641 := position, tokenIndex
						if !_rules[rule_]() {
							goto l641
						}
						goto l642
					l641:
						position, tokenIndex = position641, tokenIndex641
					}
				l642:
					if !_rules[ruleAuthorWord]() {
						goto l640
					}
					goto l639
				l640:
					position, tokenIndex = position640, tokenIndex640
				}
				add(ruleAuthor2, position638)
			}
			return true
		l637:
			position, tokenIndex = position637, tokenIndex637
			return false
		},
		/* 89 UnknownAuthor <- <('?' / ((('a' 'u' 'c' 't') / ('a' 'n' 'o' 'n')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position643, tokenIndex643 := position, tokenIndex
			{
				position644 := position
				{
					position645, tokenIndex645 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l646
					}
					position++
					goto l645
				l646:
					position, tokenIndex = position645, tokenIndex645
					{
						position647, tokenIndex647 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l648
						}
						position++
						if buffer[position] != rune('u') {
							goto l648
						}
						position++
						if buffer[position] != rune('c') {
							goto l648
						}
						position++
						if buffer[position] != rune('t') {
							goto l648
						}
						position++
						goto l647
					l648:
						position, tokenIndex = position647, tokenIndex647
						if buffer[position] != rune('a') {
							goto l643
						}
						position++
						if buffer[position] != rune('n') {
							goto l643
						}
						position++
						if buffer[position] != rune('o') {
							goto l643
						}
						position++
						if buffer[position] != rune('n') {
							goto l643
						}
						position++
					}
				l647:
					{
						position649, tokenIndex649 := position, tokenIndex
						{
							position651, tokenIndex651 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l650
							}
							position, tokenIndex = position651, tokenIndex651
						}
						goto l649
					l650:
						position, tokenIndex = position649, tokenIndex649
						if buffer[position] != rune('.') {
							goto l643
						}
						position++
					}
				l649:
				}
			l645:
				add(ruleUnknownAuthor, position644)
			}
			return true
		l643:
			position, tokenIndex = position643, tokenIndex643
			return false
		},
		/* 90 AuthorWord <- <(!(('b' / 'B') ('o' / 'O') ('l' / 'L') ('d' / 'D') ':') (AuthorDashInitials / AuthorWord2 / AuthorWord3 / AuthorPrefix))> */
		func() bool {
			position652, tokenIndex652 := position, tokenIndex
			{
				position653 := position
				{
					position654, tokenIndex654 := position, tokenIndex
					{
						position655, tokenIndex655 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l656
						}
						position++
						goto l655
					l656:
						position, tokenIndex = position655, tokenIndex655
						if buffer[position] != rune('B') {
							goto l654
						}
						position++
					}
				l655:
					{
						position657, tokenIndex657 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l658
						}
						position++
						goto l657
					l658:
						position, tokenIndex = position657, tokenIndex657
						if buffer[position] != rune('O') {
							goto l654
						}
						position++
					}
				l657:
					{
						position659, tokenIndex659 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l660
						}
						position++
						goto l659
					l660:
						position, tokenIndex = position659, tokenIndex659
						if buffer[position] != rune('L') {
							goto l654
						}
						position++
					}
				l659:
					{
						position661, tokenIndex661 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l662
						}
						position++
						goto l661
					l662:
						position, tokenIndex = position661, tokenIndex661
						if buffer[position] != rune('D') {
							goto l654
						}
						position++
					}
				l661:
					if buffer[position] != rune(':') {
						goto l654
					}
					position++
					goto l652
				l654:
					position, tokenIndex = position654, tokenIndex654
				}
				{
					position663, tokenIndex663 := position, tokenIndex
					if !_rules[ruleAuthorDashInitials]() {
						goto l664
					}
					goto l663
				l664:
					position, tokenIndex = position663, tokenIndex663
					if !_rules[ruleAuthorWord2]() {
						goto l665
					}
					goto l663
				l665:
					position, tokenIndex = position663, tokenIndex663
					if !_rules[ruleAuthorWord3]() {
						goto l666
					}
					goto l663
				l666:
					position, tokenIndex = position663, tokenIndex663
					if !_rules[ruleAuthorPrefix]() {
						goto l652
					}
				}
			l663:
				add(ruleAuthorWord, position653)
			}
			return true
		l652:
			position, tokenIndex = position652, tokenIndex652
			return false
		},
		/* 91 AuthorEtAl <- <(('a' 'r' 'g' '.') / ('e' 't' ' ' 'a' 'l' '.' '{' '?' '}') / ((('e' 't') / '&') (' ' 'a' 'l') '.'?))> */
		func() bool {
			position667, tokenIndex667 := position, tokenIndex
			{
				position668 := position
				{
					position669, tokenIndex669 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l670
					}
					position++
					if buffer[position] != rune('r') {
						goto l670
					}
					position++
					if buffer[position] != rune('g') {
						goto l670
					}
					position++
					if buffer[position] != rune('.') {
						goto l670
					}
					position++
					goto l669
				l670:
					position, tokenIndex = position669, tokenIndex669
					if buffer[position] != rune('e') {
						goto l671
					}
					position++
					if buffer[position] != rune('t') {
						goto l671
					}
					position++
					if buffer[position] != rune(' ') {
						goto l671
					}
					position++
					if buffer[position] != rune('a') {
						goto l671
					}
					position++
					if buffer[position] != rune('l') {
						goto l671
					}
					position++
					if buffer[position] != rune('.') {
						goto l671
					}
					position++
					if buffer[position] != rune('{') {
						goto l671
					}
					position++
					if buffer[position] != rune('?') {
						goto l671
					}
					position++
					if buffer[position] != rune('}') {
						goto l671
					}
					position++
					goto l669
				l671:
					position, tokenIndex = position669, tokenIndex669
					{
						position672, tokenIndex672 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l673
						}
						position++
						if buffer[position] != rune('t') {
							goto l673
						}
						position++
						goto l672
					l673:
						position, tokenIndex = position672, tokenIndex672
						if buffer[position] != rune('&') {
							goto l667
						}
						position++
					}
				l672:
					if buffer[position] != rune(' ') {
						goto l667
					}
					position++
					if buffer[position] != rune('a') {
						goto l667
					}
					position++
					if buffer[position] != rune('l') {
						goto l667
					}
					position++
					{
						position674, tokenIndex674 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l674
						}
						position++
						goto l675
					l674:
						position, tokenIndex = position674, tokenIndex674
					}
				l675:
				}
			l669:
				add(ruleAuthorEtAl, position668)
			}
			return true
		l667:
			position, tokenIndex = position667, tokenIndex667
			return false
		},
		/* 92 AuthorWord2 <- <(AuthorWord3 Dash AuthorWordSoft)> */
		func() bool {
			position676, tokenIndex676 := position, tokenIndex
			{
				position677 := position
				if !_rules[ruleAuthorWord3]() {
					goto l676
				}
				if !_rules[ruleDash]() {
					goto l676
				}
				if !_rules[ruleAuthorWordSoft]() {
					goto l676
				}
				add(ruleAuthorWord2, position677)
			}
			return true
		l676:
			position, tokenIndex = position676, tokenIndex676
			return false
		},
		/* 93 AuthorWord3 <- <(AuthorPrefixGlued? (AllCapsAuthorWord / CapAuthorWord) '.'?)> */
		func() bool {
			position678, tokenIndex678 := position, tokenIndex
			{
				position679 := position
				{
					position680, tokenIndex680 := position, tokenIndex
					if !_rules[ruleAuthorPrefixGlued]() {
						goto l680
					}
					goto l681
				l680:
					position, tokenIndex = position680, tokenIndex680
				}
			l681:
				{
					position682, tokenIndex682 := position, tokenIndex
					if !_rules[ruleAllCapsAuthorWord]() {
						goto l683
					}
					goto l682
				l683:
					position, tokenIndex = position682, tokenIndex682
					if !_rules[ruleCapAuthorWord]() {
						goto l678
					}
				}
			l682:
				{
					position684, tokenIndex684 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l684
					}
					position++
					goto l685
				l684:
					position, tokenIndex = position684, tokenIndex684
				}
			l685:
				add(ruleAuthorWord3, position679)
			}
			return true
		l678:
			position, tokenIndex = position678, tokenIndex678
			return false
		},
		/* 94 AuthorDashInitials <- <(AuthorUpperChar '.'? Dash AuthorUpperChar '.'?)> */
		func() bool {
			position686, tokenIndex686 := position, tokenIndex
			{
				position687 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l686
				}
				{
					position688, tokenIndex688 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l688
					}
					position++
					goto l689
				l688:
					position, tokenIndex = position688, tokenIndex688
				}
			l689:
				if !_rules[ruleDash]() {
					goto l686
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l686
				}
				{
					position690, tokenIndex690 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l690
					}
					position++
					goto l691
				l690:
					position, tokenIndex = position690, tokenIndex690
				}
			l691:
				add(ruleAuthorDashInitials, position687)
			}
			return true
		l686:
			position, tokenIndex = position686, tokenIndex686
			return false
		},
		/* 95 AuthorWordSoft <- <(((AuthorUpperChar (AuthorUpperChar+ / AuthorLowerChar+)) / AuthorLowerChar+) '.'?)> */
		func() bool {
			position692, tokenIndex692 := position, tokenIndex
			{
				position693 := position
				{
					position694, tokenIndex694 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l695
					}
					{
						position696, tokenIndex696 := position, tokenIndex
						if !_rules[ruleAuthorUpperChar]() {
							goto l697
						}
					l698:
						{
							position699, tokenIndex699 := position, tokenIndex
							if !_rules[ruleAuthorUpperChar]() {
								goto l699
							}
							goto l698
						l699:
							position, tokenIndex = position699, tokenIndex699
						}
						goto l696
					l697:
						position, tokenIndex = position696, tokenIndex696
						if !_rules[ruleAuthorLowerChar]() {
							goto l695
						}
					l700:
						{
							position701, tokenIndex701 := position, tokenIndex
							if !_rules[ruleAuthorLowerChar]() {
								goto l701
							}
							goto l700
						l701:
							position, tokenIndex = position701, tokenIndex701
						}
					}
				l696:
					goto l694
				l695:
					position, tokenIndex = position694, tokenIndex694
					if !_rules[ruleAuthorLowerChar]() {
						goto l692
					}
				l702:
					{
						position703, tokenIndex703 := position, tokenIndex
						if !_rules[ruleAuthorLowerChar]() {
							goto l703
						}
						goto l702
					l703:
						position, tokenIndex = position703, tokenIndex703
					}
				}
			l694:
				{
					position704, tokenIndex704 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l704
					}
					position++
					goto l705
				l704:
					position, tokenIndex = position704, tokenIndex704
				}
			l705:
				add(ruleAuthorWordSoft, position693)
			}
			return true
		l692:
			position, tokenIndex = position692, tokenIndex692
			return false
		},
		/* 96 CapAuthorWord <- <(AuthorUpperChar AuthorLowerChar*)> */
		func() bool {
			position706, tokenIndex706 := position, tokenIndex
			{
				position707 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l706
				}
			l708:
				{
					position709, tokenIndex709 := position, tokenIndex
					if !_rules[ruleAuthorLowerChar]() {
						goto l709
					}
					goto l708
				l709:
					position, tokenIndex = position709, tokenIndex709
				}
				add(ruleCapAuthorWord, position707)
			}
			return true
		l706:
			position, tokenIndex = position706, tokenIndex706
			return false
		},
		/* 97 AllCapsAuthorWord <- <(AuthorUpperChar AuthorUpperChar+)> */
		func() bool {
			position710, tokenIndex710 := position, tokenIndex
			{
				position711 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l710
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l710
				}
			l712:
				{
					position713, tokenIndex713 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l713
					}
					goto l712
				l713:
					position, tokenIndex = position713, tokenIndex713
				}
				add(ruleAllCapsAuthorWord, position711)
			}
			return true
		l710:
			position, tokenIndex = position710, tokenIndex710
			return false
		},
		/* 98 Filius <- <(FiliusF / ('f' 'i' 'l' '.') / ('f' 'i' 'l' 'i' 'u' 's'))> */
		func() bool {
			position714, tokenIndex714 := position, tokenIndex
			{
				position715 := position
				{
					position716, tokenIndex716 := position, tokenIndex
					if !_rules[ruleFiliusF]() {
						goto l717
					}
					goto l716
				l717:
					position, tokenIndex = position716, tokenIndex716
					if buffer[position] != rune('f') {
						goto l718
					}
					position++
					if buffer[position] != rune('i') {
						goto l718
					}
					position++
					if buffer[position] != rune('l') {
						goto l718
					}
					position++
					if buffer[position] != rune('.') {
						goto l718
					}
					position++
					goto l716
				l718:
					position, tokenIndex = position716, tokenIndex716
					if buffer[position] != rune('f') {
						goto l714
					}
					position++
					if buffer[position] != rune('i') {
						goto l714
					}
					position++
					if buffer[position] != rune('l') {
						goto l714
					}
					position++
					if buffer[position] != rune('i') {
						goto l714
					}
					position++
					if buffer[position] != rune('u') {
						goto l714
					}
					position++
					if buffer[position] != rune('s') {
						goto l714
					}
					position++
				}
			l716:
				add(ruleFilius, position715)
			}
			return true
		l714:
			position, tokenIndex = position714, tokenIndex714
			return false
		},
		/* 99 FiliusF <- <('f' '.' !(_ Word))> */
		func() bool {
			position719, tokenIndex719 := position, tokenIndex
			{
				position720 := position
				if buffer[position] != rune('f') {
					goto l719
				}
				position++
				if buffer[position] != rune('.') {
					goto l719
				}
				position++
				{
					position721, tokenIndex721 := position, tokenIndex
					if !_rules[rule_]() {
						goto l721
					}
					if !_rules[ruleWord]() {
						goto l721
					}
					goto l719
				l721:
					position, tokenIndex = position721, tokenIndex721
				}
				add(ruleFiliusF, position720)
			}
			return true
		l719:
			position, tokenIndex = position719, tokenIndex719
			return false
		},
		/* 100 FiliusFNoSpace <- <('f' '.')> */
		func() bool {
			position722, tokenIndex722 := position, tokenIndex
			{
				position723 := position
				if buffer[position] != rune('f') {
					goto l722
				}
				position++
				if buffer[position] != rune('.') {
					goto l722
				}
				position++
				add(ruleFiliusFNoSpace, position723)
			}
			return true
		l722:
			position, tokenIndex = position722, tokenIndex722
			return false
		},
		/* 101 AuthorSuffix <- <('b' 'i' 's')> */
		func() bool {
			position724, tokenIndex724 := position, tokenIndex
			{
				position725 := position
				if buffer[position] != rune('b') {
					goto l724
				}
				position++
				if buffer[position] != rune('i') {
					goto l724
				}
				position++
				if buffer[position] != rune('s') {
					goto l724
				}
				position++
				add(ruleAuthorSuffix, position725)
			}
			return true
		l724:
			position, tokenIndex = position724, tokenIndex724
			return false
		},
		/* 102 AuthorPrefixGlued <- <(('d' / 'O' / 'L' / ('M' 'c') / 'M') Apostrophe)> */
		func() bool {
			position726, tokenIndex726 := position, tokenIndex
			{
				position727 := position
				{
					position728, tokenIndex728 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l729
					}
					position++
					goto l728
				l729:
					position, tokenIndex = position728, tokenIndex728
					if buffer[position] != rune('O') {
						goto l730
					}
					position++
					goto l728
				l730:
					position, tokenIndex = position728, tokenIndex728
					if buffer[position] != rune('L') {
						goto l731
					}
					position++
					goto l728
				l731:
					position, tokenIndex = position728, tokenIndex728
					if buffer[position] != rune('M') {
						goto l732
					}
					position++
					if buffer[position] != rune('c') {
						goto l732
					}
					position++
					goto l728
				l732:
					position, tokenIndex = position728, tokenIndex728
					if buffer[position] != rune('M') {
						goto l726
					}
					position++
				}
			l728:
				if !_rules[ruleApostrophe]() {
					goto l726
				}
				add(ruleAuthorPrefixGlued, position727)
			}
			return true
		l726:
			position, tokenIndex = position726, tokenIndex726
			return false
		},
		/* 103 AuthorPrefix <- <(AuthorPrefix1 / AuthorPrefix2)> */
		func() bool {
			position733, tokenIndex733 := position, tokenIndex
			{
				position734 := position
				{
					position735, tokenIndex735 := position, tokenIndex
					if !_rules[ruleAuthorPrefix1]() {
						goto l736
					}
					goto l735
				l736:
					position, tokenIndex = position735, tokenIndex735
					if !_rules[ruleAuthorPrefix2]() {
						goto l733
					}
				}
			l735:
				add(ruleAuthorPrefix, position734)
			}
			return true
		l733:
			position, tokenIndex = position733, tokenIndex733
			return false
		},
		/* 104 AuthorPrefix2 <- <(('v' '.' (_? ('d' '.'))?) / (Apostrophe 't'))> */
		func() bool {
			position737, tokenIndex737 := position, tokenIndex
			{
				position738 := position
				{
					position739, tokenIndex739 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l740
					}
					position++
					if buffer[position] != rune('.') {
						goto l740
					}
					position++
					{
						position741, tokenIndex741 := position, tokenIndex
						{
							position743, tokenIndex743 := position, tokenIndex
							if !_rules[rule_]() {
								goto l743
							}
							goto l744
						l743:
							position, tokenIndex = position743, tokenIndex743
						}
					l744:
						if buffer[position] != rune('d') {
							goto l741
						}
						position++
						if buffer[position] != rune('.') {
							goto l741
						}
						position++
						goto l742
					l741:
						position, tokenIndex = position741, tokenIndex741
					}
				l742:
					goto l739
				l740:
					position, tokenIndex = position739, tokenIndex739
					if !_rules[ruleApostrophe]() {
						goto l737
					}
					if buffer[position] != rune('t') {
						goto l737
					}
					position++
				}
			l739:
				add(ruleAuthorPrefix2, position738)
			}
			return true
		l737:
			position, tokenIndex = position737, tokenIndex737
			return false
		},
		/* 105 AuthorPrefix1 <- <((('a' 'b') / ('a' 'f') / ('b' 'i' 's') / ('d' 'a') / ('d' 'e' 'r') / ('d' 'e' 's') / ('d' 'e' 'n') / ('d' 'e' 'l') / ('d' 'e' 'l' 'l' 'a') / ('d' 'e' 'l' 'a') / ('d' 'e') / ('d' 'i') / ('d' 'u') / ('e' 'l') / ('l' 'a') / ('l' 'e') / ('t' 'e' 'r') / ('v' 'a' 'n') / ('d' Apostrophe) / ('i' 'n' Apostrophe 't') / ('z' 'u' 'r') / ('z' 'u') / ('v' 'o' 'n' (_ (('d' '.') / ('d' 'e' 'm')))?) / ('v' (_ 'd')?)) &_)> */
		func() bool {
			position745, tokenIndex745 := position, tokenIndex
			{
				position746 := position
				{
					position747, tokenIndex747 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l748
					}
					position++
					if buffer[position] != rune('b') {
						goto l748
					}
					position++
					goto l747
				l748:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('a') {
						goto l749
					}
					position++
					if buffer[position] != rune('f') {
						goto l749
					}
					position++
					goto l747
				l749:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('b') {
						goto l750
					}
					position++
					if buffer[position] != rune('i') {
						goto l750
					}
					position++
					if buffer[position] != rune('s') {
						goto l750
					}
					position++
					goto l747
				l750:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('d') {
						goto l751
					}
					position++
					if buffer[position] != rune('a') {
						goto l751
					}
					position++
					goto l747
				l751:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('d') {
						goto l752
					}
					position++
					if buffer[position] != rune('e') {
						goto l752
					}
					position++
					if buffer[position] != rune('r') {
						goto l752
					}
					position++
					goto l747
				l752:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('d') {
						goto l753
					}
					position++
					if buffer[position] != rune('e') {
						goto l753
					}
					position++
					if buffer[position] != rune('s') {
						goto l753
					}
					position++
					goto l747
				l753:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('d') {
						goto l754
					}
					position++
					if buffer[position] != rune('e') {
						goto l754
					}
					position++
					if buffer[position] != rune('n') {
						goto l754
					}
					position++
					goto l747
				l754:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('d') {
						goto l755
					}
					position++
					if buffer[position] != rune('e') {
						goto l755
					}
					position++
					if buffer[position] != rune('l') {
						goto l755
					}
					position++
					goto l747
				l755:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('d') {
						goto l756
					}
					position++
					if buffer[position] != rune('e') {
						goto l756
					}
					position++
					if buffer[position] != rune('l') {
						goto l756
					}
					position++
					if buffer[position] != rune('l') {
						goto l756
					}
					position++
					if buffer[position] != rune('a') {
						goto l756
					}
					position++
					goto l747
				l756:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('d') {
						goto l757
					}
					position++
					if buffer[position] != rune('e') {
						goto l757
					}
					position++
					if buffer[position] != rune('l') {
						goto l757
					}
					position++
					if buffer[position] != rune('a') {
						goto l757
					}
					position++
					goto l747
				l757:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('d') {
						goto l758
					}
					position++
					if buffer[position] != rune('e') {
						goto l758
					}
					position++
					goto l747
				l758:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('d') {
						goto l759
					}
					position++
					if buffer[position] != rune('i') {
						goto l759
					}
					position++
					goto l747
				l759:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('d') {
						goto l760
					}
					position++
					if buffer[position] != rune('u') {
						goto l760
					}
					position++
					goto l747
				l760:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('e') {
						goto l761
					}
					position++
					if buffer[position] != rune('l') {
						goto l761
					}
					position++
					goto l747
				l761:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('l') {
						goto l762
					}
					position++
					if buffer[position] != rune('a') {
						goto l762
					}
					position++
					goto l747
				l762:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('l') {
						goto l763
					}
					position++
					if buffer[position] != rune('e') {
						goto l763
					}
					position++
					goto l747
				l763:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('t') {
						goto l764
					}
					position++
					if buffer[position] != rune('e') {
						goto l764
					}
					position++
					if buffer[position] != rune('r') {
						goto l764
					}
					position++
					goto l747
				l764:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('v') {
						goto l765
					}
					position++
					if buffer[position] != rune('a') {
						goto l765
					}
					position++
					if buffer[position] != rune('n') {
						goto l765
					}
					position++
					goto l747
				l765:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('d') {
						goto l766
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l766
					}
					goto l747
				l766:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('i') {
						goto l767
					}
					position++
					if buffer[position] != rune('n') {
						goto l767
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l767
					}
					if buffer[position] != rune('t') {
						goto l767
					}
					position++
					goto l747
				l767:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('z') {
						goto l768
					}
					position++
					if buffer[position] != rune('u') {
						goto l768
					}
					position++
					if buffer[position] != rune('r') {
						goto l768
					}
					position++
					goto l747
				l768:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('z') {
						goto l769
					}
					position++
					if buffer[position] != rune('u') {
						goto l769
					}
					position++
					goto l747
				l769:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('v') {
						goto l770
					}
					position++
					if buffer[position] != rune('o') {
						goto l770
					}
					position++
					if buffer[position] != rune('n') {
						goto l770
					}
					position++
					{
						position771, tokenIndex771 := position, tokenIndex
						if !_rules[rule_]() {
							goto l771
						}
						{
							position773, tokenIndex773 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l774
							}
							position++
							if buffer[position] != rune('.') {
								goto l774
							}
							position++
							goto l773
						l774:
							position, tokenIndex = position773, tokenIndex773
							if buffer[position] != rune('d') {
								goto l771
							}
							position++
							if buffer[position] != rune('e') {
								goto l771
							}
							position++
							if buffer[position] != rune('m') {
								goto l771
							}
							position++
						}
					l773:
						goto l772
					l771:
						position, tokenIndex = position771, tokenIndex771
					}
				l772:
					goto l747
				l770:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('v') {
						goto l745
					}
					position++
					{
						position775, tokenIndex775 := position, tokenIndex
						if !_rules[rule_]() {
							goto l775
						}
						if buffer[position] != rune('d') {
							goto l775
						}
						position++
						goto l776
					l775:
						position, tokenIndex = position775, tokenIndex775
					}
				l776:
				}
			l747:
				{
					position777, tokenIndex777 := position, tokenIndex
					if !_rules[rule_]() {
						goto l745
					}
					position, tokenIndex = position777, tokenIndex777
				}
				add(ruleAuthorPrefix1, position746)
			}
			return true
		l745:
			position, tokenIndex = position745, tokenIndex745
			return false
		},
		/* 106 AuthorUpperChar <- <(UpperASCII / MiscodedChar / ('À' / 'Á' / 'Â' / 'Ã' / 'Ä' / 'Å' / 'Æ' / 'Ç' / 'È' / 'É' / 'Ê' / 'Ë' / 'Ì' / 'Í' / 'Î' / 'Ï' / 'Ð' / 'Ñ' / 'Ò' / 'Ó' / 'Ô' / 'Õ' / 'Ö' / 'Ø' / 'Ù' / 'Ú' / 'Û' / 'Ü' / 'Ý' / 'Ć' / 'Č' / 'Ď' / 'İ' / 'Ķ' / 'Ĺ' / 'ĺ' / 'Ľ' / 'ľ' / 'Ł' / 'ł' / 'Ņ' / 'Ō' / 'Ő' / 'Œ' / 'Ř' / 'Ś' / 'Ŝ' / 'Ş' / 'Š' / 'Ÿ' / 'Ź' / 'Ż' / 'Ž' / 'ƒ' / 'Ǿ' / 'Ș' / 'Ț'))> */
		func() bool {
			position778, tokenIndex778 := position, tokenIndex
			{
				position779 := position
				{
					position780, tokenIndex780 := position, tokenIndex
					if !_rules[ruleUpperASCII]() {
						goto l781
					}
					goto l780
				l781:
					position, tokenIndex = position780, tokenIndex780
					if !_rules[ruleMiscodedChar]() {
						goto l782
					}
					goto l780
				l782:
					position, tokenIndex = position780, tokenIndex780
					{
						position783, tokenIndex783 := position, tokenIndex
						if buffer[position] != rune('À') {
							goto l784
						}
						position++
						goto l783
					l784:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Á') {
							goto l785
						}
						position++
						goto l783
					l785:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Â') {
							goto l786
						}
						position++
						goto l783
					l786:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ã') {
							goto l787
						}
						position++
						goto l783
					l787:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ä') {
							goto l788
						}
						position++
						goto l783
					l788:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Å') {
							goto l789
						}
						position++
						goto l783
					l789:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Æ') {
							goto l790
						}
						position++
						goto l783
					l790:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ç') {
							goto l791
						}
						position++
						goto l783
					l791:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('È') {
							goto l792
						}
						position++
						goto l783
					l792:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('É') {
							goto l793
						}
						position++
						goto l783
					l793:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ê') {
							goto l794
						}
						position++
						goto l783
					l794:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ë') {
							goto l795
						}
						position++
						goto l783
					l795:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ì') {
							goto l796
						}
						position++
						goto l783
					l796:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Í') {
							goto l797
						}
						position++
						goto l783
					l797:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Î') {
							goto l798
						}
						position++
						goto l783
					l798:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ï') {
							goto l799
						}
						position++
						goto l783
					l799:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ð') {
							goto l800
						}
						position++
						goto l783
					l800:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ñ') {
							goto l801
						}
						position++
						goto l783
					l801:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ò') {
							goto l802
						}
						position++
						goto l783
					l802:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ó') {
							goto l803
						}
						position++
						goto l783
					l803:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ô') {
							goto l804
						}
						position++
						goto l783
					l804:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Õ') {
							goto l805
						}
						position++
						goto l783
					l805:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ö') {
							goto l806
						}
						position++
						goto l783
					l806:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ø') {
							goto l807
						}
						position++
						goto l783
					l807:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ù') {
							goto l808
						}
						position++
						goto l783
					l808:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ú') {
							goto l809
						}
						position++
						goto l783
					l809:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Û') {
							goto l810
						}
						position++
						goto l783
					l810:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ü') {
							goto l811
						}
						position++
						goto l783
					l811:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ý') {
							goto l812
						}
						position++
						goto l783
					l812:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ć') {
							goto l813
						}
						position++
						goto l783
					l813:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Č') {
							goto l814
						}
						position++
						goto l783
					l814:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ď') {
							goto l815
						}
						position++
						goto l783
					l815:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('İ') {
							goto l816
						}
						position++
						goto l783
					l816:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ķ') {
							goto l817
						}
						position++
						goto l783
					l817:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ĺ') {
							goto l818
						}
						position++
						goto l783
					l818:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('ĺ') {
							goto l819
						}
						position++
						goto l783
					l819:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ľ') {
							goto l820
						}
						position++
						goto l783
					l820:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('ľ') {
							goto l821
						}
						position++
						goto l783
					l821:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ł') {
							goto l822
						}
						position++
						goto l783
					l822:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('ł') {
							goto l823
						}
						position++
						goto l783
					l823:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ņ') {
							goto l824
						}
						position++
						goto l783
					l824:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ō') {
							goto l825
						}
						position++
						goto l783
					l825:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ő') {
							goto l826
						}
						position++
						goto l783
					l826:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Œ') {
							goto l827
						}
						position++
						goto l783
					l827:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ř') {
							goto l828
						}
						position++
						goto l783
					l828:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ś') {
							goto l829
						}
						position++
						goto l783
					l829:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ŝ') {
							goto l830
						}
						position++
						goto l783
					l830:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ş') {
							goto l831
						}
						position++
						goto l783
					l831:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Š') {
							goto l832
						}
						position++
						goto l783
					l832:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ÿ') {
							goto l833
						}
						position++
						goto l783
					l833:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ź') {
							goto l834
						}
						position++
						goto l783
					l834:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ż') {
							goto l835
						}
						position++
						goto l783
					l835:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ž') {
							goto l836
						}
						position++
						goto l783
					l836:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('ƒ') {
							goto l837
						}
						position++
						goto l783
					l837:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ǿ') {
							goto l838
						}
						position++
						goto l783
					l838:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ș') {
							goto l839
						}
						position++
						goto l783
					l839:
						position, tokenIndex = position783, tokenIndex783
						if buffer[position] != rune('Ț') {
							goto l778
						}
						position++
					}
				l783:
				}
			l780:
				add(ruleAuthorUpperChar, position779)
			}
			return true
		l778:
			position, tokenIndex = position778, tokenIndex778
			return false
		},
		/* 107 AuthorLowerChar <- <(LowerASCII / MiscodedChar / ('à' / 'á' / 'â' / 'ã' / 'ä' / 'å' / 'æ' / 'ç' / 'è' / 'é' / 'ê' / 'ë' / 'ì' / 'í' / 'î' / 'ï' / 'ð' / 'ñ' / 'ò' / 'ó' / 'ó' / 'ô' / 'õ' / 'ö' / 'ø' / 'ù' / 'ú' / 'û' / 'ü' / 'ý' / 'ÿ' / 'ā' / 'ă' / 'ą' / 'ć' / 'ĉ' / 'č' / 'ď' / 'đ' / '\'' / 'ē' / 'ĕ' / 'ė' / 'ę' / 'ě' / 'ğ' / 'ī' / 'ĭ' / 'İ' / 'ı' / 'ĺ' / 'ľ' / 'ł' / 'ń' / 'ņ' / 'ň' / 'ŏ' / 'ő' / 'œ' / 'ŕ' / 'ř' / 'ś' / 'ş' / 'š' / 'ţ' / 'ť' / 'ũ' / 'ū' / 'ŭ' / 'ů' / 'ű' / 'ź' / 'ż' / 'ž' / 'ſ' / 'ǎ' / 'ǔ' / 'ǧ' / 'ș' / 'ț' / 'ȳ' / 'ß'))> */
		func() bool {
			position840, tokenIndex840 := position, tokenIndex
			{
				position841 := position
				{
					position842, tokenIndex842 := position, tokenIndex
					if !_rules[ruleLowerASCII]() {
						goto l843
					}
					goto l842
				l843:
					position, tokenIndex = position842, tokenIndex842
					if !_rules[ruleMiscodedChar]() {
						goto l844
					}
					goto l842
				l844:
					position, tokenIndex = position842, tokenIndex842
					{
						position845, tokenIndex845 := position, tokenIndex
						if buffer[position] != rune('à') {
							goto l846
						}
						position++
						goto l845
					l846:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('á') {
							goto l847
						}
						position++
						goto l845
					l847:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('â') {
							goto l848
						}
						position++
						goto l845
					l848:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ã') {
							goto l849
						}
						position++
						goto l845
					l849:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ä') {
							goto l850
						}
						position++
						goto l845
					l850:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('å') {
							goto l851
						}
						position++
						goto l845
					l851:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('æ') {
							goto l852
						}
						position++
						goto l845
					l852:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ç') {
							goto l853
						}
						position++
						goto l845
					l853:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('è') {
							goto l854
						}
						position++
						goto l845
					l854:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('é') {
							goto l855
						}
						position++
						goto l845
					l855:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ê') {
							goto l856
						}
						position++
						goto l845
					l856:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ë') {
							goto l857
						}
						position++
						goto l845
					l857:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ì') {
							goto l858
						}
						position++
						goto l845
					l858:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('í') {
							goto l859
						}
						position++
						goto l845
					l859:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('î') {
							goto l860
						}
						position++
						goto l845
					l860:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ï') {
							goto l861
						}
						position++
						goto l845
					l861:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ð') {
							goto l862
						}
						position++
						goto l845
					l862:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ñ') {
							goto l863
						}
						position++
						goto l845
					l863:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ò') {
							goto l864
						}
						position++
						goto l845
					l864:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ó') {
							goto l865
						}
						position++
						goto l845
					l865:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ó') {
							goto l866
						}
						position++
						goto l845
					l866:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ô') {
							goto l867
						}
						position++
						goto l845
					l867:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('õ') {
							goto l868
						}
						position++
						goto l845
					l868:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ö') {
							goto l869
						}
						position++
						goto l845
					l869:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ø') {
							goto l870
						}
						position++
						goto l845
					l870:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ù') {
							goto l871
						}
						position++
						goto l845
					l871:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ú') {
							goto l872
						}
						position++
						goto l845
					l872:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('û') {
							goto l873
						}
						position++
						goto l845
					l873:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ü') {
							goto l874
						}
						position++
						goto l845
					l874:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ý') {
							goto l875
						}
						position++
						goto l845
					l875:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ÿ') {
							goto l876
						}
						position++
						goto l845
					l876:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ā') {
							goto l877
						}
						position++
						goto l845
					l877:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ă') {
							goto l878
						}
						position++
						goto l845
					l878:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ą') {
							goto l879
						}
						position++
						goto l845
					l879:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ć') {
							goto l880
						}
						position++
						goto l845
					l880:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ĉ') {
							goto l881
						}
						position++
						goto l845
					l881:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('č') {
							goto l882
						}
						position++
						goto l845
					l882:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ď') {
							goto l883
						}
						position++
						goto l845
					l883:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('đ') {
							goto l884
						}
						position++
						goto l845
					l884:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('\'') {
							goto l885
						}
						position++
						goto l845
					l885:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ē') {
							goto l886
						}
						position++
						goto l845
					l886:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ĕ') {
							goto l887
						}
						position++
						goto l845
					l887:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ė') {
							goto l888
						}
						position++
						goto l845
					l888:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ę') {
							goto l889
						}
						position++
						goto l845
					l889:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ě') {
							goto l890
						}
						position++
						goto l845
					l890:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ğ') {
							goto l891
						}
						position++
						goto l845
					l891:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ī') {
							goto l892
						}
						position++
						goto l845
					l892:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ĭ') {
							goto l893
						}
						position++
						goto l845
					l893:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('İ') {
							goto l894
						}
						position++
						goto l845
					l894:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ı') {
							goto l895
						}
						position++
						goto l845
					l895:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ĺ') {
							goto l896
						}
						position++
						goto l845
					l896:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ľ') {
							goto l897
						}
						position++
						goto l845
					l897:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ł') {
							goto l898
						}
						position++
						goto l845
					l898:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ń') {
							goto l899
						}
						position++
						goto l845
					l899:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ņ') {
							goto l900
						}
						position++
						goto l845
					l900:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ň') {
							goto l901
						}
						position++
						goto l845
					l901:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ŏ') {
							goto l902
						}
						position++
						goto l845
					l902:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ő') {
							goto l903
						}
						position++
						goto l845
					l903:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('œ') {
							goto l904
						}
						position++
						goto l845
					l904:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ŕ') {
							goto l905
						}
						position++
						goto l845
					l905:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ř') {
							goto l906
						}
						position++
						goto l845
					l906:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ś') {
							goto l907
						}
						position++
						goto l845
					l907:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ş') {
							goto l908
						}
						position++
						goto l845
					l908:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('š') {
							goto l909
						}
						position++
						goto l845
					l909:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ţ') {
							goto l910
						}
						position++
						goto l845
					l910:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ť') {
							goto l911
						}
						position++
						goto l845
					l911:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ũ') {
							goto l912
						}
						position++
						goto l845
					l912:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ū') {
							goto l913
						}
						position++
						goto l845
					l913:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ŭ') {
							goto l914
						}
						position++
						goto l845
					l914:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ů') {
							goto l915
						}
						position++
						goto l845
					l915:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ű') {
							goto l916
						}
						position++
						goto l845
					l916:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ź') {
							goto l917
						}
						position++
						goto l845
					l917:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ż') {
							goto l918
						}
						position++
						goto l845
					l918:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ž') {
							goto l919
						}
						position++
						goto l845
					l919:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ſ') {
							goto l920
						}
						position++
						goto l845
					l920:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ǎ') {
							goto l921
						}
						position++
						goto l845
					l921:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ǔ') {
							goto l922
						}
						position++
						goto l845
					l922:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ǧ') {
							goto l923
						}
						position++
						goto l845
					l923:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ș') {
							goto l924
						}
						position++
						goto l845
					l924:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ț') {
							goto l925
						}
						position++
						goto l845
					l925:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ȳ') {
							goto l926
						}
						position++
						goto l845
					l926:
						position, tokenIndex = position845, tokenIndex845
						if buffer[position] != rune('ß') {
							goto l840
						}
						position++
					}
				l845:
				}
			l842:
				add(ruleAuthorLowerChar, position841)
			}
			return true
		l840:
			position, tokenIndex = position840, tokenIndex840
			return false
		},
		/* 108 Year <- <(YearRange / YearApprox / YearWithParens / YearWithPage / YearWithDot / YearWithChar / YearNum)> */
		func() bool {
			position927, tokenIndex927 := position, tokenIndex
			{
				position928 := position
				{
					position929, tokenIndex929 := position, tokenIndex
					if !_rules[ruleYearRange]() {
						goto l930
					}
					goto l929
				l930:
					position, tokenIndex = position929, tokenIndex929
					if !_rules[ruleYearApprox]() {
						goto l931
					}
					goto l929
				l931:
					position, tokenIndex = position929, tokenIndex929
					if !_rules[ruleYearWithParens]() {
						goto l932
					}
					goto l929
				l932:
					position, tokenIndex = position929, tokenIndex929
					if !_rules[ruleYearWithPage]() {
						goto l933
					}
					goto l929
				l933:
					position, tokenIndex = position929, tokenIndex929
					if !_rules[ruleYearWithDot]() {
						goto l934
					}
					goto l929
				l934:
					position, tokenIndex = position929, tokenIndex929
					if !_rules[ruleYearWithChar]() {
						goto l935
					}
					goto l929
				l935:
					position, tokenIndex = position929, tokenIndex929
					if !_rules[ruleYearNum]() {
						goto l927
					}
				}
			l929:
				add(ruleYear, position928)
			}
			return true
		l927:
			position, tokenIndex = position927, tokenIndex927
			return false
		},
		/* 109 YearRange <- <(YearNum (Dash / Slash) (Nums+ ('a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'l' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z' / '?')*))> */
		func() bool {
			position936, tokenIndex936 := position, tokenIndex
			{
				position937 := position
				if !_rules[ruleYearNum]() {
					goto l936
				}
				{
					position938, tokenIndex938 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l939
					}
					goto l938
				l939:
					position, tokenIndex = position938, tokenIndex938
					if !_rules[ruleSlash]() {
						goto l936
					}
				}
			l938:
				if !_rules[ruleNums]() {
					goto l936
				}
			l940:
				{
					position941, tokenIndex941 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l941
					}
					goto l940
				l941:
					position, tokenIndex = position941, tokenIndex941
				}
			l942:
				{
					position943, tokenIndex943 := position, tokenIndex
					{
						position944, tokenIndex944 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l945
						}
						position++
						goto l944
					l945:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('b') {
							goto l946
						}
						position++
						goto l944
					l946:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('c') {
							goto l947
						}
						position++
						goto l944
					l947:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('d') {
							goto l948
						}
						position++
						goto l944
					l948:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('e') {
							goto l949
						}
						position++
						goto l944
					l949:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('f') {
							goto l950
						}
						position++
						goto l944
					l950:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('g') {
							goto l951
						}
						position++
						goto l944
					l951:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('h') {
							goto l952
						}
						position++
						goto l944
					l952:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('i') {
							goto l953
						}
						position++
						goto l944
					l953:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('j') {
							goto l954
						}
						position++
						goto l944
					l954:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('k') {
							goto l955
						}
						position++
						goto l944
					l955:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('l') {
							goto l956
						}
						position++
						goto l944
					l956:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('m') {
							goto l957
						}
						position++
						goto l944
					l957:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('n') {
							goto l958
						}
						position++
						goto l944
					l958:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('o') {
							goto l959
						}
						position++
						goto l944
					l959:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('p') {
							goto l960
						}
						position++
						goto l944
					l960:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('q') {
							goto l961
						}
						position++
						goto l944
					l961:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('r') {
							goto l962
						}
						position++
						goto l944
					l962:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('s') {
							goto l963
						}
						position++
						goto l944
					l963:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('t') {
							goto l964
						}
						position++
						goto l944
					l964:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('u') {
							goto l965
						}
						position++
						goto l944
					l965:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('v') {
							goto l966
						}
						position++
						goto l944
					l966:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('w') {
							goto l967
						}
						position++
						goto l944
					l967:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('x') {
							goto l968
						}
						position++
						goto l944
					l968:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('y') {
							goto l969
						}
						position++
						goto l944
					l969:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('z') {
							goto l970
						}
						position++
						goto l944
					l970:
						position, tokenIndex = position944, tokenIndex944
						if buffer[position] != rune('?') {
							goto l943
						}
						position++
					}
				l944:
					goto l942
				l943:
					position, tokenIndex = position943, tokenIndex943
				}
				add(ruleYearRange, position937)
			}
			return true
		l936:
			position, tokenIndex = position936, tokenIndex936
			return false
		},
		/* 110 YearWithDot <- <(YearNum '.')> */
		func() bool {
			position971, tokenIndex971 := position, tokenIndex
			{
				position972 := position
				if !_rules[ruleYearNum]() {
					goto l971
				}
				if buffer[position] != rune('.') {
					goto l971
				}
				position++
				add(ruleYearWithDot, position972)
			}
			return true
		l971:
			position, tokenIndex = position971, tokenIndex971
			return false
		},
		/* 111 YearApprox <- <('[' _? YearNum _? ']')> */
		func() bool {
			position973, tokenIndex973 := position, tokenIndex
			{
				position974 := position
				if buffer[position] != rune('[') {
					goto l973
				}
				position++
				{
					position975, tokenIndex975 := position, tokenIndex
					if !_rules[rule_]() {
						goto l975
					}
					goto l976
				l975:
					position, tokenIndex = position975, tokenIndex975
				}
			l976:
				if !_rules[ruleYearNum]() {
					goto l973
				}
				{
					position977, tokenIndex977 := position, tokenIndex
					if !_rules[rule_]() {
						goto l977
					}
					goto l978
				l977:
					position, tokenIndex = position977, tokenIndex977
				}
			l978:
				if buffer[position] != rune(']') {
					goto l973
				}
				position++
				add(ruleYearApprox, position974)
			}
			return true
		l973:
			position, tokenIndex = position973, tokenIndex973
			return false
		},
		/* 112 YearWithPage <- <((YearWithChar / YearNum) _? ':' _? Nums+)> */
		func() bool {
			position979, tokenIndex979 := position, tokenIndex
			{
				position980 := position
				{
					position981, tokenIndex981 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l982
					}
					goto l981
				l982:
					position, tokenIndex = position981, tokenIndex981
					if !_rules[ruleYearNum]() {
						goto l979
					}
				}
			l981:
				{
					position983, tokenIndex983 := position, tokenIndex
					if !_rules[rule_]() {
						goto l983
					}
					goto l984
				l983:
					position, tokenIndex = position983, tokenIndex983
				}
			l984:
				if buffer[position] != rune(':') {
					goto l979
				}
				position++
				{
					position985, tokenIndex985 := position, tokenIndex
					if !_rules[rule_]() {
						goto l985
					}
					goto l986
				l985:
					position, tokenIndex = position985, tokenIndex985
				}
			l986:
				if !_rules[ruleNums]() {
					goto l979
				}
			l987:
				{
					position988, tokenIndex988 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l988
					}
					goto l987
				l988:
					position, tokenIndex = position988, tokenIndex988
				}
				add(ruleYearWithPage, position980)
			}
			return true
		l979:
			position, tokenIndex = position979, tokenIndex979
			return false
		},
		/* 113 YearWithParens <- <('(' (YearWithChar / YearNum) ')')> */
		func() bool {
			position989, tokenIndex989 := position, tokenIndex
			{
				position990 := position
				if buffer[position] != rune('(') {
					goto l989
				}
				position++
				{
					position991, tokenIndex991 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l992
					}
					goto l991
				l992:
					position, tokenIndex = position991, tokenIndex991
					if !_rules[ruleYearNum]() {
						goto l989
					}
				}
			l991:
				if buffer[position] != rune(')') {
					goto l989
				}
				position++
				add(ruleYearWithParens, position990)
			}
			return true
		l989:
			position, tokenIndex = position989, tokenIndex989
			return false
		},
		/* 114 YearWithChar <- <(YearNum LowerASCII)> */
		func() bool {
			position993, tokenIndex993 := position, tokenIndex
			{
				position994 := position
				if !_rules[ruleYearNum]() {
					goto l993
				}
				if !_rules[ruleLowerASCII]() {
					goto l993
				}
				add(ruleYearWithChar, position994)
			}
			return true
		l993:
			position, tokenIndex = position993, tokenIndex993
			return false
		},
		/* 115 YearNum <- <(('1' / '2') ('0' / '7' / '8' / '9') Nums (Nums / '?') '?'*)> */
		func() bool {
			position995, tokenIndex995 := position, tokenIndex
			{
				position996 := position
				{
					position997, tokenIndex997 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l998
					}
					position++
					goto l997
				l998:
					position, tokenIndex = position997, tokenIndex997
					if buffer[position] != rune('2') {
						goto l995
					}
					position++
				}
			l997:
				{
					position999, tokenIndex999 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l1000
					}
					position++
					goto l999
				l1000:
					position, tokenIndex = position999, tokenIndex999
					if buffer[position] != rune('7') {
						goto l1001
					}
					position++
					goto l999
				l1001:
					position, tokenIndex = position999, tokenIndex999
					if buffer[position] != rune('8') {
						goto l1002
					}
					position++
					goto l999
				l1002:
					position, tokenIndex = position999, tokenIndex999
					if buffer[position] != rune('9') {
						goto l995
					}
					position++
				}
			l999:
				if !_rules[ruleNums]() {
					goto l995
				}
				{
					position1003, tokenIndex1003 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1004
					}
					goto l1003
				l1004:
					position, tokenIndex = position1003, tokenIndex1003
					if buffer[position] != rune('?') {
						goto l995
					}
					position++
				}
			l1003:
			l1005:
				{
					position1006, tokenIndex1006 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l1006
					}
					position++
					goto l1005
				l1006:
					position, tokenIndex = position1006, tokenIndex1006
				}
				add(ruleYearNum, position996)
			}
			return true
		l995:
			position, tokenIndex = position995, tokenIndex995
			return false
		},
		/* 116 NameUpperChar <- <(UpperChar / UpperCharExtended)> */
		func() bool {
			position1007, tokenIndex1007 := position, tokenIndex
			{
				position1008 := position
				{
					position1009, tokenIndex1009 := position, tokenIndex
					if !_rules[ruleUpperChar]() {
						goto l1010
					}
					goto l1009
				l1010:
					position, tokenIndex = position1009, tokenIndex1009
					if !_rules[ruleUpperCharExtended]() {
						goto l1007
					}
				}
			l1009:
				add(ruleNameUpperChar, position1008)
			}
			return true
		l1007:
			position, tokenIndex = position1007, tokenIndex1007
			return false
		},
		/* 117 UpperCharExtended <- <('Æ' / 'Œ' / 'Ö')> */
		func() bool {
			position1011, tokenIndex1011 := position, tokenIndex
			{
				position1012 := position
				{
					position1013, tokenIndex1013 := position, tokenIndex
					if buffer[position] != rune('Æ') {
						goto l1014
					}
					position++
					goto l1013
				l1014:
					position, tokenIndex = position1013, tokenIndex1013
					if buffer[position] != rune('Œ') {
						goto l1015
					}
					position++
					goto l1013
				l1015:
					position, tokenIndex = position1013, tokenIndex1013
					if buffer[position] != rune('Ö') {
						goto l1011
					}
					position++
				}
			l1013:
				add(ruleUpperCharExtended, position1012)
			}
			return true
		l1011:
			position, tokenIndex = position1011, tokenIndex1011
			return false
		},
		/* 118 UpperChar <- <UpperASCII> */
		func() bool {
			position1016, tokenIndex1016 := position, tokenIndex
			{
				position1017 := position
				if !_rules[ruleUpperASCII]() {
					goto l1016
				}
				add(ruleUpperChar, position1017)
			}
			return true
		l1016:
			position, tokenIndex = position1016, tokenIndex1016
			return false
		},
		/* 119 NameLowerChar <- <(LowerChar / LowerCharExtended / MiscodedChar)> */
		func() bool {
			position1018, tokenIndex1018 := position, tokenIndex
			{
				position1019 := position
				{
					position1020, tokenIndex1020 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l1021
					}
					goto l1020
				l1021:
					position, tokenIndex = position1020, tokenIndex1020
					if !_rules[ruleLowerCharExtended]() {
						goto l1022
					}
					goto l1020
				l1022:
					position, tokenIndex = position1020, tokenIndex1020
					if !_rules[ruleMiscodedChar]() {
						goto l1018
					}
				}
			l1020:
				add(ruleNameLowerChar, position1019)
			}
			return true
		l1018:
			position, tokenIndex = position1018, tokenIndex1018
			return false
		},
		/* 120 MiscodedChar <- <'�'> */
		func() bool {
			position1023, tokenIndex1023 := position, tokenIndex
			{
				position1024 := position
				if buffer[position] != rune('�') {
					goto l1023
				}
				position++
				add(ruleMiscodedChar, position1024)
			}
			return true
		l1023:
			position, tokenIndex = position1023, tokenIndex1023
			return false
		},
		/* 121 LowerCharExtended <- <('æ' / 'œ' / 'à' / 'â' / 'å' / 'ã' / 'ä' / 'á' / 'ç' / 'č' / 'é' / 'è' / 'ë' / 'í' / 'ì' / 'ï' / 'ň' / 'ñ' / 'ñ' / 'ó' / 'ò' / 'ô' / 'ø' / 'õ' / 'ö' / 'ú' / 'ù' / 'ü' / 'ŕ' / 'ř' / 'ŗ' / 'ſ' / 'š' / 'š' / 'ş' / 'ß' / 'ž')> */
		func() bool {
			position1025, tokenIndex1025 := position, tokenIndex
			{
				position1026 := position
				{
					position1027, tokenIndex1027 := position, tokenIndex
					if buffer[position] != rune('æ') {
						goto l1028
					}
					position++
					goto l1027
				l1028:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('œ') {
						goto l1029
					}
					position++
					goto l1027
				l1029:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('à') {
						goto l1030
					}
					position++
					goto l1027
				l1030:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('â') {
						goto l1031
					}
					position++
					goto l1027
				l1031:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('å') {
						goto l1032
					}
					position++
					goto l1027
				l1032:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ã') {
						goto l1033
					}
					position++
					goto l1027
				l1033:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ä') {
						goto l1034
					}
					position++
					goto l1027
				l1034:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('á') {
						goto l1035
					}
					position++
					goto l1027
				l1035:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ç') {
						goto l1036
					}
					position++
					goto l1027
				l1036:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('č') {
						goto l1037
					}
					position++
					goto l1027
				l1037:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('é') {
						goto l1038
					}
					position++
					goto l1027
				l1038:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('è') {
						goto l1039
					}
					position++
					goto l1027
				l1039:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ë') {
						goto l1040
					}
					position++
					goto l1027
				l1040:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('í') {
						goto l1041
					}
					position++
					goto l1027
				l1041:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ì') {
						goto l1042
					}
					position++
					goto l1027
				l1042:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ï') {
						goto l1043
					}
					position++
					goto l1027
				l1043:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ň') {
						goto l1044
					}
					position++
					goto l1027
				l1044:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ñ') {
						goto l1045
					}
					position++
					goto l1027
				l1045:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ñ') {
						goto l1046
					}
					position++
					goto l1027
				l1046:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ó') {
						goto l1047
					}
					position++
					goto l1027
				l1047:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ò') {
						goto l1048
					}
					position++
					goto l1027
				l1048:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ô') {
						goto l1049
					}
					position++
					goto l1027
				l1049:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ø') {
						goto l1050
					}
					position++
					goto l1027
				l1050:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('õ') {
						goto l1051
					}
					position++
					goto l1027
				l1051:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ö') {
						goto l1052
					}
					position++
					goto l1027
				l1052:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ú') {
						goto l1053
					}
					position++
					goto l1027
				l1053:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ù') {
						goto l1054
					}
					position++
					goto l1027
				l1054:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ü') {
						goto l1055
					}
					position++
					goto l1027
				l1055:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ŕ') {
						goto l1056
					}
					position++
					goto l1027
				l1056:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ř') {
						goto l1057
					}
					position++
					goto l1027
				l1057:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ŗ') {
						goto l1058
					}
					position++
					goto l1027
				l1058:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ſ') {
						goto l1059
					}
					position++
					goto l1027
				l1059:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('š') {
						goto l1060
					}
					position++
					goto l1027
				l1060:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('š') {
						goto l1061
					}
					position++
					goto l1027
				l1061:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ş') {
						goto l1062
					}
					position++
					goto l1027
				l1062:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ß') {
						goto l1063
					}
					position++
					goto l1027
				l1063:
					position, tokenIndex = position1027, tokenIndex1027
					if buffer[position] != rune('ž') {
						goto l1025
					}
					position++
				}
			l1027:
				add(ruleLowerCharExtended, position1026)
			}
			return true
		l1025:
			position, tokenIndex = position1025, tokenIndex1025
			return false
		},
		/* 122 LowerChar <- <LowerASCII> */
		func() bool {
			position1064, tokenIndex1064 := position, tokenIndex
			{
				position1065 := position
				if !_rules[ruleLowerASCII]() {
					goto l1064
				}
				add(ruleLowerChar, position1065)
			}
			return true
		l1064:
			position, tokenIndex = position1064, tokenIndex1064
			return false
		},
		/* 123 SpaceCharEOI <- <(_ / !.)> */
		func() bool {
			position1066, tokenIndex1066 := position, tokenIndex
			{
				position1067 := position
				{
					position1068, tokenIndex1068 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1069
					}
					goto l1068
				l1069:
					position, tokenIndex = position1068, tokenIndex1068
					{
						position1070, tokenIndex1070 := position, tokenIndex
						if !matchDot() {
							goto l1070
						}
						goto l1066
					l1070:
						position, tokenIndex = position1070, tokenIndex1070
					}
				}
			l1068:
				add(ruleSpaceCharEOI, position1067)
			}
			return true
		l1066:
			position, tokenIndex = position1066, tokenIndex1066
			return false
		},
		/* 124 Nums <- <[0-9]> */
		func() bool {
			position1071, tokenIndex1071 := position, tokenIndex
			{
				position1072 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l1071
				}
				position++
				add(ruleNums, position1072)
			}
			return true
		l1071:
			position, tokenIndex = position1071, tokenIndex1071
			return false
		},
		/* 125 LowerGreek <- <[α-ω]> */
		func() bool {
			position1073, tokenIndex1073 := position, tokenIndex
			{
				position1074 := position
				if c := buffer[position]; c < rune('α') || c > rune('ω') {
					goto l1073
				}
				position++
				add(ruleLowerGreek, position1074)
			}
			return true
		l1073:
			position, tokenIndex = position1073, tokenIndex1073
			return false
		},
		/* 126 LowerASCII <- <[a-z]> */
		func() bool {
			position1075, tokenIndex1075 := position, tokenIndex
			{
				position1076 := position
				if c := buffer[position]; c < rune('a') || c > rune('z') {
					goto l1075
				}
				position++
				add(ruleLowerASCII, position1076)
			}
			return true
		l1075:
			position, tokenIndex = position1075, tokenIndex1075
			return false
		},
		/* 127 UpperASCII <- <[A-Z]> */
		func() bool {
			position1077, tokenIndex1077 := position, tokenIndex
			{
				position1078 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l1077
				}
				position++
				add(ruleUpperASCII, position1078)
			}
			return true
		l1077:
			position, tokenIndex = position1077, tokenIndex1077
			return false
		},
		/* 128 Apostrophe <- <(ApostrOther / ApostrASCII)> */
		func() bool {
			position1079, tokenIndex1079 := position, tokenIndex
			{
				position1080 := position
				{
					position1081, tokenIndex1081 := position, tokenIndex
					if !_rules[ruleApostrOther]() {
						goto l1082
					}
					goto l1081
				l1082:
					position, tokenIndex = position1081, tokenIndex1081
					if !_rules[ruleApostrASCII]() {
						goto l1079
					}
				}
			l1081:
				add(ruleApostrophe, position1080)
			}
			return true
		l1079:
			position, tokenIndex = position1079, tokenIndex1079
			return false
		},
		/* 129 ApostrASCII <- <'\''> */
		func() bool {
			position1083, tokenIndex1083 := position, tokenIndex
			{
				position1084 := position
				if buffer[position] != rune('\'') {
					goto l1083
				}
				position++
				add(ruleApostrASCII, position1084)
			}
			return true
		l1083:
			position, tokenIndex = position1083, tokenIndex1083
			return false
		},
		/* 130 ApostrOther <- <('‘' / '’')> */
		func() bool {
			position1085, tokenIndex1085 := position, tokenIndex
			{
				position1086 := position
				{
					position1087, tokenIndex1087 := position, tokenIndex
					if buffer[position] != rune('‘') {
						goto l1088
					}
					position++
					goto l1087
				l1088:
					position, tokenIndex = position1087, tokenIndex1087
					if buffer[position] != rune('’') {
						goto l1085
					}
					position++
				}
			l1087:
				add(ruleApostrOther, position1086)
			}
			return true
		l1085:
			position, tokenIndex = position1085, tokenIndex1085
			return false
		},
		/* 131 Dash <- <'-'> */
		func() bool {
			position1089, tokenIndex1089 := position, tokenIndex
			{
				position1090 := position
				if buffer[position] != rune('-') {
					goto l1089
				}
				position++
				add(ruleDash, position1090)
			}
			return true
		l1089:
			position, tokenIndex = position1089, tokenIndex1089
			return false
		},
		/* 132 Slash <- <'/'> */
		func() bool {
			position1091, tokenIndex1091 := position, tokenIndex
			{
				position1092 := position
				if buffer[position] != rune('/') {
					goto l1091
				}
				position++
				add(ruleSlash, position1092)
			}
			return true
		l1091:
			position, tokenIndex = position1091, tokenIndex1091
			return false
		},
		/* 133 _ <- <(MultipleSpace / SingleSpace)> */
		func() bool {
			position1093, tokenIndex1093 := position, tokenIndex
			{
				position1094 := position
				{
					position1095, tokenIndex1095 := position, tokenIndex
					if !_rules[ruleMultipleSpace]() {
						goto l1096
					}
					goto l1095
				l1096:
					position, tokenIndex = position1095, tokenIndex1095
					if !_rules[ruleSingleSpace]() {
						goto l1093
					}
				}
			l1095:
				add(rule_, position1094)
			}
			return true
		l1093:
			position, tokenIndex = position1093, tokenIndex1093
			return false
		},
		/* 134 MultipleSpace <- <(SingleSpace SingleSpace+)> */
		func() bool {
			position1097, tokenIndex1097 := position, tokenIndex
			{
				position1098 := position
				if !_rules[ruleSingleSpace]() {
					goto l1097
				}
				if !_rules[ruleSingleSpace]() {
					goto l1097
				}
			l1099:
				{
					position1100, tokenIndex1100 := position, tokenIndex
					if !_rules[ruleSingleSpace]() {
						goto l1100
					}
					goto l1099
				l1100:
					position, tokenIndex = position1100, tokenIndex1100
				}
				add(ruleMultipleSpace, position1098)
			}
			return true
		l1097:
			position, tokenIndex = position1097, tokenIndex1097
			return false
		},
		/* 135 SingleSpace <- <(' ' / OtherSpace)> */
		func() bool {
			position1101, tokenIndex1101 := position, tokenIndex
			{
				position1102 := position
				{
					position1103, tokenIndex1103 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l1104
					}
					position++
					goto l1103
				l1104:
					position, tokenIndex = position1103, tokenIndex1103
					if !_rules[ruleOtherSpace]() {
						goto l1101
					}
				}
			l1103:
				add(ruleSingleSpace, position1102)
			}
			return true
		l1101:
			position, tokenIndex = position1101, tokenIndex1101
			return false
		},
		/* 136 OtherSpace <- <('\u3000' / '\u00a0' / '\t' / '\r' / '\n' / '\f' / '\v')> */
		func() bool {
			position1105, tokenIndex1105 := position, tokenIndex
			{
				position1106 := position
				{
					position1107, tokenIndex1107 := position, tokenIndex
					if buffer[position] != rune('\u3000') {
						goto l1108
					}
					position++
					goto l1107
				l1108:
					position, tokenIndex = position1107, tokenIndex1107
					if buffer[position] != rune('\u00a0') {
						goto l1109
					}
					position++
					goto l1107
				l1109:
					position, tokenIndex = position1107, tokenIndex1107
					if buffer[position] != rune('\t') {
						goto l1110
					}
					position++
					goto l1107
				l1110:
					position, tokenIndex = position1107, tokenIndex1107
					if buffer[position] != rune('\r') {
						goto l1111
					}
					position++
					goto l1107
				l1111:
					position, tokenIndex = position1107, tokenIndex1107
					if buffer[position] != rune('\n') {
						goto l1112
					}
					position++
					goto l1107
				l1112:
					position, tokenIndex = position1107, tokenIndex1107
					if buffer[position] != rune('\f') {
						goto l1113
					}
					position++
					goto l1107
				l1113:
					position, tokenIndex = position1107, tokenIndex1107
					if buffer[position] != rune('\v') {
						goto l1105
					}
					position++
				}
			l1107:
				add(ruleOtherSpace, position1106)
			}
			return true
		l1105:
			position, tokenIndex = position1105, tokenIndex1105
			return false
		},
		/* 137 END <- <!.> */
		func() bool {
			position1114, tokenIndex1114 := position, tokenIndex
			{
				position1115 := position
				{
					position1116, tokenIndex1116 := position, tokenIndex
					if !matchDot() {
						goto l1116
					}
					goto l1114
				l1116:
					position, tokenIndex = position1116, tokenIndex1116
				}
				add(ruleEND, position1115)
			}
			return true
		l1114:
			position, tokenIndex = position1114, tokenIndex1114
			return false
		},
	}
	p.rules = _rules
	return nil
}
